{
	"id": 0,
	"name": "@epok.tech/gl-gpgpu - v0.7.0",
	"kind": 1,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 85,
			"name": "[@epok.tech/gl-gpgpu]",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "**Main "
					},
					{
						"kind": "code",
						"text": "`index.js`"
					},
					{
						"kind": "text",
						"text": " - see ["
					},
					{
						"kind": "code",
						"text": "`readme`"
					},
					{
						"kind": "text",
						"text": "](..)**\n\n[!["
					},
					{
						"kind": "code",
						"text": "`gl-gpgpu`"
					},
					{
						"kind": "text",
						"text": " particles demo](media://demo-particles-regl-frames.png)](..)\n\n[GPGPU](https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units)\nstate-stepping - declaratively maps optimal draw passes, shaders, "
					},
					{
						"kind": "code",
						"text": "`WebGL`"
					},
					{
						"kind": "text",
						"text": "\nresources, inputs, outputs - lets you focus on your logic, BYO-renderer.\n\nDecouples logic from rendering approach/engine.\nThe modules and many hooks may be used as given, or piecemeal, or overridden."
					}
				],
				"blockTags": [
					{
						"tag": "@todo",
						"content": [
							{
								"kind": "text",
								"text": "Allow passes within/across textures; separate data and texture shapes."
							}
						]
					}
				]
			},
			"originalName": "index",
			"children": [
				{
					"id": 99,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "index.js",
							"line": 70,
							"character": 0
						}
					],
					"target": 86
				},
				{
					"id": 86,
					"name": "gpgpu",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "index.js",
							"line": 51,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 87,
							"name": "gpgpu",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets up all the maps, inputs, resources, etc for a "
									},
									{
										"kind": "code",
										"text": "`gpgpu`"
									},
									{
										"kind": "text",
										"text": " process.\nEach component may also be used individually, see their documentation."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapSamples",
												"target": 67
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getUniforms",
												"target": 209
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroPass",
												"target": 417
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The given "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": ", set up for a "
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " process."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 88,
									"name": "api",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An API for "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " resources. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`getStep`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 89,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 90,
													"name": "limits",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "A map of "
															},
															{
																"kind": "code",
																"text": "`GL`"
															},
															{
																"kind": "text",
																"text": " resource limits."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.js",
															"line": 36,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 91,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 92,
																	"name": "maxDrawbuffers",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "index.js",
																			"line": 37,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		92
																	]
																}
															],
															"sources": [
																{
																	"fileName": "index.js",
																	"line": 37,
																	"character": 3
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														90
													]
												}
											],
											"sources": [
												{
													"fileName": "index.js",
													"line": 36,
													"character": 3
												}
											]
										}
									}
								},
								{
									"id": 93,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "State properties to set up; a new "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": " by\n  default. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`getUniforms`"
											},
											{
												"kind": "text",
												"text": ", and "
											},
											{
												"kind": "code",
												"text": "`getStep`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 94,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 95,
													"name": "maps",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "How values are grouped per-"
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " per-pass\n  per-step. Sets up new maps if not given or missing its mapped properties.\n  See "
															},
															{
																"kind": "code",
																"text": "`mapGroups`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "index.js",
															"line": 41,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 96,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 97,
																	"name": "buffersMax",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "index.js",
																			"line": 44,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		97
																	]
																}
															],
															"sources": [
																{
																	"fileName": "index.js",
																	"line": 44,
																	"character": 3
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														95
													]
												}
											],
											"sources": [
												{
													"fileName": "index.js",
													"line": 41,
													"character": 3
												}
											]
										}
									},
									"defaultValue": "{}"
								},
								{
									"id": 98,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The state "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": " to set up. Modifies the given\n  "
											},
											{
												"kind": "code",
												"text": "`state`"
											},
											{
												"kind": "text",
												"text": " object by default."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "state"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						99
					]
				},
				{
					"title": "Functions",
					"children": [
						86
					]
				}
			],
			"sources": [
				{
					"fileName": "index.js",
					"line": 20,
					"character": 0
				}
			]
		},
		{
			"id": 178,
			"name": "const",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Default properties for "
					},
					{
						"kind": "code",
						"text": "`gpgpu`"
					},
					{
						"kind": "text",
						"text": " and "
					},
					{
						"kind": "code",
						"text": "`GL`"
					},
					{
						"kind": "text",
						"text": " capabilities and resources."
					}
				]
			},
			"children": [
				{
					"id": 192,
					"name": "boundDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default how many steps are bound as outputs, unavailable as input; for\nplatforms forbidding read/write of same buffer."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 56,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 1
					},
					"defaultValue": "1"
				},
				{
					"id": 191,
					"name": "buffersMaxDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default maximum "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": "s bound per pass."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 50,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 1
					},
					"defaultValue": "1"
				},
				{
					"id": 190,
					"name": "channelsMaxDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default minimum allowable channels for "
							},
							{
								"kind": "code",
								"text": "`framebuffer`"
							},
							{
								"kind": "text",
								"text": " attachments.\nThis avoids "
							},
							{
								"kind": "code",
								"text": "`RGB32F`"
							},
							{
								"kind": "text",
								"text": " "
							},
							{
								"kind": "code",
								"text": "`framebuffer`"
							},
							{
								"kind": "text",
								"text": " attachments, which errors on Firefox."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "[Firefox "
									},
									{
										"kind": "code",
										"text": "`RGB32F`"
									},
									{
										"kind": "text",
										"text": " bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1448632)"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 47,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 4
					},
					"defaultValue": "4"
				},
				{
					"id": 189,
					"name": "channelsMinDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default minimum allowable channels for "
							},
							{
								"kind": "code",
								"text": "`framebuffer`"
							},
							{
								"kind": "text",
								"text": " attachments.\nThis avoids "
							},
							{
								"kind": "code",
								"text": "`RGB32F`"
							},
							{
								"kind": "text",
								"text": " "
							},
							{
								"kind": "code",
								"text": "`framebuffer`"
							},
							{
								"kind": "text",
								"text": " attachments, which errors on Firefox."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "[Firefox "
									},
									{
										"kind": "code",
										"text": "`RGB32F`"
									},
									{
										"kind": "text",
										"text": " bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1448632)"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 39,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 4
					},
					"defaultValue": "4"
				},
				{
					"id": 205,
					"name": "depthDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default "
							},
							{
								"kind": "code",
								"text": "`framebuffer`"
							},
							{
								"kind": "text",
								"text": " depth attachment."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 95,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": false
					},
					"defaultValue": "false"
				},
				{
					"id": 180,
					"name": "extensions",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "const.js",
							"line": 17,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 181,
							"name": "extensions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Default required extensions; none."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 182,
					"name": "extensionsFloat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "const.js",
							"line": 20,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 183,
							"name": "extensionsFloat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Default required extensions to draw to "
									},
									{
										"kind": "code",
										"text": "`float`"
									},
									{
										"kind": "text",
										"text": " buffers."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				},
				{
					"id": 184,
					"name": "extensionsHalfFloat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "const.js",
							"line": 24,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 185,
							"name": "extensionsHalfFloat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Default required extensions to draw to "
									},
									{
										"kind": "code",
										"text": "`half float`"
									},
									{
										"kind": "text",
										"text": " buffers."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				},
				{
					"id": 195,
					"name": "heightDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default height of the data "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": "s sides to allocate; gives a square\npower-of-two "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": " raising 2 to the default scale."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 74,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 203,
					"name": "magDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": " magnification filter."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 91,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "nearest"
					},
					"defaultValue": "'nearest'"
				},
				{
					"id": 207,
					"name": "mergeDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether states merge into one "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": "; one merged "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": " by default."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 99,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": true
					},
					"defaultValue": "true"
				},
				{
					"id": 202,
					"name": "minDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": " minification filter."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 89,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "nearest"
					},
					"defaultValue": "'nearest'"
				},
				{
					"id": 186,
					"name": "optionalExtensions",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "const.js",
							"line": 28,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 187,
							"name": "optionalExtensions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Default optional extensions; update more data in one render pass."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				},
				{
					"id": 199,
					"name": "positionsDef",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "const.js",
							"line": 82,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 200,
							"name": "positionsDef",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Default vertex positions "
									},
									{
										"kind": "code",
										"text": "`attribute`"
									},
									{
										"kind": "text",
										"text": "; 3 points of a large flat triangle."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 188,
					"name": "preDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Prefix namespace to avoid naming clashes; recommended."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 31,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "gpgpu_"
					},
					"defaultValue": "'gpgpu_'"
				},
				{
					"id": 193,
					"name": "scaleDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default length of the data "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": "s sides to allocate; gives a square\npower-of-two "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": " raising 2 to this power."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 62,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 9
					},
					"defaultValue": "9"
				},
				{
					"id": 206,
					"name": "stencilDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default "
							},
							{
								"kind": "code",
								"text": "`framebuffer`"
							},
							{
								"kind": "text",
								"text": " stencil attachment."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 97,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": false
					},
					"defaultValue": "false"
				},
				{
					"id": 196,
					"name": "stepsDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default number steps of state to track."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 77,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 2
					},
					"defaultValue": "2"
				},
				{
					"id": 201,
					"name": "typeDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": " data type."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 87,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "float"
					},
					"defaultValue": "'float'"
				},
				{
					"id": 197,
					"name": "valuesDef",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "const.js",
							"line": 80,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 198,
							"name": "valuesDef",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Default values to track."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					]
				},
				{
					"id": 179,
					"name": "vertDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default vertex shader "
							},
							{
								"kind": "code",
								"text": "`GLSL`"
							},
							{
								"kind": "text",
								"text": " code."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 12,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": "vertGLSL"
				},
				{
					"id": 194,
					"name": "widthDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default width of the data "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": "s sides to allocate; gives a square\npower-of-two "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": " raising 2 to the default scale."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 68,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 204,
					"name": "wrapDef",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": " wrap mode, avoid "
							},
							{
								"kind": "code",
								"text": "`WebGL1`"
							},
							{
								"kind": "text",
								"text": " needing power-of-2 "
							},
							{
								"kind": "code",
								"text": "`texture`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "const.js",
							"line": 93,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "clamp"
					},
					"defaultValue": "'clamp'"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"children": [
						192,
						191,
						190,
						189,
						205,
						195,
						203,
						207,
						202,
						188,
						193,
						206,
						196,
						201,
						179,
						194,
						204
					]
				},
				{
					"title": "Functions",
					"children": [
						180,
						182,
						184,
						186,
						199,
						197
					]
				}
			],
			"sources": [
				{
					"fileName": "const.js",
					"line": 8,
					"character": 0
				}
			]
		},
		{
			"id": 42,
			"name": "index-forms",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "How many vertexes for a given form to cover each entry's steps of state:\n- If 2 states or form are given, gives a setup of pairs for a line segment\n  between each entry's steps of state using "
					},
					{
						"kind": "code",
						"text": "`gl.LINES`"
					},
					{
						"kind": "text",
						"text": ".\n- If fewer than 2 states or form are given, gives a setup for a point at each\n  entry's steps of state using "
					},
					{
						"kind": "code",
						"text": "`gl.POINTS`"
					},
					{
						"kind": "text",
						"text": ".\n\nPossibly useful for other forms too.\n\nCorresponds to the indexing logic in the "
					},
					{
						"kind": "code",
						"text": "`indexForms`"
					},
					{
						"kind": "text",
						"text": " "
					},
					{
						"kind": "code",
						"text": "`GLSL`"
					},
					{
						"kind": "text",
						"text": " function."
					}
				],
				"blockTags": [
					{
						"tag": "@see",
						"content": [
							{
								"kind": "text",
								"text": " - "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "index-forms/index-states.glsl",
								"target": 39
							},
							{
								"kind": "text",
								"text": "\n"
							},
							{
								"kind": "text",
								"text": " - "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "index-forms/index-entries.glsl",
								"target": 49
							},
							{
								"kind": "text",
								"text": "\n"
							},
							{
								"kind": "text",
								"text": " - "
							},
							{
								"kind": "text",
								"text": "["
							},
							{
								"kind": "code",
								"text": "`gl.LINES`"
							},
							{
								"kind": "text",
								"text": "](https://webglfundamentals.org/webgl/lessons/webgl-points-lines-triangles.html)"
							},
							{
								"kind": "text",
								"text": "\n"
							}
						]
					},
					{
						"tag": "@param",
						"name": "states",
						"content": [
							{
								"kind": "text",
								"text": "How many steps of state each entry has."
							}
						]
					},
					{
						"tag": "@param",
						"name": "form",
						"content": [
							{
								"kind": "text",
								"text": "How many steps of state each form covers."
							}
						]
					},
					{
						"tag": "@param",
						"name": "entries",
						"content": [
							{
								"kind": "text",
								"text": "How many entries, if any; result to be multiplied\n  externally if not given."
							}
						]
					},
					{
						"tag": "@returns",
						"content": [
							{
								"kind": "text",
								"text": "The number of vertexes needed for the given "
							},
							{
								"kind": "code",
								"text": "`form`"
							},
							{
								"kind": "text",
								"text": " to cover\n  all steps of "
							},
							{
								"kind": "code",
								"text": "`states`"
							},
							{
								"kind": "text",
								"text": "; over all "
							},
							{
								"kind": "code",
								"text": "`entries`"
							},
							{
								"kind": "text",
								"text": " if given, to be multiplied\n  externally if not given."
							}
						]
					},
					{
						"tag": "@remarks",
						"content": [
							{
								"kind": "text",
								"text": "[[include:src/index-forms/readme.md]]"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 48,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "index-forms/index.js",
							"line": 33,
							"character": 0
						}
					],
					"target": 43
				},
				{
					"id": 43,
					"name": "indexForms",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "index-forms/index.js",
							"line": 30,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 44,
							"name": "indexForms",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 45,
									"name": "states",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								},
								{
									"id": 46,
									"name": "form",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "2"
								},
								{
									"id": 47,
									"name": "entries",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						48
					]
				},
				{
					"title": "Functions",
					"children": [
						43
					]
				}
			],
			"sources": [
				{
					"fileName": "index-forms/index.js",
					"line": 30,
					"character": 0
				}
			]
		},
		{
			"id": 49,
			"name": "index-forms/index-entries.glsl",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`./index-entries.glsl`"
					},
					{
						"kind": "text",
						"text": " transformed via "
					},
					{
						"kind": "code",
						"text": "`glslify`"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 51,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "index-forms/index-entries.glsl.js",
							"line": 17,
							"character": 1
						}
					],
					"target": 50
				},
				{
					"id": 50,
					"name": "glsl",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "code",
								"text": "`./index-entries.glsl`"
							},
							{
								"kind": "text",
								"text": " transformed via "
							},
							{
								"kind": "code",
								"text": "`glslify`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "index-forms/index-entries.glsl.js",
							"line": 15,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "transformed"
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						51
					]
				},
				{
					"title": "Variables",
					"children": [
						50
					],
					"categories": [
						{
							"title": "GLSL",
							"children": [
								50
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "index-forms/index-entries.glsl.js",
					"line": 7,
					"character": 1
				}
			]
		},
		{
			"id": 39,
			"name": "index-forms/index-states.glsl",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`./index-states.glsl`"
					},
					{
						"kind": "text",
						"text": " transformed via "
					},
					{
						"kind": "code",
						"text": "`glslify`"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 41,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "index-forms/index-states.glsl.js",
							"line": 17,
							"character": 0
						}
					],
					"target": 40
				},
				{
					"id": 40,
					"name": "glsl",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "code",
								"text": "`./index-states.glsl`"
							},
							{
								"kind": "text",
								"text": " transformed via "
							},
							{
								"kind": "code",
								"text": "`glslify`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "index-forms/index-states.glsl.js",
							"line": 15,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "transformed"
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						41
					]
				},
				{
					"title": "Variables",
					"children": [
						40
					],
					"categories": [
						{
							"title": "GLSL",
							"children": [
								40
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "index-forms/index-states.glsl.js",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 106,
			"name": "index.vert.glsl",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`./index.vert.glsl`"
					},
					{
						"kind": "text",
						"text": " transformed via "
					},
					{
						"kind": "code",
						"text": "`glslify`"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"originalName": "index.vert",
			"children": [
				{
					"id": 108,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "index.vert.js",
							"line": 17,
							"character": 0
						}
					],
					"target": 107
				},
				{
					"id": 107,
					"name": "glsl",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "code",
								"text": "`./index.vert.glsl`"
							},
							{
								"kind": "text",
								"text": " transformed via "
							},
							{
								"kind": "code",
								"text": "`glslify`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "index.vert.js",
							"line": 15,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "transformed"
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						108
					]
				},
				{
					"title": "Variables",
					"children": [
						107
					],
					"categories": [
						{
							"title": "GLSL",
							"children": [
								107
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "index.vert.js",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 208,
			"name": "inputs",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The "
					},
					{
						"kind": "code",
						"text": "`gpgpu`"
					},
					{
						"kind": "text",
						"text": " inputs - "
					},
					{
						"kind": "code",
						"text": "`uniforms`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`attribute`"
					},
					{
						"kind": "text",
						"text": "s, indexes, etc."
					}
				]
			},
			"children": [
				{
					"id": 248,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "inputs.js",
							"line": 192,
							"character": 0
						}
					],
					"target": 209
				},
				{
					"id": 231,
					"name": "getUniform",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "inputs.js",
							"line": 168,
							"character": 41
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 232,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "inputs.js",
									"line": 159,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 233,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function hook to update a uniform on each pass.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getUniforms",
												"target": 209
											},
											{
												"kind": "text",
												"text": "\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n\n**Parameters**\n- "
											},
											{
												"kind": "code",
												"text": "`context`"
											},
											{
												"kind": "text",
												"text": ": General or global properties.\n  - "
											},
											{
												"kind": "code",
												"text": "`drawingBufferWidth`"
											},
											{
												"kind": "text",
												"text": ": Current view width in pixels.\n  - "
											},
											{
												"kind": "code",
												"text": "`drawingBufferHeight`"
											},
											{
												"kind": "text",
												"text": ": Current view height in pixels.\n- "
											},
											{
												"kind": "code",
												"text": "`props`"
											},
											{
												"kind": "text",
												"text": ": Local properties ("
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`state`"
											},
											{
												"kind": "text",
												"text": ").\n  - "
											},
											{
												"kind": "code",
												"text": "`stepNow`"
											},
											{
												"kind": "text",
												"text": ": The current step of the "
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`state`"
											},
											{
												"kind": "text",
												"text": ".\n  - "
											},
											{
												"kind": "code",
												"text": "`bound`"
											},
											{
												"kind": "text",
												"text": ": Number of steps bound to output, cannot be input.\n  - "
											},
											{
												"kind": "code",
												"text": "`merge`"
											},
											{
												"kind": "text",
												"text": ": Object containing merged texture.\n    - "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": ": Merged texture.\n  - "
											},
											{
												"kind": "code",
												"text": "`textures`"
											},
											{
												"kind": "text",
												"text": ": Textures per step, as arrays of objects with a "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "\n    property. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": ".\n\n**Returns**\n- "
											},
											{
												"kind": "code",
												"text": "`uniform`"
											},
											{
												"kind": "text",
												"text": " A "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " uniform to be bound via a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " API."
											}
										]
									},
									"parameters": [
										{
											"id": 234,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 235,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 237,
															"name": "drawingBufferHeight",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 161,
																	"character": 7
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 236,
															"name": "drawingBufferWidth",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 160,
																	"character": 7
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																237,
																236
															]
														}
													],
													"sources": [
														{
															"fileName": "inputs.js",
															"line": 159,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 238,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 239,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 241,
															"name": "bound",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 165,
																	"character": 7
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 242,
															"name": "merge",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 166,
																	"character": 7
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 243,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 244,
																			"name": "texture",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "inputs.js",
																					"line": 166,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "object"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				244
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "inputs.js",
																			"line": 166,
																			"character": 14
																		}
																	]
																}
															}
														},
														{
															"id": 240,
															"name": "stepNow",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 164,
																	"character": 7
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 245,
															"name": "textures",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 167,
																	"character": 7
																}
															],
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 246,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {},
																					"children": [
																						{
																							"id": 247,
																							"name": "texture",
																							"kind": 1024,
																							"kindString": "Property",
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "inputs.js",
																									"line": 167,
																									"character": 33
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "object"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								247
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "inputs.js",
																							"line": 167,
																							"character": 31
																						}
																					]
																				}
																			}
																		],
																		"name": "array"
																	}
																],
																"name": "array"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																241,
																242,
																240,
																245
															]
														}
													],
													"sources": [
														{
															"fileName": "inputs.js",
															"line": 163,
															"character": 12
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												],
												"name": "array"
											},
											{
												"type": "intrinsic",
												"name": "object"
											}
										]
									}
								}
							]
						}
					}
				},
				{
					"id": 209,
					"name": "getUniforms",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "inputs.js",
							"line": 108,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 210,
							"name": "getUniforms",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets up "
									},
									{
										"kind": "code",
										"text": "`GL`"
									},
									{
										"kind": "text",
										"text": " "
									},
									{
										"kind": "code",
										"text": "`uniform`"
									},
									{
										"kind": "text",
										"text": " inputs for "
									},
									{
										"kind": "code",
										"text": "`gpgpu`"
									},
									{
										"kind": "text",
										"text": " calls, such as in "
									},
									{
										"kind": "code",
										"text": "`getStep`"
									},
									{
										"kind": "text",
										"text": ".\n\nThe "
									},
									{
										"kind": "code",
										"text": "`uniform`"
									},
									{
										"kind": "text",
										"text": "s are defined as callback hooks to be called at each pass with\nglobal context and local state "
									},
									{
										"kind": "code",
										"text": "`object`"
									},
									{
										"kind": "text",
										"text": "s, allowing the use of different "
									},
									{
										"kind": "code",
										"text": "`GL`"
									},
									{
										"kind": "text",
										"text": "\nAPIs or author-defined hooks.\n\nHandles inputs of states as "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": "s of data-"
									},
									{
										"kind": "code",
										"text": "`texture`"
									},
									{
										"kind": "text",
										"text": "s, or merged into one\ndata-"
									},
									{
										"kind": "code",
										"text": "`texture`"
									},
									{
										"kind": "text",
										"text": "; for "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": "s of "
									},
									{
										"kind": "code",
										"text": "`texture`"
									},
									{
										"kind": "text",
										"text": "s, this arranges them on each step\nso "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " can dynamically sample the flattened "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": " of "
									},
									{
										"kind": "code",
										"text": "`texture`"
									},
									{
										"kind": "text",
										"text": "s by a\nconstant step index; otherwise the single merged "
									},
									{
										"kind": "code",
										"text": "`texture`"
									},
									{
										"kind": "text",
										"text": " is bound once, and\n"
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " can use a dynamic step index to sample states."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```javascript\nconst state = { pre: '', steps: 2, maps: mapValues({ values: [1, 2, 3] }) };\nconst api = {};\n\ngetUniforms(getState(api, { ...state, merge: false }, {})); // =>\n{\n  stepNow: (context, state) => {},\n  dataShape: (context, state) => {},\n  viewShape: (context, state) => {},\n  // Data-`texture`s kept separate in a `sampler2D[]`.\n  // Data-`texture`s for the 1st step ago not bound as an output.\n  'states[0]': (context, state) => {},\n  'states[1]': (context, state) => {},\n  // Merged `texture` not used.\n  states: (context, state) => null\n};\n\ngetUniforms(getState(api, { ...state, steps: 3, merge: false }, {})); // =>\n{\n  stepNow: (context, state) => {},\n  dataShape: (context, state) => {},\n  viewShape: (context, state) => {},\n  // Data-`texture`s kept separate in a `sampler2D[]`.\n  // Data-`texture`s for the 1st step ago not bound as an output.\n  'states[0]': (context, state) => {},\n  'states[1]': (context, state) => {}\n  // Data-`texture`s for the 2nd step ago not bound as an output.\n  'states[2]': (context, state) => {},\n  'states[3]': (context, state) => {},\n  // Merged `texture` not used.\n  states: (context, state) => null\n};\n\ngetUniforms(getState(api, { ...state, merge: true }, {})); // =>\n{\n  stepNow: (context, state) => {},\n  dataShape: (context, state) => {},\n  viewShape: (context, state) => {},\n  // All states merged into one data-`texture` upon every pass; for\n  // `sampler2D`, or `sampler3D`/`sampler2DArray` where supported.\n  states: (context, state) => {},\n  // Separate data-`texture`s not used.\n  'states[0]': (context, state) => null,\n  'states[1]': (context, state) => null\n};\n```"
											}
										]
									},
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getUniform",
												"target": 231
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "countDrawIndexes",
												"target": 24
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroSamples",
												"target": 362
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroTaps",
												"target": 366
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " The uniform\n  hooks for the given "
											},
											{
												"kind": "code",
												"text": "`state`"
											},
											{
												"kind": "text",
												"text": ". Each is a static number or "
											},
											{
												"kind": "code",
												"text": "`array`"
											},
											{
												"kind": "text",
												"text": " of numbers;\n  or a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " object such as a "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "; or a "
											},
											{
												"kind": "code",
												"text": "`getUniform`"
											},
											{
												"kind": "text",
												"text": " function returning\n  one, to be called on each pass."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 211,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " state. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`mapGroups`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 212,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 229,
													"name": "bound",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Number of steps bound for output, not\n  used for input; for platforms forbidding read/write of the same "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "inputs.js",
															"line": 98,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 214,
													"name": "maps",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "How values are grouped per-"
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " per-pass\n  per-step. See "
															},
															{
																"kind": "code",
																"text": "`mapGroups`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "inputs.js",
															"line": 85,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 215,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 216,
																	"name": "textures",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "inputs.js",
																			"line": 87,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "number"
																					}
																				],
																				"name": "array"
																			}
																		],
																		"name": "array"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		216
																	]
																}
															],
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 87,
																	"character": 3
																}
															]
														}
													}
												},
												{
													"id": 218,
													"name": "merge",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any merged state "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "; uses separate state\n  "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "s if not given. See "
															},
															{
																"kind": "code",
																"text": "`getState`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "inputs.js",
															"line": 90,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 219,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 220,
																	"name": "all",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "inputs.js",
																			"line": 90,
																			"character": 12
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 221,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 222,
																					"name": "texture",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "inputs.js",
																							"line": 90,
																							"character": 17
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "any"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [
																						222
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "inputs.js",
																					"line": 90,
																					"character": 16
																				}
																			]
																		}
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		220
																	]
																}
															],
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 90,
																	"character": 11
																}
															]
														}
													}
												},
												{
													"id": 217,
													"name": "pre",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Namespace prefix; "
															},
															{
																"kind": "code",
																"text": "`preDef`"
															},
															{
																"kind": "text",
																"text": " if not given."
															}
														]
													},
													"sources": [
														{
															"fileName": "inputs.js",
															"line": 89,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 223,
													"name": "size",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any size of "
															},
															{
																"kind": "code",
																"text": "`state`"
															},
															{
																"kind": "text",
																"text": " data. See "
															},
															{
																"kind": "code",
																"text": "`getState`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "inputs.js",
															"line": 92,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 224,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 226,
																	"name": "merge",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "inputs.js",
																			"line": 95,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 227,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 228,
																					"name": "shape",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "inputs.js",
																							"line": 96,
																							"character": 3
																						}
																					],
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "number"
																							}
																						],
																						"name": "array"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [
																						228
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "inputs.js",
																					"line": 96,
																					"character": 3
																				}
																			]
																		}
																	}
																},
																{
																	"id": 225,
																	"name": "shape",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "inputs.js",
																			"line": 93,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			}
																		],
																		"name": "array"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		226,
																		225
																	]
																}
															],
															"sources": [
																{
																	"fileName": "inputs.js",
																	"line": 93,
																	"character": 3
																}
															]
														}
													}
												},
												{
													"id": 213,
													"name": "steps",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The "
															},
															{
																"kind": "code",
																"text": "`array`"
															},
															{
																"kind": "text",
																"text": " of steps, or number of steps.\n  See "
															},
															{
																"kind": "code",
																"text": "`getState`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "inputs.js",
															"line": 83,
															"character": 3
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														229,
														214,
														218,
														217,
														223,
														213
													]
												}
											],
											"sources": [
												{
													"fileName": "inputs.js",
													"line": 83,
													"character": 3
												}
											]
										}
									}
								},
								{
									"id": 230,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										],
										"name": "array"
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "reference",
										"id": 231,
										"name": "getUniform"
									}
								],
								"name": "object"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						248
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						231
					]
				},
				{
					"title": "Functions",
					"children": [
						209
					]
				}
			],
			"sources": [
				{
					"fileName": "inputs.js",
					"line": 8,
					"character": 0
				}
			]
		},
		{
			"id": 100,
			"name": "lookup/index-uv.glsl",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`./index-uv.glsl`"
					},
					{
						"kind": "text",
						"text": " transformed via "
					},
					{
						"kind": "code",
						"text": "`glslify`"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 102,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lookup/index-uv.glsl.js",
							"line": 17,
							"character": 0
						}
					],
					"target": 101
				},
				{
					"id": 101,
					"name": "glsl",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "code",
								"text": "`./index-uv.glsl`"
							},
							{
								"kind": "text",
								"text": " transformed via "
							},
							{
								"kind": "code",
								"text": "`glslify`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "lookup/index-uv.glsl.js",
							"line": 15,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "transformed"
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						102
					]
				},
				{
					"title": "Variables",
					"children": [
						101
					],
					"categories": [
						{
							"title": "GLSL",
							"children": [
								101
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "lookup/index-uv.glsl.js",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 103,
			"name": "lookup/offset-uv.glsl",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`./offset-uv.glsl`"
					},
					{
						"kind": "text",
						"text": " transformed via "
					},
					{
						"kind": "code",
						"text": "`glslify`"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 105,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lookup/offset-uv.glsl.js",
							"line": 17,
							"character": 0
						}
					],
					"target": 104
				},
				{
					"id": 104,
					"name": "glsl",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "code",
								"text": "`./offset-uv.glsl`"
							},
							{
								"kind": "text",
								"text": " transformed via "
							},
							{
								"kind": "code",
								"text": "`glslify`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "lookup/offset-uv.glsl.js",
							"line": 15,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "transformed"
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						105
					]
				},
				{
					"title": "Variables",
					"children": [
						104
					],
					"categories": [
						{
							"title": "GLSL",
							"children": [
								104
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "lookup/offset-uv.glsl.js",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 347,
			"name": "macros",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The "
					},
					{
						"kind": "code",
						"text": "`gpgpu`"
					},
					{
						"kind": "text",
						"text": " "
					},
					{
						"kind": "code",
						"text": "`GLSL`"
					},
					{
						"kind": "text",
						"text": " preprocessor macros for working with the state and maps.\n\nUse these with care, as each set of different macros will result in new\nshaders and compilations; so, as few unique macros as possible should be\ncreated for a given set of inputs, for efficiency."
					}
				],
				"blockTags": [
					{
						"tag": "@todo",
						"content": [
							{
								"kind": "text",
								"text": "Ensure the "
							},
							{
								"kind": "code",
								"text": "`output_N`"
							},
							{
								"kind": "text",
								"text": " in "
							},
							{
								"kind": "code",
								"text": "`macroOutput`"
							},
							{
								"kind": "text",
								"text": " can work with "
							},
							{
								"kind": "code",
								"text": "`WebGL2`"
							},
							{
								"kind": "text",
								"text": "; look at\n  using "
							},
							{
								"kind": "code",
								"text": "`layout(location=attach_N) out data_N`"
							},
							{
								"kind": "text",
								"text": ", not "
							},
							{
								"kind": "code",
								"text": "`gl_FragData[attach_N]`"
							},
							{
								"kind": "text",
								"text": ".\n  - https://stackoverflow.com/questions/51793336/multiple-output-textures-from-the-same-program\n  - https://stackoverflow.com/questions/46740817/gl-fragdata-must-be-constant-zero\n  - https://stackoverflow.com/questions/50258822/how-are-layout-qualifiers-better-than-getattriblocation-in-webgl2"
							}
						]
					},
					{
						"tag": "@todo",
						"content": [
							{
								"kind": "text",
								"text": "Redo examples, especially "
							},
							{
								"kind": "code",
								"text": "`macroTaps`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`macroPass`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 372,
					"name": "cache",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Simple cache for temporary or reusable objects."
							}
						]
					},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 30,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 373,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "macros.js",
									"line": 30,
									"character": 13
								}
							]
						}
					},
					"defaultValue": "{}"
				},
				{
					"id": 370,
					"name": "cr",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Escaped carriage-return for easier reading."
							}
						]
					},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 26,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": " \\\n"
					},
					"defaultValue": "' \\\\\\n'"
				},
				{
					"id": 421,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 1086,
							"character": 0
						}
					],
					"target": 417
				},
				{
					"id": 395,
					"name": "getGLSL1ListArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 203,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 396,
							"name": "getGLSL1ListArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generates an array declaration, as a "
									},
									{
										"kind": "code",
										"text": "`GLSL1`"
									},
									{
										"kind": "text",
										"text": " syntax string.\n\nLookup and meta macros are added for consistency with other versions."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getGLSLListBase",
												"target": 381
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  getGLSL1ListArray('vec3', 'list', [[1, 0, 0], [0, 2, 0], [0, 0, 3]]);\n  // =>\n  'const int list_l = 3;'+cr+\n  'vec3 list_0 = vec3(1, 0, 0);'+cr+\n  'vec3 list_1 = vec3(0, 2, 0);'+cr+\n  'vec3 list_2 = vec3(0, 0, 3);'+cr+\n  'vec3 list[list_l];'+cr+\n  'list[0] = list_0;'+cr+\n  'list[1] = list_1;'+cr+\n  'list[2] = list_2;\\n'+\n  '#define list_i(i) list[i]\\n';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL1`"
											},
											{
												"kind": "text",
												"text": " array declaration string."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 397,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list data-type."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 398,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list variable."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 399,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " values."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												],
												"name": "array"
											}
										],
										"name": "array"
									}
								},
								{
									"id": 400,
									"name": "qualify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " qualifier, if needed."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 401,
									"name": "init",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A data-type initialiser, "
											},
											{
												"kind": "code",
												"text": "`type`"
											},
											{
												"kind": "text",
												"text": " by default."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "type"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 388,
					"name": "getGLSL1ListLike",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 164,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 389,
							"name": "getGLSL1ListLike",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generates an array-like declaration, as a "
									},
									{
										"kind": "code",
										"text": "`GLSL1`"
									},
									{
										"kind": "text",
										"text": " syntax string.\n\nWorkaround for lack of "
									},
									{
										"kind": "code",
										"text": "`const`"
									},
									{
										"kind": "text",
										"text": " arrays in "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " < 3. Adds a lookup macro\nfunction; slow here, but standard."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getGLSLListBase",
												"target": 381
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  getGLSL1ListLike('float', 'list', [0, 1, 2], 'const'); // =>\n  'const int list_l = 3;'+cr+\n  'const int list_0 = float(0);'+cr+\n  'const int list_1 = float(1);'+cr+\n  'const int list_2 = float(2);\\n'+\n  '// Index macro `list_i` (e.g: `list_i(0)`) may be slow, `+\n    'use name (e.g: `list_0`) if possible.\\n'+\n  '#define list_i(i) ((i == 2)? list_2 : ((i == 1)? list_1 : list_0))\\n';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL1`"
											},
											{
												"kind": "text",
												"text": " array-like declaration string."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 390,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list data-type."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 391,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list variable."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 392,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " values."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												],
												"name": "array"
											}
										],
										"name": "array"
									}
								},
								{
									"id": 393,
									"name": "qualify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " qualifier, if needed."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 394,
									"name": "init",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A data-type initialiser, "
											},
											{
												"kind": "code",
												"text": "`type`"
											},
											{
												"kind": "text",
												"text": " by default."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "type"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 402,
					"name": "getGLSL3List",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 234,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 403,
							"name": "getGLSL3List",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generates an array declaration, as a "
									},
									{
										"kind": "code",
										"text": "`GLSL3`"
									},
									{
										"kind": "text",
										"text": " syntax string.\n\nLookup and meta macros are added for consistency with other versions."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getGLSLListBase",
												"target": 381
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  getGLSL3List('int', 'list', [0, 1, 2], 'const'); // =>\n  'const int list_l = 3;'+cr+\n  'const int list_0 = int(0);'+cr+\n  'const int list_1 = int(1);'+cr+\n  'const int list_2 = int(2);'+cr+\n  'const int list[list_l] = int[list_l](list_0, list_1, list_2);\\n'+\n  '#define list_i(i) list[i]\\n';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL3`"
											},
											{
												"kind": "text",
												"text": " array declaration string."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 404,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list data-type."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 405,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list variable."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 406,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " values."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												],
												"name": "array"
											}
										],
										"name": "array"
									}
								},
								{
									"id": 407,
									"name": "qualify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " qualifier, if needed."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 408,
									"name": "init",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A data-type initialiser, "
											},
											{
												"kind": "code",
												"text": "`type`"
											},
											{
												"kind": "text",
												"text": " by default."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "type"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 409,
					"name": "getGLSLList",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 291,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 410,
							"name": "getGLSLList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " definition of an array, and initialises it with the given\nvalues, type, and variable name.\n\nThe initialisation is valid "
									},
									{
										"kind": "code",
										"text": "`GLSL1`"
									},
									{
										"kind": "text",
										"text": " or greater syntax; but is written with\nescaped new-lines so it may be used in a single-line (e.g: for preprocessor\nmacros).\n\nFor a "
									},
									{
										"kind": "code",
										"text": "`qualify`"
									},
									{
										"kind": "text",
										"text": " of "
									},
									{
										"kind": "code",
										"text": "`const`"
									},
									{
										"kind": "text",
										"text": " on any "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " < 3, falls back to using non-array\nvariables with the index appended to "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": ", since "
									},
									{
										"kind": "code",
										"text": "`const`"
									},
									{
										"kind": "text",
										"text": " arrays aren't\nsupported before "
									},
									{
										"kind": "code",
										"text": "`GLSL3`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getGLSL3List",
												"target": 402
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getGLSL1ListLike",
												"target": 388
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getGLSL1ListArray",
												"target": 395
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  getGLSLList('int', 'test', [0, 1]); // =>\n  'const int test_l = 2;'+cr+\n  'int test_0 = int(0);'+cr+\n  'int test_1 = int(1);'+cr+\n  'int test[test_l];'+cr+\n  'test[0] = test_0;'+cr+\n  'test[1] = test_1;\\n'+\n  '#define test_i(i) test[i]\\n';\n\n  getGLSLList('ivec2', 'vecs', [[1, 0], [0, 1]], 'const', 3); // =>\n  'const int vecs_l = 2;'+cr+\n  'ivec2 vecs_0 = ivec2(1, 0);'+cr+\n  'ivec2 vecs_1 = ivec2(0, 1);'+cr+\n  'const ivec2 vecs[vecs_l] = ivec2[vecs_l](vecs_0, vecs_1);\\n'+\n  '#define vecs_i(i) vecs[i]\\n';\n\n  getGLSLList('int', 'listLike', [0, 1], 'const', 1); // =>\n  'const int listLike_l = 2;'+cr+\n  'const int listLike_0 = int(0);'+cr+\n  'const int listLike_1 = int(1);\\n'+\n  '// Index macro `listLike_i` (e.g: `listLike_i(0)`) may be slow, `+\n    'use name (e.g: `listLike_0`) if possible.\\n'+\n  '#define listLike_i(i) ((i == 1)? listLike_1 : listLike_0)\\n';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " (1 or 3) array or array-like declaration string."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 411,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list data-type."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 412,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list variable."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 413,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " values."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												],
												"name": "array"
											}
										],
										"name": "array"
									}
								},
								{
									"id": 414,
									"name": "qualify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " qualifier, if needed (e.g: "
											},
											{
												"kind": "code",
												"text": "`const`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 415,
									"name": "glsl",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " version to target, if specified."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								},
								{
									"id": 416,
									"name": "init",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A data-type initialiser."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 381,
					"name": "getGLSLListBase",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 130,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 382,
							"name": "getGLSLListBase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generates an array-like declaration, as a "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " syntax string compatible\nwith all versions.\n\nWorkaround for lack of "
									},
									{
										"kind": "code",
										"text": "`const`"
									},
									{
										"kind": "text",
										"text": " arrays in "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " < 3. Used as the base for the\nother "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " version list types, ensuring a standard basis while offering\nfurther language features where available."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  getGLSLListBase('float', 'list', [0, 1, 2], 'const'); // =>\n  'const int list_l = 3;'+cr+\n  'const int list_0 = float(0);'+cr+\n  'const int list_1 = float(1);'+cr+\n  'const int list_2 = float(2);';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL1`"
											},
											{
												"kind": "text",
												"text": " array-like declaration string."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 383,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list data-type."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 384,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " list variable."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 385,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " values."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												],
												"name": "array"
											}
										],
										"name": "array"
									}
								},
								{
									"id": 386,
									"name": "qualify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " qualifier, if needed."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 387,
									"name": "init",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A data-type initialiser, "
											},
											{
												"kind": "code",
												"text": "`type`"
											},
											{
												"kind": "text",
												"text": " by default."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "type"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 348,
					"name": "hasMacros",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 92,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 349,
							"name": "hasMacros",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether macros should be handled here; or the result of handling them by a\ngiven named hook.\nAllows macros of the given key to be handled by external named hooks, to\nreplace any part of the functionality here."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  // Macros to be handled here, the default.\n  [hasMacros(), hasMacros({}), hasMacros({ macros: true })]]\n    .every((m) => m === null);\n\n  // Macros to be handled here, with prefix `'pre_'` instead of `'preDef'`.\n  hasMacros({ pre: 'pre_' }) === null;\n\n  // Macros not created.\n  [hasMacros({ macros: false }), hasMacros({ macros: 0 })]\n    .every((m) => m === '');\n\n  // Macros for 'a' handled by external static hook, not here.\n  hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'a') === '//A\\n';\n  // Macros for 'b' handled by external function hook, not here.\n  hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'b') === '//B\\n';\n  // Macros specified `on` a 'frag' not created.\n  hasMacros({ macros: { frag: 0 } }, '', 'frag') === '';\n  // Macros specified `on` a 'vert' handled here.\n  hasMacros({ macros: { frag: 0, a_vert: 0 } }, '', 'vert') === null;\n  // Macros for hook `'a'` specified `on` a 'vert' not created.\n  hasMacros({ macros: { frag: 0, a_vert: 0 } }, 'a', 'vert') === '';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either the result of the macros handled elsewhere,\n  or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " if macros should be handled here."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 350,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The properties handling macros."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 351,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name for which macros should be handled."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 352,
									"name": "on",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Any further macro "
											},
											{
												"kind": "code",
												"text": "`hooks`"
											},
											{
												"kind": "text",
												"text": " specifier; if given, both\n  the hook key and this specifier are checked (e.g: "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`key_on`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 353,
									"name": "macros",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Whether and how\n  "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " preprocessor macros should be handled:\n  - If it's false-y and non-nullish, no macros are handled here.\n  - If it's a string, no macros are handled here as it's used instead.\n  - If it's a function, it's passed the given "
											},
											{
												"kind": "code",
												"text": "`props`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`macros`"
											},
											{
												"kind": "text",
												"text": ", and\n    the returned result is used.\n  - If it's an object, any value at the given "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": " is entered recursively,\n    with the given "
											},
											{
												"kind": "code",
												"text": "`props`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": ", and "
											},
											{
												"kind": "code",
												"text": "`macros[key]`"
											},
											{
												"kind": "text",
												"text": ".\n  - Otherwise, returns "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " to indicate macros should be handled here."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "props.macros"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 374,
					"name": "hooks",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Keys for each part of the macro handling process available to hooks."
							}
						]
					},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 36,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 375,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 378,
									"name": "macroOutput",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "macros.js",
											"line": 40,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'output'"
								},
								{
									"id": 376,
									"name": "macroPass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The full set of macros."
											}
										]
									},
									"sources": [
										{
											"fileName": "macros.js",
											"line": 38,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 379,
									"name": "macroSamples",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "macros.js",
											"line": 41,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'samples'"
								},
								{
									"id": 380,
									"name": "macroTaps",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "macros.js",
											"line": 41,
											"character": 27
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'taps'"
								},
								{
									"id": 377,
									"name": "macroValues",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Each part of the set of macros."
											}
										]
									},
									"sources": [
										{
											"fileName": "macros.js",
											"line": 40,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'values'"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										378,
										376,
										379,
										380,
										377
									]
								}
							],
							"sources": [
								{
									"fileName": "macros.js",
									"line": 36,
									"character": 21
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 358,
					"name": "macroOutput",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 510,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 359,
							"name": "macroOutput",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Defines the outputs being drawn to per-pass, as "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " preprocessor macros.\n\nThese macros define mappings from values to their outputs, if bound.\nCaches the result if "
									},
									{
										"kind": "code",
										"text": "`macros`"
									},
									{
										"kind": "text",
										"text": " generation is enabled, to help reuse shaders."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "hasMacros",
												"target": 348
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  const maps = { values: [2, 4, 1], channelsMax: 4 };\n\n  // No optimisations - values not packed, single texture output per pass.\n  const state = {\n    pre: '', passNow: 0,\n    maps: mapGroups({ ...maps, buffersMax: 1, packed: 0 })\n  };\n\n  macroOutput(state); // =>\n  '#define passNow 0\\n'+\n  '\\n'+\n  '#define bound_0 0\\n'+\n  '#define attach_0 0\\n'+\n  '#define output_0 gl_FragData[attach_0].rg\\n'+\n  '\\n';\n\n  // Automatically packed values - values across fewer textures/passes.\n  state.maps = mapGroups({ ...maps, buffersMax: 1 });\n  macroOutput(state); // =>\n  '#define passNow 0\\n'+\n  '\\n'+\n  '#define bound_1 0\\n'+\n  '#define attach_1 0\\n'+\n  '#define output_1 gl_FragData[attach_1].rgba\\n'+\n  '\\n';\n\n  // Next pass in this step.\n  ++state.passNow;\n  macroOutput(state); // =>\n  '#define passNow 1\\n'+\n  '\\n'+\n  '#define bound_0 1\\n'+\n  '#define attach_0 0\\n'+\n  '#define output_0 gl_FragData[attach_0].rg\\n'+\n  '\\n'+\n  '#define bound_2 1\\n'+\n  '#define attach_2 0\\n'+\n  '#define output_2 gl_FragData[attach_2].b\\n'+\n  '\\n';\n\n  // Can bind more texture outputs per pass - values across fewer passes.\n  state.maps = mapGroups({ ...maps, buffersMax: 4 });\n  state.passNow = 0;\n  macroOutput(state); // =>\n  '#define passNow 0\\n'+\n  '\\n'+\n  '#define bound_1 0\\n'+\n  '#define attach_1 0\\n'+\n  '#define output_1 gl_FragData[attach_1].rgba\\n'+\n  '\\n'+\n  '#define bound_0 1\\n'+\n  '#define attach_0 1\\n'+\n  '#define output_0 gl_FragData[attach_0].rg\\n'+\n  '\\n'+\n  '#define bound_2 1\\n'+\n  '#define attach_2 1\\n'+\n  '#define output_2 gl_FragData[attach_2].b\\n'+\n  '\\n';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " preprocessor macros for the pass's bound outputs."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 360,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Properties for generating the macros. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": ":"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 361,
									"name": "on",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Any further macro "
											},
											{
												"kind": "code",
												"text": "`hooks`"
											},
											{
												"kind": "text",
												"text": " specifier; if given, both\n  the hook key and this specifier are checked (e.g: "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`key_on`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 417,
					"name": "macroPass",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 1082,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 418,
							"name": "macroPass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Defines all "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " preprocessor macro values, texture samples, and outputs\nfor the active pass.\n\nThe macros define the mapping between the active values, their textures and\nchannels, bound outputs, and other macros useful for a draw pass.\nCaches the result if "
									},
									{
										"kind": "code",
										"text": "`macros`"
									},
									{
										"kind": "text",
										"text": " generation is enabled, to help reuse shaders."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "hasMacros",
												"target": 348
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroValues",
												"target": 354
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroOutput",
												"target": 358
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroTaps",
												"target": 366
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroSamples",
												"target": 362
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapValues",
												"target": 80
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  const values = [2, 4, 1];\n  const derives = [2, , [[1, 0], true]];\n\n  // Automatically packed values - values across fewer textures/passes.\n  // Only a single texture output per pass - values across more passes.\n  const state = {\n    passNow: 0, steps: 2, size: { count: 2**5 },\n    maps: mapValues({ values, derives, channelsMax: 4, buffersMax: 1 })\n  };\n\n  macroPass(state); // =>\n  '#define gpgpu_texture_1 0\\n'+\n  '#define gpgpu_channels_1 rgba\\n'+\n  '\\n'+\n  '#define gpgpu_texture_0 1\\n'+\n  '#define gpgpu_channels_0 rg\\n'+\n  '\\n'+\n  '#define gpgpu_texture_2 1\\n'+\n  '#define gpgpu_channels_2 b\\n'+\n  '\\n'+\n  '#define count 32\\n'+\n  '#define gpgpu_textures 2\\n'+\n  '#define gpgpu_passes 2\\n'+\n  '#define gpgpu_stepsPast 1\\n'+\n  '#define gpgpu_steps 2\\n'+\n  '\\n'+\n  '#define gpgpu_passNow 0\\n'+\n  '\\n'+\n  '#define gpgpu_bound_1 0\\n'+\n  '#define gpgpu_attach_1 0\\n'+\n  '#define gpgpu_output_1 gl_FragData[gpgpu_attach_1].rgba\\n'+\n  '\\n';\n\n  // Next pass and extra step.\n  ++state.steps;\n  ++state.passNow;\n  state.pre = '';\n  macroPass(state); // =>\n  '#define texture_1 0\\n'+\n  '#define channels_1 rgba\\n'+\n  '\\n'+\n  '#define texture_0 1\\n'+\n  '#define channels_0 rg\\n'+\n  '\\n'+\n  '#define texture_2 1\\n'+\n  '#define channels_2 b\\n'+\n  '\\n'+\n  '#define count 32\\n'+\n  '#define textures 2\\n'+\n  '#define passes 2\\n'+\n  '#define stepsPast 2\\n'+\n  '#define steps 3\\n'+\n  '\\n'+\n  '#define passNow 1\\n'+\n  '\\n'+\n  '#define bound_0 1\\n'+\n  '#define attach_0 0\\n'+\n  '#define output_0 gl_FragData[attach_0].rg\\n'+\n  '\\n'+\n  '#define bound_2 1\\n'+\n  '#define attach_2 0\\n'+\n  '#define output_2 gl_FragData[attach_2].b\\n'+\n  '\\n'+\n  '#define useSamples'+cr+\n    'const int samples_l = 3;'+cr+\n    'const ivec2 samples_0 = ivec2(0, 1);'+cr+\n    'const ivec2 samples_1 = ivec2(1, 1);'+cr+\n    'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n  '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n    'use name (e.g: `samples_0`) if possible.\\n'+\n  '#define samples_i(i)'+cr+\n    '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n  '\\n'+\n  '#define useReads_0'+cr+\n    'const int reads_0_l = 1;'+cr+\n    'const int reads_0_0 = int(0);\\n'+\n  '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n    'use name (e.g: `reads_0_0`) if possible.\\n'+\n  '#define reads_0_i(i) reads_0_0\\n'+\n  '\\n'+\n  '#define useReads_2'+cr+\n    'const int reads_2_l = 4;'+cr+\n    'const int reads_2_0 = int(1);'+cr+\n    'const int reads_2_1 = int(0);'+cr+\n    'const int reads_2_2 = int(2);'+cr+\n    'const int reads_2_3 = int(0);\\n'+\n  '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n    'use name (e.g: `reads_2_0`) if possible.\\n'+\n  '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n    ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n  '\\n'+\n  '// States in a `sampler2D[]`; looks up 1D index and 2D `uv`.\\n'+\n  '@todo';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " preprocessor macros defining the mappings for\n  values, textures, channels, bound outputs of the active pass, etc. See\n  "
											},
											{
												"kind": "code",
												"text": "`macroValues`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`macroOutput`"
											},
											{
												"kind": "text",
												"text": ", and "
											},
											{
												"kind": "code",
												"text": "`macroSamples`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 419,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Properties for generating the macros. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": "\n  and "
											},
											{
												"kind": "code",
												"text": "`mapGroups`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 420,
									"name": "on",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Any further macro "
											},
											{
												"kind": "code",
												"text": "`hooks`"
											},
											{
												"kind": "text",
												"text": " specifier; if given, both\n  the hook key and this specifier are checked (e.g: "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`key_on`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 362,
					"name": "macroSamples",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 664,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 363,
							"name": "macroSamples",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Defines the texture samples/reads per-pass, as "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " preprocessor macros.\n\nThe macros define the mapping between the values and those they derive from,\nas step/texture locations in a "
									},
									{
										"kind": "code",
										"text": "`samples`"
									},
									{
										"kind": "text",
										"text": " list, and indexes to read values\nfrom sampled data in a "
									},
									{
										"kind": "code",
										"text": "`reads`"
									},
									{
										"kind": "text",
										"text": " list (once sampled into a "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " list, as in\n"
									},
									{
										"kind": "code",
										"text": "`macroTaps`"
									},
									{
										"kind": "text",
										"text": " or similar).\n\nThey're set up as function-like macros that may be called from the shader to\ninitialise the mappings arrays with a given name.\nCaches the result if "
									},
									{
										"kind": "code",
										"text": "`macros`"
									},
									{
										"kind": "text",
										"text": " generation is enabled, to help reuse shaders."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroTaps",
												"target": 366
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "hasMacros",
												"target": 348
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getGLSLList",
												"target": 409
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapValues",
												"target": 80
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  const values = [2, 4, 1];\n  const derives = [2, , [[1, 0], true]];\n  const maps = { values, derives, channelsMax: 4 };\n\n  // No optimisations - values not packed, single texture output per pass.\n  const state =\n    { pre: '', maps: mapValues({ ...maps, buffersMax: 1, packed: 0 }) };\n\n  // Uses the first pass by default.\n  macroSamples(state); // =>\n  '#define useSamples'+cr+\n    'const int samples_l = 1;'+cr+\n    'const ivec2 samples_0 = ivec2(0, 2);\\n'+\n  '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n    'use name (e.g: `samples_0`) if possible.\\n'+\n  '#define samples_i(i) samples_0\\n'+\n  '\\n'+\n  '#define useReads_0'+cr+\n    'const int reads_0_l = 1;'+cr+\n    'const int reads_0_0 = int(0);\\n'+\n  '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n    'use name (e.g: `reads_0_0`) if possible.\\n'+\n  '#define reads_0_i(i) reads_0_0\\n'+\n  '\\n';\n\n  // Next pass in this step - no derives, no samples nor reads.\n  state.passNow = 1;\n  macroSamples(state); // =>\n  '';\n\n  // Next pass in this step.\n  ++state.passNow;\n  macroSamples(state); // =>\n  '#define useSamples'+cr+\n    'const int samples_l = 4;'+cr+\n    'const ivec2 samples_0 = ivec2(1, 0);'+cr+\n    'const ivec2 samples_1 = ivec2(0, 0);'+cr+\n    'const ivec2 samples_2 = ivec2(0, 1);'+cr+\n    'const ivec2 samples_3 = ivec2(0, 2);\\n'+\n  '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n    'use name (e.g: `samples_0`) if possible.\\n'+\n  '#define samples_i(i) ((i == 3)? samples_3 : ((i == 2)? samples_2 '+\n    ': ((i == 1)? samples_1 : samples_0)))\\n'+\n  '\\n'+\n  '#define useReads_2'+cr+\n    'const int reads_2_l = 4;'+cr+\n    'const int reads_2_0 = int(0);'+cr+\n    'const int reads_2_1 = int(1);'+cr+\n    'const int reads_2_2 = int(2);'+cr+\n    'const int reads_2_3 = int(3);\\n'+\n  '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n    'use name (e.g: `reads_2_0`) if possible.\\n'+\n  '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n    ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n  '\\n';\n\n  // Automatically packed values - values across fewer textures/passes.\n  // Can bind more texture outputs per pass - values across fewer passes.\n  // Also fewer samples where values share derives or textures.\n  state.maps = mapGroups({ ...maps, buffersMax: 4 });\n  state.passNow = 0;\n  macroSamples(state); // =>\n  '#define useSamples'+cr+\n    'const int samples_l = 3;'+cr+\n    'const ivec2 samples_0 = ivec2(0, 1);'+cr+\n    'const ivec2 samples_1 = ivec2(1, 1);'+cr+\n    'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n  '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n    'use name (e.g: `samples_0`) if possible.\\n'+\n  '#define samples_i(i) '+\n    '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n  '\\n'+\n  '#define useReads_0'+cr+\n    'const int reads_0_l = 1;'+cr+\n    'const int reads_0_0 = int(0);\\n'+\n  '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n    'use name (e.g: `reads_0_0`) if possible.\\n'+\n  '#define reads_0_i(i) reads_0_0\\n'+\n  '\\n'+\n  '#define useReads_2'+cr+\n    'const int reads_2_l = 4;'+cr+\n    'const int reads_2_0 = int(1);'+cr+\n    'const int reads_2_1 = int(0);'+cr+\n    'const int reads_2_2 = int(2);'+cr+\n    'const int reads_2_3 = int(0);\\n'+\n  '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n    'use name (e.g: `reads_2_0`) if possible.\\n'+\n  '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n    ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n  '\\n';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " preprocessor macros defining the mappings for\n  samples and reads, for each value."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 364,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Properties used to generate the macros. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 365,
									"name": "on",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Any further macro "
											},
											{
												"kind": "code",
												"text": "`hooks`"
											},
											{
												"kind": "text",
												"text": " specifier; if given, both the\n  hook key and this specifier are checked (e.g: "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`key_on`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 366,
					"name": "macroTaps",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 769,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 367,
							"name": "macroTaps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Defines the samples of textures per-pass, as "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " preprocessor macros.\n\nThe macros define the minimal sampling of textures for the data the active\npass's values derive from; creates a "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " list containing the samples; the\n"
									},
									{
										"kind": "code",
										"text": "`samples`"
									},
									{
										"kind": "text",
										"text": " list variable names are required as created by "
									},
									{
										"kind": "code",
										"text": "`macroSamples`"
									},
									{
										"kind": "text",
										"text": ".\n\nHandles sampling states in a flat array of textures, or merged in one texture\n(in both "
									},
									{
										"kind": "code",
										"text": "`sampler2D`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`sampler3D`"
									},
									{
										"kind": "text",
										"text": "/"
									},
									{
										"kind": "code",
										"text": "`sampler2DArray`"
									},
									{
										"kind": "text",
										"text": " where supported).\nMerging allows shaders to access past steps by non-constant lookups; e.g:\nattributes cause "
									},
									{
										"kind": "code",
										"text": "`sampler array index must be a literal expression`"
									},
									{
										"kind": "text",
										"text": " on\n"
									},
									{
										"kind": "code",
										"text": "`GLSL3`"
									},
									{
										"kind": "text",
										"text": " spec and other platforms (e.g: "
									},
									{
										"kind": "code",
										"text": "`D3D`"
									},
									{
										"kind": "text",
										"text": "); note these need texture repeat\nwrapping.\n\nThey're set up as function-like macros that may be called from the shader to\ninitialise the mappings arrays with a given name.\nCaches the result if "
									},
									{
										"kind": "code",
										"text": "`macros`"
									},
									{
										"kind": "text",
										"text": " generation is enabled, to help reuse shaders."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "text",
												"text": "["
											},
											{
												"kind": "code",
												"text": "`sampler array index must be a literal expression`"
											},
											{
												"kind": "text",
												"text": "](https://stackoverflow.com/a/60110986/716898)"
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "text",
												"text": "["
											},
											{
												"kind": "code",
												"text": "`sampler2DArray`"
											},
											{
												"kind": "text",
												"text": "](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_2d_array.html)"
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "text",
												"text": "["
											},
											{
												"kind": "code",
												"text": "`sampler3D`"
											},
											{
												"kind": "text",
												"text": "](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html)"
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroSamples",
												"target": 362
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "hasMacros",
												"target": 348
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getGLSLList",
												"target": 409
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapValues",
												"target": 80
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getUniforms",
												"target": 209
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  const values = [2, 4, 1];\n  const derives = [2, , [[1, 0], true]];\n  const maps = { values, derives, channelsMax: 4 };\n\n  // No optimisations - values not packed, single texture output per pass.\n  const state =\n    { pre: '', maps: mapValues({ ...maps, buffersMax: 1, packed: 0 }) };\n\n  // Uses the first pass by default.\n  macroTaps(state); // =>\n  '@todo';\n\n  // Next pass in this step - no derives, no samples nor reads.\n  state.passNow = 1;\n  macroTaps(state); // =>\n  '';\n\n  // Next pass in this step.\n  ++state.passNow;\n  macroTaps(state); // =>\n  '@todo';\n\n  // Automatically packed values - values across fewer textures/passes.\n  // Can bind more texture outputs per pass - values across fewer passes.\n  // Also fewer samples where values share derives or textures.\n  state.maps = mapGroups({ ...maps, buffersMax: 4 });\n  state.passNow = 0;\n  macroTaps(state); // =>\n  '@todo';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " preprocessor macros defining the minimal\n  sampling of textures, to suit how states are stored (array of textures, or\n  all merged into one texture) and supported "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " language features."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 368,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Properties used to generate the macros. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 369,
									"name": "on",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Any further macro "
											},
											{
												"kind": "code",
												"text": "`hooks`"
											},
											{
												"kind": "text",
												"text": " specifier; if given, both\n  the hook key and this specifier are checked (e.g: "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`key_on`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 354,
					"name": "macroValues",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 393,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 355,
							"name": "macroValues",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Defines the values within textures per-step, as "
									},
									{
										"kind": "code",
										"text": "`GLSL`"
									},
									{
										"kind": "text",
										"text": " preprocessor macros.\n\nThese macros define mappings from values to their textures and channels.\nCaches the result if "
									},
									{
										"kind": "code",
										"text": "`macros`"
									},
									{
										"kind": "text",
										"text": " generation is enabled, to help reuse shaders."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "hasMacros",
												"target": 348
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  const maps = { values: [2, 4, 1], channelsMax: 4 };\n\n  // No optimisations - values not packed, single texture output per pass.\n  const state = {\n    pre: '', steps: 2, maps: mapGroups({ ...maps, buffersMax: 1, packed: 0 })\n  };\n\n  macroValues(state); // =>\n  '#define texture_0 0\\n'+\n  '#define channels_0 rg\\n'+\n  '\\n'+\n  '#define texture_1 1\\n'+\n  '#define channels_1 rgba\\n'+\n  '\\n'+\n  '#define texture_2 2\\n'+\n  '#define channels_2 r\\n'+\n  '\\n'+\n  '#define textures 3\\n'+\n  '#define passes 3\\n'+\n  '#define stepsPast 1\\n'+\n  '#define steps 2\\n'+\n  '\\n';\n\n  // Automatically packed values - values across fewer textures/passes.\n  state.maps = mapGroups({ ...maps, buffersMax: 1 });\n  state.size = { count: 2**5 };\n  macroValues(state); // =>\n  '#define texture_1 0\\n'+\n  '#define channels_1 rgba\\n'+\n  '\\n'+\n  '#define texture_0 1\\n'+\n  '#define channels_0 rg\\n'+\n  '\\n'+\n  '#define texture_2 1\\n'+\n  '#define channels_2 b\\n'+\n  '\\n'+\n  '#define count 32\\n'+\n  '#define textures 2\\n'+\n  '#define passes 2\\n'+\n  '#define stepsPast 1\\n'+\n  '#define steps 2\\n'+\n  '\\n';\n\n  // Can bind more texture outputs per pass - values across fewer passes.\n  state.maps = mapGroups({ ...maps, buffersMax: 4 });\n  macroValues(state); // =>\n  '#define texture_1 0\\n'+\n  '#define channels_1 rgba\\n'+\n  '\\n'+\n  '#define texture_0 1\\n'+\n  '#define channels_0 rg\\n'+\n  '\\n'+\n  '#define texture_2 1\\n'+\n  '#define channels_2 b\\n'+\n  '\\n'+\n  '#define count 32\\n'+\n  '#define textures 2\\n'+\n  '#define passes 1\\n'+\n  '#define stepsPast 1\\n'+\n  '#define steps 2\\n'+\n  '\\n';\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": " preprocessor macros defining the mappings from\n  values to textures/channels."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 356,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Properties used to generate the macros. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 357,
									"name": "on",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Any further macro "
											},
											{
												"kind": "code",
												"text": "`hooks`"
											},
											{
												"kind": "text",
												"text": " specifier; if given, both\n  the hook key and this specifier are checked (e.g: "
											},
											{
												"kind": "code",
												"text": "`key`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`key_on`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 371,
					"name": "rgba",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The channels denoted for texture input/output."
							}
						]
					},
					"sources": [
						{
							"fileName": "macros.js",
							"line": 28,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": "rgba"
					},
					"defaultValue": "'rgba'"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"children": [
						372,
						370,
						374,
						371
					]
				},
				{
					"title": "References",
					"children": [
						421
					]
				},
				{
					"title": "Functions",
					"children": [
						395,
						388,
						402,
						409,
						381,
						348,
						358,
						417,
						362,
						366,
						354
					]
				}
			],
			"sources": [
				{
					"fileName": "macros.js",
					"line": 19,
					"character": 0
				}
			]
		},
		{
			"id": 52,
			"name": "maps",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The "
					},
					{
						"kind": "code",
						"text": "`gpgpu`"
					},
					{
						"kind": "text",
						"text": " mappings for step/draw shaders input/output.\n\nThese maps show shaders how to make use of a system's supported features, how\nto pack/unpack their data from "
					},
					{
						"kind": "code",
						"text": "`framebuffer`"
					},
					{
						"kind": "text",
						"text": "s/"
					},
					{
						"kind": "code",
						"text": "`texture`"
					},
					{
						"kind": "text",
						"text": "s, perform minimal\nneeded samples to retrieve any past values they must derive from, etc.\n\nShaders may declare values they output, values they derive from, groupings of\nin/dependent values - without handling how these concerns map to the\nparticular system resources they're using.\n\nSystem limits/features/extensions are accounted for, to produce the most\nefficient mappings available with the least I/O when it comes to drawing\n(draw passes, texture samples, etc)."
					}
				],
				"blockTags": [
					{
						"tag": "@todo",
						"content": [
							{
								"kind": "text",
								"text": "Allow passes within/across textures; separate data and texture shapes."
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 73,
					"name": "cache",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Cache for optimisation."
							}
						]
					},
					"sources": [
						{
							"fileName": "maps.js",
							"line": 31,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 74,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 75,
									"name": "packed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "maps.js",
											"line": 31,
											"character": 23
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"defaultValue": "[]"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										75
									]
								}
							],
							"sources": [
								{
									"fileName": "maps.js",
									"line": 31,
									"character": 21
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 84,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "maps.js",
							"line": 458,
							"character": 0
						}
					],
					"target": 80
				},
				{
					"id": 58,
					"name": "mapGroups",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "maps.js",
							"line": 230,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 59,
							"name": "mapGroups",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Groups the "
									},
									{
										"kind": "code",
										"text": "`values`"
									},
									{
										"kind": "text",
										"text": " of "
									},
									{
										"kind": "code",
										"text": "`gpgpu`"
									},
									{
										"kind": "text",
										"text": " data across draw passes and data textures."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "packValues",
												"target": 53
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  const x = 2;\n  const y = 4;\n  const z = 1;\n  const maps = { values: [x, y, z], channelsMax: 4 };\n\n  // No optimisations - values not packed, single texture output per pass.\n  mapGroups({ ...maps, buffersMax: 1, packed: false }); // =>\n  {\n    ...maps, packed: false,\n    textures: [[0], [1], [2]], // length === 3\n    passes: [[0], [1], [2]], // length === 3\n    valueToTexture: [0, 1, 2], valueToPass: [0, 1, 2],\n    textureToPass: [0, 1, 2]\n  };\n\n  // Automatically packed values - values across fewer textures/passes.\n  mapGroups({ ...maps, buffersMax: 1 }); // =>\n  {\n    ...maps, packed: [1, 0, 2],\n    textures: [[1], [0, 2]], // length === 2\n    passes: [[0], [1]], // length === 2\n    valueToTexture: [1, 0, 1], valueToPass: [1, 0, 1],\n    textureToPass: [0, 1]\n  };\n\n  // Can bind more texture outputs per pass - values across fewer passes.\n  mapGroups({ ...maps, buffersMax: 4 }); // =>\n  {\n    ...maps, packed: [1, 0, 2],\n    textures: [[1], [0, 2]], // length === 2\n    passes: [[0, 1]], // length === 1\n    valueToTexture: [1, 0, 1], valueToPass: [0, 0, 0],\n    textureToPass: [0, 0]\n  };\n\n  // Custom packed values - fuller control.\n  mapGroups({ ...maps, buffersMax: 4, packed: [0, 2, 1] }); // =>\n  {\n    ...maps, packed: [0, 2, 1],\n    textures: [[0, 2], [1]], // length === 2\n    passes: [[0, 1]], // length === 1\n    valueToTexture: [0, 1, 0], valueToPass: [0, 0, 0],\n    textureToPass: [0, 0]\n  };\n\n  // Merge dependent values - fuller control, but no map for merged values.\n  mapGroups({ ...maps, values: [x+z, y], buffersMax: 4 }); // =>\n  {\n    ...maps, packed: [1, 0],\n    textures: [[1], [0]], // length === 2\n    passes: [[0, 1]], // length === 1\n    valueToTexture: [1, 0], valueToPass: [0, 0],\n    textureToPass: [0, 0]\n  };\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " The given "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": "; how "
											},
											{
												"kind": "code",
												"text": "`values`"
											},
											{
												"kind": "text",
												"text": " are grouped\n  per-texture per-pass per-step, meta information, and given parameters."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.passes`"
											},
											{
												"kind": "text",
												"text": " Textures grouped into passes,\n  as "
											},
											{
												"kind": "code",
												"text": "`arrays`"
											},
											{
												"kind": "text",
												"text": " corresponding to "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s in separate draw passes; whose\n  values are indexes into "
											},
											{
												"kind": "code",
												"text": "`to.textures`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.textures`"
											},
											{
												"kind": "text",
												"text": " Values grouped into\n  textures, as "
											},
											{
												"kind": "code",
												"text": "`array`"
											},
											{
												"kind": "text",
												"text": "s corresponding to "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": " attachments, into\n  which "
											},
											{
												"kind": "code",
												"text": "`values`"
											},
											{
												"kind": "text",
												"text": " are drawn; whose values are indexes into "
											},
											{
												"kind": "code",
												"text": "`to.values`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.values`"
											},
											{
												"kind": "text",
												"text": " The "
											},
											{
												"kind": "code",
												"text": "`values`"
											},
											{
												"kind": "text",
												"text": ", as given."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.buffersMax`"
											},
											{
												"kind": "text",
												"text": " The max textures per pass, as given."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.channelsMax`"
											},
											{
												"kind": "text",
												"text": " The max channels per-texture, as given."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.valueToTexture`"
											},
											{
												"kind": "text",
												"text": " Inverse map from each index of\n  "
											},
											{
												"kind": "code",
												"text": "`to.values`"
											},
											{
												"kind": "text",
												"text": " to the index of the data-texture containing it."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.valueToPass`"
											},
											{
												"kind": "text",
												"text": " Inverse map from each index of\n  "
											},
											{
												"kind": "code",
												"text": "`to.values`"
											},
											{
												"kind": "text",
												"text": " to the index of the pass containing it."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.textureToPass`"
											},
											{
												"kind": "text",
												"text": " Inverse map from each index of\n  "
											},
											{
												"kind": "code",
												"text": "`to.textures`"
											},
											{
												"kind": "text",
												"text": " to the index of the pass containing it."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 60,
									"name": "maps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Initial maps settings; new "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": " if not given."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 61,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 64,
													"name": "buffersMax",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Maximum textures bound per\n  pass."
															}
														]
													},
													"sources": [
														{
															"fileName": "maps.js",
															"line": 203,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 63,
													"name": "channelsMax",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Maximum channels per\n  texture."
															}
														]
													},
													"sources": [
														{
															"fileName": "maps.js",
															"line": 201,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 65,
													"name": "packed",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "An "
															},
															{
																"kind": "code",
																"text": "`array`"
															},
															{
																"kind": "text",
																"text": " of indexes into "
															},
															{
																"kind": "code",
																"text": "`values`"
															},
															{
																"kind": "text",
																"text": "\n  packed into an order that best fits into blocks of "
															},
															{
																"kind": "code",
																"text": "`channelsMax`"
															},
															{
																"kind": "text",
																"text": " to\n  minimise resources; or "
															},
															{
																"kind": "code",
																"text": "`false`"
															},
															{
																"kind": "text",
																"text": "y to use "
															},
															{
																"kind": "code",
																"text": "`values`"
															},
															{
																"kind": "text",
																"text": " in their given order; uses\n  "
															},
															{
																"kind": "code",
																"text": "`packValues`"
															},
															{
																"kind": "text",
																"text": " if not given."
															}
														]
													},
													"sources": [
														{
															"fileName": "maps.js",
															"line": 205,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															}
														],
														"name": "array"
													}
												},
												{
													"id": 62,
													"name": "values",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "An "
															},
															{
																"kind": "code",
																"text": "`array`"
															},
															{
																"kind": "text",
																"text": " where each\n  "
															},
															{
																"kind": "code",
																"text": "`number`"
															},
															{
																"kind": "text",
																"text": " denotes how many value channels are grouped into one data-texture\n  in one draw pass (where any value map logic isn't handled here); each\n  separate number may be computed across one or more data-textures/passes.\n\n  Each value denotes the number of dependent channels to compute together;\n  separate values denote channels that are independent, and may be drawn in\n  the same or separate passes, depending on settings/support.\n\n  The order may affect the number of textures/passes needed; can maintain\n  order as-is, or use a more efficient "
															},
															{
																"kind": "code",
																"text": "`packed`"
															},
															{
																"kind": "text",
																"text": " order. See "
															},
															{
																"kind": "code",
																"text": "`packValues`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "maps.js",
															"line": 189,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															}
														],
														"name": "array"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														64,
														63,
														65,
														62
													]
												}
											],
											"sources": [
												{
													"fileName": "maps.js",
													"line": 189,
													"character": 3
												}
											]
										}
									},
									"defaultValue": "{}"
								},
								{
									"id": 66,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": " to contain the results; modifies "
											},
											{
												"kind": "code",
												"text": "`maps`"
											},
											{
												"kind": "text",
												"text": "\n  if not given."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "maps"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 67,
					"name": "mapSamples",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "maps.js",
							"line": 379,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 68,
							"name": "mapSamples",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Maps the minimal set of texture reads to derive the next state of values from\na past state of values they depend upon."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  const maps = mapGroups({\n    // See `mapGroups` examples for resulting maps.\n    values: [2, 4, 1], channelsMax: 4, buffersMax: 1, packed: false,\n    // Derived step/value indexes, per-value; sample entries include:\n    derives: [\n      // Single...\n      2,\n      // Empty...\n      ,\n      // Multiple...\n      [\n        // Defined step...\n        [1, 0],\n        // All values at any given level/step...\n        true\n      ]\n    ]\n  });\n\n  mapSamples(maps); // =>\n  {\n    ...maps,\n    // Minimum texture samples for values; nested per-pass, per-value.\n    // Deepest arrays are step/texture index pairs into `maps.textures`.\n    samples: [\n      [[0, 2]],\n      null,\n      [[1, 0], [0, 0], [0, 1], [0, 2]]\n    ],\n    // Value indexes into `to.samples`; nested per-pass, per-value.\n    // Map from a value index to data it needs in the minimal samples.\n    reads: [\n      [[0]],\n      null,\n      [null, null, [0, 1, 2, 3]]\n    ]\n  };\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " The given "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " object, with resulting maps added for\n  any given "
											},
											{
												"kind": "code",
												"text": "`maps.derives`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.samples]`"
											},
											{
												"kind": "text",
												"text": " Map of the minimum\n  set of indexes into "
											},
											{
												"kind": "code",
												"text": "`maps.textures`"
											},
											{
												"kind": "text",
												"text": " that need to be sampled per-pass,\n  to get all "
											},
											{
												"kind": "code",
												"text": "`derives`"
											},
											{
												"kind": "text",
												"text": " needed for each value of "
											},
											{
												"kind": "code",
												"text": "`maps.values`"
											},
											{
												"kind": "text",
												"text": " of each\n  pass of "
											},
											{
												"kind": "code",
												"text": "`maps.passes`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.reads]`"
											},
											{
												"kind": "text",
												"text": " Sparse map from\n  each value of "
											},
											{
												"kind": "code",
												"text": "`derives`"
											},
											{
												"kind": "text",
												"text": " to its step and texture indexes in "
											},
											{
												"kind": "code",
												"text": "`to.samples`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.derives]`"
											},
											{
												"kind": "text",
												"text": " How new values derive from past values, as given."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 69,
									"name": "maps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "How values are grouped per-"
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": " per-pass per-step.\n  See "
											},
											{
												"kind": "code",
												"text": "`mapGroups`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 70,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 71,
													"name": "derives",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "How any new values derive from past\n  values. If not given "
															},
															{
																"kind": "code",
																"text": "`false`"
															},
															{
																"kind": "text",
																"text": "y, this returns with no changes."
															}
														]
													},
													"sources": [
														{
															"fileName": "maps.js",
															"line": 336,
															"character": 3
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": true
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														71
													]
												}
											],
											"sources": [
												{
													"fileName": "maps.js",
													"line": 336,
													"character": 3
												}
											]
										}
									}
								},
								{
									"id": 72,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The object to store the result in; "
											},
											{
												"kind": "code",
												"text": "`maps`"
											},
											{
												"kind": "text",
												"text": " if not\n  given."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "maps"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 80,
					"name": "mapValues",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "maps.js",
							"line": 455,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 81,
							"name": "mapValues",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Full maps, creates mappings for grouping given values and for minimal samples\nand reads (if new values derive from past ones)."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapSamples",
												"target": 67
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " The given "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " object; how "
											},
											{
												"kind": "code",
												"text": "`values`"
											},
											{
												"kind": "text",
												"text": " are grouped\n  per-"
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": " per-pass per-step, meta information, and given parameters;\n  and minimal samples and reads for any given "
											},
											{
												"kind": "code",
												"text": "`maps.derives`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 82,
									"name": "maps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input value maps and settings."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 83,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": " to contain the results; modifies "
											},
											{
												"kind": "code",
												"text": "`maps`"
											},
											{
												"kind": "text",
												"text": "\n  if not given."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "maps"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 53,
					"name": "packValues",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "maps.js",
							"line": 79,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 54,
							"name": "packValues",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Minimise resource usage, order "
									},
									{
										"kind": "code",
										"text": "`values`"
									},
									{
										"kind": "text",
										"text": " to pack into blocks of "
									},
									{
										"kind": "code",
										"text": "`channelsMax`"
									},
									{
										"kind": "text",
										"text": ";\ninterpreted as indexes into the given "
									},
									{
										"kind": "code",
										"text": "`values`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  packValues([1, 2, 3], 4, []); // =>\n  [2, 0, 1];\n\n  packValues([3, 2, 1], 4, []); // =>\n  [0, 2, 1];\n\n  packValues([4, 3, 2], 4, []); // =>\n  [0, 1, 2];\n\n  packValues([1, 1, 4, 2], 4, []); // =>\n  [2, 3, 0, 1];\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " The indexes of the given "
											},
											{
												"kind": "code",
												"text": "`values`"
											},
											{
												"kind": "text",
												"text": ", reordered\n  to pack into the fewest buckets of "
											},
											{
												"kind": "code",
												"text": "`channelsMax`"
											},
											{
												"kind": "text",
												"text": " size or less; stored in\n  the given "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " array."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 55,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Each entry is how many interdependent channels\n  are grouped into one texture in one pass, separate entries may be across\n  one or more textures/passes. See "
											},
											{
												"kind": "code",
												"text": "`mapGroups`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										],
										"name": "array"
									}
								},
								{
									"id": 56,
									"name": "channelsMax",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The maximum number of channels\n  per texture. See "
											},
											{
												"kind": "code",
												"text": "`mapGroups`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "channelsMaxDef"
								},
								{
									"id": 57,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An array to store the result; a new array by default."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"defaultValue": "[]"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "array"
							}
						}
					]
				},
				{
					"id": 76,
					"name": "validValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "maps.js",
							"line": 42,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 77,
							"name": "validValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determines whether a given value is valid and can be stored within the\nchannels available."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the given "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is valid."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 78,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A value to validate."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 79,
									"name": "channelsMax",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The maximum channels available to store values."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "channelsMaxDef"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"children": [
						73
					]
				},
				{
					"title": "References",
					"children": [
						84
					]
				},
				{
					"title": "Functions",
					"children": [
						58,
						67,
						80,
						53,
						76
					]
				}
			],
			"sources": [
				{
					"fileName": "maps.js",
					"line": 22,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "size",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 24,
					"name": "countDrawIndexes",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "size.js",
							"line": 83,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "countDrawIndexes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gives the number of indexes to draw a full state, for various parameters.\nEffectively equivalent to "
									},
									{
										"kind": "code",
										"text": "`gl_VertexID`"
									},
									{
										"kind": "text",
										"text": " in "
									},
									{
										"kind": "code",
										"text": "`WebGL2`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getWidth",
												"target": 2
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getHeight",
												"target": 13
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The number of indexes needed to draw a full state; each\n  entry of a data-texture (its area, equivalent to "
											},
											{
												"kind": "code",
												"text": "`state.size.count`"
											},
											{
												"kind": "text",
												"text": ")."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 26,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Size "
											},
											{
												"kind": "code",
												"text": "`number`"
											},
											{
												"kind": "text",
												"text": " of data resources, or an "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": "\n  containing it; width if "
											},
											{
												"kind": "code",
												"text": "`height`"
											},
											{
												"kind": "text",
												"text": " is given as a second parameter.\n  See "
											},
											{
												"kind": "code",
												"text": "`getWidth`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`getHeight`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 27,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 28,
													"name": "count",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The "
															},
															{
																"kind": "code",
																"text": "`number`"
															},
															{
																"kind": "text",
																"text": " of entries of data resources."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 76,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														28
													]
												}
											],
											"sources": [
												{
													"fileName": "size.js",
													"line": 76,
													"character": 3
												}
											]
										}
									},
									"defaultValue": "1"
								},
								{
									"id": 29,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Height "
											},
											{
												"kind": "code",
												"text": "`number`"
											},
											{
												"kind": "text",
												"text": " of data resources, or an "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": "\n  containing it."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 30,
					"name": "getDrawIndexes",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "size.js",
							"line": 95,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 31,
							"name": "getDrawIndexes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gives the array of indexes needed to draw a full state."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An array of indexes for drawing all data-texture\n  entries, numbered "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": " to "
											},
											{
												"kind": "code",
												"text": "`size-1`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 32,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`number`"
											},
											{
												"kind": "text",
												"text": " of entries in each data-texture; or an\n  "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": " of size/type of data resources."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "array"
							}
						}
					]
				},
				{
					"id": 13,
					"name": "getHeight",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "size.js",
							"line": 57,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 14,
							"name": "getHeight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the given height, for various properties in order of precedence."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The height as given in one of the expected properties, or\n  any given "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " number, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "ish if no height could be resolved."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 15,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Size (height) "
											},
											{
												"kind": "code",
												"text": "`number`"
											},
											{
												"kind": "text",
												"text": ", or an "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": " containing it."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 16,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 18,
													"name": "h",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`height`"
															},
															{
																"kind": "text",
																"text": "; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 45,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 17,
													"name": "height",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Height; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 44,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 20,
													"name": "shape",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Shape (height) "
															},
															{
																"kind": "code",
																"text": "`number`"
															},
															{
																"kind": "text",
																"text": ", or an "
															},
															{
																"kind": "code",
																"text": "`object`"
															},
															{
																"kind": "text",
																"text": "\n  containing it; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 47,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 22,
													"name": "side",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Width and height; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 51,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 21,
													"name": "size",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Size (height) "
															},
															{
																"kind": "code",
																"text": "`number`"
															},
															{
																"kind": "text",
																"text": ", or an "
															},
															{
																"kind": "code",
																"text": "`object`"
															},
															{
																"kind": "text",
																"text": "\n  containing it; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 49,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 19,
													"name": "y",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`height`"
															},
															{
																"kind": "text",
																"text": "; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 46,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 23,
													"name": "ʼ1ʼ",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`height`"
															},
															{
																"kind": "text",
																"text": "; supersedes "
															},
															{
																"kind": "code",
																"text": "`value`"
															},
															{
																"kind": "text",
																"text": " itself."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 52,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														18,
														17,
														20,
														22,
														21,
														19,
														23
													]
												}
											],
											"sources": [
												{
													"fileName": "size.js",
													"line": 44,
													"character": 3
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 33,
					"name": "getScaled",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "size.js",
							"line": 105,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 34,
							"name": "getScaled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "2 raised to the given numeric power, or "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": " if not given."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "2 raised to the given numeric power, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " if not given."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 35,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The power to raise 2 to."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 2,
					"name": "getWidth",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "size.js",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "getWidth",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the given width, for various properties in order of precedence."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The width as given in one of the expected properties, or\n  any given "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " number, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "ish if no width could be resolved."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Size (width) "
											},
											{
												"kind": "code",
												"text": "`number`"
											},
											{
												"kind": "text",
												"text": ", or an "
											},
											{
												"kind": "code",
												"text": "`object`"
											},
											{
												"kind": "text",
												"text": " containing it."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 5,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 9,
													"name": "shape",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Shape (width) "
															},
															{
																"kind": "code",
																"text": "`number`"
															},
															{
																"kind": "text",
																"text": ", or an "
															},
															{
																"kind": "code",
																"text": "`object`"
															},
															{
																"kind": "text",
																"text": "\n  containing it; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 20,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 11,
													"name": "side",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Width and height; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 24,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 10,
													"name": "size",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Size (width) "
															},
															{
																"kind": "code",
																"text": "`number`"
															},
															{
																"kind": "text",
																"text": ", or an "
															},
															{
																"kind": "code",
																"text": "`object`"
															},
															{
																"kind": "text",
																"text": "\n  containing it; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 22,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 7,
													"name": "w",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`width`"
															},
															{
																"kind": "text",
																"text": "; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 18,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 6,
													"name": "width",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Width; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 17,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 8,
													"name": "x",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`width`"
															},
															{
																"kind": "text",
																"text": "; supersedes further aliases."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 19,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 12,
													"name": "ʼ0ʼ",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`width`"
															},
															{
																"kind": "text",
																"text": "; supersedes "
															},
															{
																"kind": "code",
																"text": "`value`"
															},
															{
																"kind": "text",
																"text": " itself."
															}
														]
													},
													"sources": [
														{
															"fileName": "size.js",
															"line": 25,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														9,
														11,
														10,
														7,
														6,
														8,
														12
													]
												}
											],
											"sources": [
												{
													"fileName": "size.js",
													"line": 17,
													"character": 3
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						24,
						30,
						13,
						33,
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "size.js",
					"line": 6,
					"character": 0
				}
			]
		},
		{
			"id": 109,
			"name": "state",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The "
					},
					{
						"kind": "code",
						"text": "`gpgpu`"
					},
					{
						"kind": "text",
						"text": " state and "
					},
					{
						"kind": "code",
						"text": "`GL`"
					},
					{
						"kind": "text",
						"text": " resources.\n\nHandles "
					},
					{
						"kind": "code",
						"text": "`framebuffer`"
					},
					{
						"kind": "text",
						"text": "s, "
					},
					{
						"kind": "code",
						"text": "`texture`"
					},
					{
						"kind": "text",
						"text": "s; and meta info."
					}
				],
				"blockTags": [
					{
						"tag": "@todo",
						"content": [
							{
								"kind": "text",
								"text": "Allow passes into or across textures; separate data and texture shapes."
							}
						]
					},
					{
						"tag": "@todo",
						"content": [
							{
								"kind": "text",
								"text": "In-place updates of complex resources and meta info."
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 177,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "state.js",
							"line": 580,
							"character": 0
						}
					],
					"target": 110
				},
				{
					"id": 169,
					"name": "framebuffer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "state.js",
							"line": 560,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 170,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "state.js",
									"line": 560,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 171,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function to create a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "; from a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " API.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n\n**Returns**\n- "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": " A "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": ", or an object serving that purpose."
											}
										]
									},
									"parameters": [
										{
											"id": 172,
											"name": "depth",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Any "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": " depth attachment, or a flag for\n  whether it should be created."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 173,
											"name": "stencil",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Any "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": " stencil attachment, or a flag for\n  whether it should be created."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 174,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The width of the "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 175,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The height of the "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 176,
											"name": "color",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": " attachments to use."
													}
												]
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 159,
														"name": "texture"
													}
												],
												"name": "array"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							]
						}
					}
				},
				{
					"id": 110,
					"name": "getState",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "state.js",
							"line": 344,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 111,
							"name": "getState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set up the "
									},
									{
										"kind": "code",
										"text": "`gpgpu`"
									},
									{
										"kind": "text",
										"text": " resources and meta info for a state of a number data."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```\n  const api = {\n    framebuffer: ({ depth, stencil, width, height, color }) => null,\n    texture: ({ type, min, mag, wrap, width, height, channels }) => null\n  };\n\n  // Example with `webgl_draw_buffers` extension support, for 4 buffers.\n  let maps = mapGroups({ values: [1, 2, 3], buffersMax: 4, packed: 0 });\n  let state = { steps: 2, side: 10, maps };\n\n  const s0 = getState(api, state, {}); // =>\n  {\n    ...state, passNow: undefined, stepNow: undefined,\n    size: {\n      steps: 2, passes: 2, textures: 4,\n      width: 10, height: 10, shape: [10, 10], count: 100\n    },\n    steps: [[s0.passes[0][0].framebuffer], [s0.passes[1][0].framebuffer]],\n    // This setup results in fewer passes, as more buffers can be bound.\n    passes: [\n      [\n        {\n          framebuffer: api.framebuffer(s0.passes[0][0]),\n          color: [s0.textures[0][0].texture, s0.textures[0][1].texture],\n          map: [0, 1], // maps.passes[0]\n          entry: 0, index: 0, step: 0,\n          depth: false, stencil: false, width: 10, height: 10\n        }\n      ],\n      [\n        {\n          framebuffer: api.framebuffer(s0.passes[1][0]),\n          color: [s0.textures[1][0].texture, s0.textures[1][1].texture],\n          map: [0, 1], // maps.passes[0]\n          entry: 1, index: 0, step: 1,\n          depth: false, stencil: false, width: 10, height: 10\n        }\n      ]\n    ],\n    textures: [\n      [\n        {\n          texture: api.texture(s0.textures[0][0]),\n          map: [0, 1], // maps.textures[0]\n          entry: 0, index: 0, step: 0, pass: 0,\n          type: 'float', width: 10, height: 10, channels: 4,\n          min: 'nearest', mag: 'nearest', wrap: 'clamp'\n        },\n        {\n          texture: api.texture(s0.textures[0][1]),\n          map: [2], // maps.textures[1]\n          entry: 1, index: 1, step: 0, pass: 0,\n          type: 'float', width: 10, height: 10, channels: 4,\n          min: 'nearest', mag: 'nearest', wrap: 'clamp'\n        }\n      ],\n      [\n        {\n          texture: api.texture(s0.textures[1][0]),\n          map: [0, 1], // maps.textures[0]\n          entry: 2, index: 0, step: 1, pass: 0,\n          type: 'float', width: 10, height: 10, channels: 4,\n          min: 'nearest', mag: 'nearest', wrap: 'clamp'\n        },\n        {\n          texture: api.texture(s0.textures[1][1]),\n          map: [2], // maps.textures[1]\n          entry: 3, index: 1, step: 1, pass: 0,\n          type: 'float', width: 10, height: 10, channels: 4,\n          min: 'nearest', mag: 'nearest', wrap: 'clamp'\n        }\n      ]\n    ]\n  };\n\n  // Example with no `webgl_draw_buffers` extension support, only 1 buffer.\n  maps = mapGroups({ values: [1, 2, 3], buffersMax: 1, packed: 0 });\n  state = { type: 'uint8', steps: 2, scale: 5, maps, stepNow: 1 };\n\n  const s1 = getState(api, state, {}); // =>\n  {\n    ...state, passNow: undefined, stepNow: 1,\n    size: {\n      steps: 2, passes: 4, textures: 4,\n      width: 32, height: 32, shape: [32, 32], count: 1024\n    },\n    steps: [\n      [s1.passes[0][0].framebuffer, s1.passes[0][1].framebuffer],\n      [s1.passes[1][0].framebuffer, s1.passes[1][1].framebuffer]\n    ],\n    // This setup results in more passes, as fewer buffers can be bound.\n    passes: [\n      [\n        {\n          framebuffer: api.framebuffer(s1.passes[0][0]),\n          color: [s1.textures[0][0].texture],\n          map: [0], // maps.passes[0]\n          entry: 0, index: 0, step: 0,\n          depth: false, stencil: false, width: 32, height: 32\n        },\n        {\n          framebuffer: api.framebuffer(s1.passes[0][1]),\n          color: [s1.textures[0][1].texture],\n          map: [1], // maps.passes[1]\n          entry: 1, index: 1, step: 0,\n          depth: false, stencil: false, width: 32, height: 32\n        }\n      ],\n      [\n        {\n          framebuffer: api.framebuffer(s1.passes[1][0]),\n          color: [s1.textures[1][0].texture],\n          map: [0], // maps.passes[0]\n          entry: 2, index: 0, step: 1,\n          depth: false, stencil: false, width: 32, height: 32\n        },\n        {\n          framebuffer: api.framebuffer(s1.passes[1][1]),\n          color: [s1.textures[1][1].texture],\n          map: [1], // maps.passes[1]\n          entry: 3, index: 1, step: 1,\n          depth: false, stencil: false, width: 32, height: 32\n        }\n      ]\n    ],\n    textures: [\n      [\n        {\n          texture: api.texture(s1.textures[0][0]),\n          map: [0, 1], // maps.textures[0]\n          entry: 0, index: 0, step: 0, pass: 0,\n          type: 'uint8', width: 32, height: 32, channels: 4,\n          min: 'nearest', mag: 'nearest', wrap: 'clamp'\n        },\n        {\n          texture: api.texture(s1.textures[0][1]),\n          map: [2], // maps.textures[1]\n          entry: 1, index: 1, step: 0, pass: 1,\n          type: 'uint8', width: 32, height: 32, channels: 4,\n          min: 'nearest', mag: 'nearest', wrap: 'clamp'\n        }\n      ],\n      [\n        {\n          texture: api.texture(s1.textures[1][0]),\n          map: [0, 1], // maps.textures[0]\n          entry: 2, index: 0, step: 1, pass: 0,\n          type: 'uint8', width: 32, height: 32, channels: 4,\n          min: 'nearest', mag: 'nearest', wrap: 'clamp'\n        },\n        {\n          texture: api.texture(s1.textures[1][1]),\n          map: [2], // maps.textures[1]\n          entry: 3, index: 1, step: 1, pass: 1,\n          type: 'uint8', width: 32, height: 32, channels: 4,\n          min: 'nearest', mag: 'nearest', wrap: 'clamp'\n        }\n      ]\n    ]\n  };\n```"
											}
										]
									},
									{
										"tag": "@todo",
										"content": [
											{
												"kind": "text",
												"text": "Example using "
											},
											{
												"kind": "code",
												"text": "`merge`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "texture",
												"target": 159
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "framebuffer",
												"target": 169
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapSamples",
												"target": 67
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroSamples",
												"target": 362
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroTaps",
												"target": 366
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroPass",
												"target": 417
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getWidth",
												"target": 2
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getHeight",
												"target": 13
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getScaled",
												"target": 33
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "text",
												"text": "["
											},
											{
												"kind": "code",
												"text": "`sampler array index must be a literal expression`"
											},
											{
												"kind": "text",
												"text": "](https://stackoverflow.com/a/60110986/716898)"
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "text",
												"text": "["
											},
											{
												"kind": "code",
												"text": "`sampler2DArray`"
											},
											{
												"kind": "text",
												"text": "](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_2d_array.html)"
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "text",
												"text": "["
											},
											{
												"kind": "code",
												"text": "`sampler3D`"
											},
											{
												"kind": "text",
												"text": "](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html)"
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " The state object, set up with the data resources and\n  meta information, for use with "
											},
											{
												"kind": "code",
												"text": "`getStep`"
											},
											{
												"kind": "text",
												"text": " and drawing:"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.maps`"
											},
											{
												"kind": "text",
												"text": " Any given\n  "
											},
											{
												"kind": "code",
												"text": "`state.maps`"
											},
											{
												"kind": "text",
												"text": ". See "
											},
											{
												"kind": "code",
												"text": "`mapGroups`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.textures`"
											},
											{
												"kind": "text",
												"text": " The "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "s per-step, as "
											},
											{
												"kind": "code",
												"text": "`array`"
											},
											{
												"kind": "text",
												"text": "s of objects of "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "s\n  and meta info. See "
											},
											{
												"kind": "code",
												"text": "`to.maps.textures`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.passes`"
											},
											{
												"kind": "text",
												"text": " Passes per step, as "
											},
											{
												"kind": "code",
												"text": "`array`"
											},
											{
												"kind": "text",
												"text": "s of objects of "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s,\n  referencing "
											},
											{
												"kind": "code",
												"text": "`to.textures`"
											},
											{
												"kind": "text",
												"text": ", and meta info. See "
											},
											{
												"kind": "code",
												"text": "`to.maps.passes`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.steps`"
											},
											{
												"kind": "text",
												"text": "\n  Hierarchy of steps of state, as an "
											},
											{
												"kind": "code",
												"text": "`array`"
											},
											{
												"kind": "text",
												"text": " of "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s from\n  "
											},
											{
												"kind": "code",
												"text": "`to.passes`"
											},
											{
												"kind": "text",
												"text": ", with "
											},
											{
												"kind": "code",
												"text": "`array`"
											},
											{
												"kind": "text",
												"text": "s of "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "s from "
											},
											{
												"kind": "code",
												"text": "`to.textures`"
											},
											{
												"kind": "text",
												"text": ", and meta\n  information; set up here, or the given "
											},
											{
												"kind": "code",
												"text": "`state.steps`"
											},
											{
												"kind": "text",
												"text": " if it's an "
											},
											{
												"kind": "code",
												"text": "`array`"
											},
											{
												"kind": "text",
												"text": ".\n  State data may be drawn into the "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s accordingly.\n  See "
											},
											{
												"kind": "code",
												"text": "`mapGroups`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`getStep`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.merge]`"
											},
											{
												"kind": "text",
												"text": " If merging, a given or new merged\n  "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": " and copier "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": ", with meta info. See "
											},
											{
												"kind": "code",
												"text": "`getStep`"
											},
											{
												"kind": "text",
												"text": " and\n  "
											},
											{
												"kind": "code",
												"text": "`macroTaps`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.merge.all]`"
											},
											{
												"kind": "text",
												"text": " Any given\n  "
											},
											{
												"kind": "code",
												"text": "`state.merge.all`"
											},
											{
												"kind": "text",
												"text": ", or newly-created merged "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": " and meta info."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.merge.next]`"
											},
											{
												"kind": "text",
												"text": " Any\n  given "
											},
											{
												"kind": "code",
												"text": "`state.merge.next`"
											},
											{
												"kind": "text",
												"text": ", or newly-created "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": " and meta info; for\n  copying each pass's data into the "
											},
											{
												"kind": "code",
												"text": "`merge`"
											},
											{
												"kind": "text",
												"text": "d "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size`"
											},
											{
												"kind": "text",
												"text": " Size/type information of the created resources."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.type`"
											},
											{
												"kind": "text",
												"text": " Data type of "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s and "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "s."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.depth`"
											},
											{
												"kind": "text",
												"text": " Whether "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s attach depth."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.stencil`"
											},
											{
												"kind": "text",
												"text": " Whether "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s attach stencil."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.channelsMin`"
											},
											{
												"kind": "text",
												"text": " Minimum channels in any "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.steps`"
											},
											{
												"kind": "text",
												"text": " Number of "
											},
											{
												"kind": "code",
												"text": "`to.steps`"
											},
											{
												"kind": "text",
												"text": " in the main flow."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.passes`"
											},
											{
												"kind": "text",
												"text": " Number of "
											},
											{
												"kind": "code",
												"text": "`to.passes`"
											},
											{
												"kind": "text",
												"text": " in "
											},
											{
												"kind": "code",
												"text": "`to.steps`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.framebuffers`"
											},
											{
												"kind": "text",
												"text": " Number of "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s created."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.textures`"
											},
											{
												"kind": "text",
												"text": " Number of "
											},
											{
												"kind": "code",
												"text": "`to.textures`"
											},
											{
												"kind": "text",
												"text": " in "
											},
											{
												"kind": "code",
												"text": "`to.passes`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.colors`"
											},
											{
												"kind": "text",
												"text": " Number of "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "s created."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.width`"
											},
											{
												"kind": "text",
												"text": " Width of "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s and "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "s."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.height`"
											},
											{
												"kind": "text",
												"text": " Height of "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s and "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "s."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.shape`"
											},
											{
												"kind": "text",
												"text": " Shape of "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "s and\n  "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "s, as "
											},
											{
												"kind": "code",
												"text": "`[to.size.width, to.size.height]`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.size.count`"
											},
											{
												"kind": "text",
												"text": " Number of entries in each "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.size.merge]`"
											},
											{
												"kind": "text",
												"text": "\n  Any size/type information about any created or given "
											},
											{
												"kind": "code",
												"text": "`merge`"
											},
											{
												"kind": "text",
												"text": "d "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.stepNow`"
											},
											{
												"kind": "text",
												"text": " The currently active state step, as given."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.passNow`"
											},
											{
												"kind": "text",
												"text": " The currently active draw pass, as given."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 112,
									"name": "api",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The API for "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " resources."
											}
										]
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 113,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 115,
													"name": "framebuffer",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Function creating "
															},
															{
																"kind": "code",
																"text": "`GL`"
															},
															{
																"kind": "text",
																"text": " "
															},
															{
																"kind": "code",
																"text": "`framebuffer`"
															},
															{
																"kind": "text",
																"text": "s."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 211,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"id": 169,
														"name": "framebuffer"
													}
												},
												{
													"id": 114,
													"name": "texture",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Function creating "
															},
															{
																"kind": "code",
																"text": "`GL`"
															},
															{
																"kind": "text",
																"text": " "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "s."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 210,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"id": 159,
														"name": "texture"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														115,
														114
													]
												}
											],
											"sources": [
												{
													"fileName": "state.js",
													"line": 210,
													"character": 3
												}
											]
										}
									}
								},
								{
									"id": 116,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The state parameters."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 117,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 142,
													"name": "depth",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any "
															},
															{
																"kind": "code",
																"text": "`framebuffer`"
															},
															{
																"kind": "text",
																"text": " depth attachment, or\n  a flag for whether it should be created."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 251,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 123,
													"name": "h",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`state.height`"
															},
															{
																"kind": "text",
																"text": ". See "
															},
															{
																"kind": "code",
																"text": "`getHeight`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 222,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 122,
													"name": "height",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Data height, aliases follow in order\n  of precedence. See "
															},
															{
																"kind": "code",
																"text": "`getHeight`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 220,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 140,
													"name": "mag",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " magnification filter value."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 249,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 131,
													"name": "maps",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "How "
															},
															{
																"kind": "code",
																"text": "`state.maps.values`"
															},
															{
																"kind": "text",
																"text": " are grouped\n  per-"
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " per-pass per-step. See "
															},
															{
																"kind": "code",
																"text": "`mapGroups`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 234,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 132,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 134,
																	"name": "channelsMin",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 239,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 135,
																	"name": "textures",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 242,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 133,
																	"name": "values",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 236,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			}
																		],
																		"name": "array"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		134,
																		135,
																		133
																	]
																}
															],
															"sources": [
																{
																	"fileName": "state.js",
																	"line": 236,
																	"character": 3
																}
															]
														}
													}
												},
												{
													"id": 144,
													"name": "merge",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Whether to merge states into\n  one "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "; "
															},
															{
																"kind": "code",
																"text": "`true`"
															},
															{
																"kind": "text",
																"text": "y handles merging here, with any given properties used\n  as-is (the merged "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " already set up); "
															},
															{
																"kind": "code",
																"text": "`false`"
															},
															{
																"kind": "text",
																"text": "y uses un-merged\n  "
															},
															{
																"kind": "code",
																"text": "`array`"
															},
															{
																"kind": "text",
																"text": "s of "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "s.\n\n  Merging allows shaders to access past steps by non-constant lookups; e.g:\n  attributes cause "
															},
															{
																"kind": "code",
																"text": "`\"sampler array index must be a literal expression\"`"
															},
															{
																"kind": "text",
																"text": " on\n  "
															},
															{
																"kind": "code",
																"text": "`GLSL3`"
															},
															{
																"kind": "text",
																"text": " spec and some platforms (e.g: "
															},
															{
																"kind": "code",
																"text": "`D3D`"
															},
															{
																"kind": "text",
																"text": "); but takes more work to copy\n  the last pass's bound "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "/s to merge into the past "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": ", so\n  should be used to variably access past steps or avoid limits of "
															},
															{
																"kind": "code",
																"text": "`array`"
															},
															{
																"kind": "text",
																"text": "s of\n  "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "s.\n  Only this merged past "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " and those bound in an active pass are\n  created, as upon each pass the output will be copied to the past "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": ",\n  and bound "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "s reused in the next pass.\n  If not merging, all state is as output by its pass in its own one of the\n  "
															},
															{
																"kind": "code",
																"text": "`array`"
															},
															{
																"kind": "text",
																"text": "s of "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "s.\n\n  The default merged "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " is laid out as "
															},
															{
																"kind": "code",
																"text": "`[texture, step]`"
															},
															{
																"kind": "text",
																"text": " on the\n  "
															},
															{
																"kind": "code",
																"text": "`[x, y]`"
															},
															{
																"kind": "text",
																"text": " axes, respectively; if other layouts are needed, the merge\n  "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " can be given here to be used as-is, and the merging/copying and\n  lookup logic in their respective hooks. See "
															},
															{
																"kind": "code",
																"text": "`getStep`"
															},
															{
																"kind": "text",
																"text": " and "
															},
															{
																"kind": "code",
																"text": "`macroTaps`"
															},
															{
																"kind": "text",
																"text": ".\n  If a merge "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " is given, size information is interpreted in a similar\n  way and precedence as it is from "
															},
															{
																"kind": "code",
																"text": "`state`"
															},
															{
																"kind": "text",
																"text": ". See "
															},
															{
																"kind": "code",
																"text": "`getWidth`"
															},
															{
																"kind": "text",
																"text": " and "
															},
															{
																"kind": "code",
																"text": "`getHeight`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 256,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 145,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 151,
																	"name": "h",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 287,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 150,
																	"name": "height",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 285,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 157,
																	"name": "scale",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 294,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 154,
																	"name": "shape",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 291,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 156,
																	"name": "side",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 293,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 155,
																	"name": "size",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 292,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 147,
																	"name": "w",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 282,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 146,
																	"name": "width",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 280,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 148,
																	"name": "x",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 283,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 152,
																	"name": "y",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 288,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 149,
																	"name": "ʼ0ʼ",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 284,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 153,
																	"name": "ʼ1ʼ",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "state.js",
																			"line": 290,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		151,
																		150,
																		157,
																		154,
																		156,
																		155,
																		147,
																		146,
																		148,
																		152,
																		149,
																		153
																	]
																}
															],
															"sources": [
																{
																	"fileName": "state.js",
																	"line": 280,
																	"character": 3
																}
															]
														}
													}
												},
												{
													"id": 139,
													"name": "min",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " minification filter value."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 248,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 137,
													"name": "passNow",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The currently active draw pass, if any."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 246,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 129,
													"name": "scale",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Data size of width/height as a square\n  power-of-two size, 2 raised to this power. See "
															},
															{
																"kind": "code",
																"text": "`getScaled`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 229,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 126,
													"name": "shape",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Data size. See "
															},
															{
																"kind": "code",
																"text": "`getWidth`"
															},
															{
																"kind": "text",
																"text": " and "
															},
															{
																"kind": "code",
																"text": "`getHeight`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 225,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 128,
													"name": "side",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Data size of width/height.\n  See "
															},
															{
																"kind": "code",
																"text": "`getWidth`"
															},
															{
																"kind": "text",
																"text": " and "
															},
															{
																"kind": "code",
																"text": "`getHeight`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 227,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 127,
													"name": "size",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Data size. See "
															},
															{
																"kind": "code",
																"text": "`getWidth`"
															},
															{
																"kind": "text",
																"text": " and "
															},
															{
																"kind": "code",
																"text": "`getHeight`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 226,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 143,
													"name": "stencil",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any "
															},
															{
																"kind": "code",
																"text": "`framebuffer`"
															},
															{
																"kind": "text",
																"text": " stencil\n  attachment, or a flag for whether it should be created."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 253,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 136,
													"name": "stepNow",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The currently active state step, if any."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 245,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 130,
													"name": "steps",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "How many steps of state to\n  track, or the list of states if already set up."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 232,
															"character": 3
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														]
													}
												},
												{
													"id": 138,
													"name": "type",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " data type value."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 247,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 119,
													"name": "w",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`state.width`"
															},
															{
																"kind": "text",
																"text": ". See "
															},
															{
																"kind": "code",
																"text": "`getWidth`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 216,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 118,
													"name": "width",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Data width, aliases follow in order\n  of precedence. See "
															},
															{
																"kind": "code",
																"text": "`getWidth`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 214,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 141,
													"name": "wrap",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " wrap mode value."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 250,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 120,
													"name": "x",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`state.width`"
															},
															{
																"kind": "text",
																"text": ". See "
															},
															{
																"kind": "code",
																"text": "`getWidth`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 217,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 124,
													"name": "y",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`state.height`"
															},
															{
																"kind": "text",
																"text": ". See "
															},
															{
																"kind": "code",
																"text": "`getHeight`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 223,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 121,
													"name": "ʼ0ʼ",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`state.width`"
															},
															{
																"kind": "text",
																"text": ". See "
															},
															{
																"kind": "code",
																"text": "`getWidth`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 218,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 125,
													"name": "ʼ1ʼ",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Alias of "
															},
															{
																"kind": "code",
																"text": "`state.height`"
															},
															{
																"kind": "text",
																"text": ". See "
															},
															{
																"kind": "code",
																"text": "`getHeight`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "state.js",
															"line": 224,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														142,
														123,
														122,
														140,
														131,
														144,
														139,
														137,
														129,
														126,
														128,
														127,
														143,
														136,
														130,
														138,
														119,
														118,
														141,
														120,
														124,
														121,
														125
													]
												}
											],
											"sources": [
												{
													"fileName": "state.js",
													"line": 214,
													"character": 3
												}
											]
										}
									},
									"defaultValue": "{}"
								},
								{
									"id": 158,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The state object to set up. Modifies the given\n  "
											},
											{
												"kind": "code",
												"text": "`state`"
											},
											{
												"kind": "text",
												"text": " object by default."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "state"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 159,
					"name": "texture",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "state.js",
							"line": 537,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 160,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "state.js",
									"line": 537,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 161,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function to create a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": "; from a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " API.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n\n**Returns**\n- "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": " A "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": ", or an object serving that purpose."
											}
										]
									},
									"parameters": [
										{
											"id": 162,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Any "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": " data type value."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 163,
											"name": "min",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Any "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": " minification filter value."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 164,
											"name": "mag",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Any "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": " magnification filter value."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 165,
											"name": "wrap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Any "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": " wrap mode value."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 166,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The width of the "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 167,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The height of the "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 168,
											"name": "channels",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The number of channels of the "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						177
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						169,
						159
					]
				},
				{
					"title": "Functions",
					"children": [
						110
					]
				}
			],
			"sources": [
				{
					"fileName": "state.js",
					"line": 13,
					"character": 0
				}
			]
		},
		{
			"id": 249,
			"name": "step",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The "
					},
					{
						"kind": "code",
						"text": "`gpgpu`"
					},
					{
						"kind": "text",
						"text": " update step.\n\nConnects inputs to the "
					},
					{
						"kind": "code",
						"text": "`GL`"
					},
					{
						"kind": "text",
						"text": " state and renders an update step."
					}
				]
			},
			"children": [
				{
					"id": 306,
					"name": "buffer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 270,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 307,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "step.js",
									"line": 270,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 308,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function to set up a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " buffer; from a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " API.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n\n**Returns**\n- "
											},
											{
												"kind": "code",
												"text": "`buffer`"
											},
											{
												"kind": "text",
												"text": " A "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " buffer to use for vertex attributes, or an\n  object serving that purpose.\n- "
											},
											{
												"kind": "code",
												"text": "`[buffer.count]`"
											},
											{
												"kind": "text",
												"text": " The buffer element/vertex count.\n- "
											},
											{
												"kind": "code",
												"text": "`[buffer.length]`"
											},
											{
												"kind": "text",
												"text": " The length of the buffer data "
											},
											{
												"kind": "code",
												"text": "`array`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"parameters": [
										{
											"id": 309,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Buffer data."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															}
														],
														"name": "array"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															}
														],
														"name": "object"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							]
						}
					}
				},
				{
					"id": 286,
					"name": "cache",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "step.js",
							"line": 19,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 287,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 288,
									"name": "clearPass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "step.js",
											"line": 20,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 289,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 290,
													"name": "color",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "step.js",
															"line": 20,
															"character": 15
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													},
													"defaultValue": "..."
												},
												{
													"id": 291,
													"name": "depth",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "step.js",
															"line": 20,
															"character": 36
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													},
													"defaultValue": "1"
												},
												{
													"id": 292,
													"name": "stencil",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "step.js",
															"line": 20,
															"character": 46
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													},
													"defaultValue": "0"
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														290,
														291,
														292
													]
												}
											],
											"sources": [
												{
													"fileName": "step.js",
													"line": 20,
													"character": 13
												}
											]
										}
									},
									"defaultValue": "..."
								},
								{
									"id": 293,
									"name": "copyFrame",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "step.js",
											"line": 21,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 294,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 295,
													"name": "color",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "step.js",
															"line": 21,
															"character": 15
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													},
													"defaultValue": "null"
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														295
													]
												}
											],
											"sources": [
												{
													"fileName": "step.js",
													"line": 21,
													"character": 13
												}
											]
										}
									},
									"defaultValue": "..."
								},
								{
									"id": 296,
									"name": "copyImage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "step.js",
											"line": 21,
											"character": 30
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 297,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 298,
													"name": "copy",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "step.js",
															"line": 21,
															"character": 43
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "true"
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														298
													]
												}
											],
											"sources": [
												{
													"fileName": "step.js",
													"line": 21,
													"character": 41
												}
											]
										}
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										288,
										293,
										296
									]
								}
							],
							"sources": [
								{
									"fileName": "step.js",
									"line": 19,
									"character": 21
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 310,
					"name": "clear",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 290,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 311,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "step.js",
									"line": 290,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 312,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function to clear "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " output view or "
											},
											{
												"kind": "code",
												"text": "`framebuffer`"
											},
											{
												"kind": "text",
												"text": "; from a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " API.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "framebuffer",
												"target": 169
											}
										]
									},
									"parameters": [
										{
											"id": 313,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The values to clear with."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 314,
											"name": "color",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The values to clear any color buffers with."
													}
												]
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												],
												"name": "array"
											}
										},
										{
											"id": 315,
											"name": "depth",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The value to clear any depth buffer with."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 316,
											"name": "stencil",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The value to clear any stencil buffer with."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 317,
											"name": "framebuffer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Any "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": " to clear; if not given,\n  clears any active "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": " or the view."
													}
												]
											},
											"type": {
												"type": "reference",
												"name": "framebuffer"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 318,
					"name": "command",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 310,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 319,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "step.js",
									"line": 310,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 320,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function to create a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " render pass execution function, to be called later,\nwith options, for a render pass; from a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " API.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getUniforms",
												"target": 209
											},
											{
												"kind": "text",
												"text": "\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "framebuffer",
												"target": 169
											},
											{
												"kind": "text",
												"text": "\n\n**Returns**\n- Function to execute a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " render pass, with options, for a render pass."
											}
										]
									},
									"parameters": [
										{
											"id": 321,
											"name": "passCommand",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The properties from which to create the "
													},
													{
														"kind": "code",
														"text": "`GL`"
													},
													{
														"kind": "text",
														"text": "\n  render function for a given pass."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 322,
											"name": "passCommand.vert",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Function hook returning the vertex\n  shader "
													},
													{
														"kind": "code",
														"text": "`GLSL`"
													},
													{
														"kind": "text",
														"text": " string for the next render pass."
													}
												]
											},
											"type": {
												"type": "reference",
												"name": "function"
											}
										},
										{
											"id": 323,
											"name": "passCommand.frag",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Function hook returning the fragment\n  shader "
													},
													{
														"kind": "code",
														"text": "`GLSL`"
													},
													{
														"kind": "text",
														"text": " string for the next render pass."
													}
												]
											},
											"type": {
												"type": "reference",
												"name": "function"
											}
										},
										{
											"id": 324,
											"name": "passCommand.attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The vertex attributes for\n  the next render pass."
													}
												]
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 306,
														"name": "buffer"
													}
												],
												"name": "object"
											}
										},
										{
											"id": 325,
											"name": "passCommand.uniforms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The uniform hooks for the\n  given "
													},
													{
														"kind": "code",
														"text": "`props`"
													},
													{
														"kind": "text",
														"text": ". See "
													},
													{
														"kind": "code",
														"text": "`getUniforms`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "function"
													}
												],
												"name": "object"
											}
										},
										{
											"id": 326,
											"name": "passCommand.count",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The number of elements to draw."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 327,
											"name": "passCommand.depth",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An object describing the\n  depth settings for the next render pass; e.g: "
													},
													{
														"kind": "code",
														"text": "`passCommand.depth.enable`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 328,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "step.js",
																	"line": 333,
																	"character": 27
																}
															]
														}
													}
												],
												"name": "object"
											}
										},
										{
											"id": 329,
											"name": "passCommand.framebuffer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Function hook returning the\n  "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": " to draw to in the next render pass. See "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "reference",
												"name": "function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "function"
									}
								}
							]
						}
					}
				},
				{
					"id": 346,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 439,
							"character": 0
						}
					],
					"target": 257
				},
				{
					"id": 299,
					"name": "getPass",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 36,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 300,
							"name": "getPass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Convenience to get the currently active "
									},
									{
										"kind": "code",
										"text": "`framebuffer`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@see",
										"content": [
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The active step's active pass object, if any."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 301,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " state."
											}
										]
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 302,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 305,
													"name": "passNow",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The currently active draw pass, if any."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 32,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 303,
													"name": "passes",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Passes per step. See "
															},
															{
																"kind": "code",
																"text": "`getState`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 30,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															}
														],
														"name": "array"
													}
												},
												{
													"id": 304,
													"name": "stepNow",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The currently active state step, if any."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 31,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														305,
														303,
														304
													]
												}
											],
											"sources": [
												{
													"fileName": "step.js",
													"line": 30,
													"character": 3
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 257,
					"name": "getStep",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 170,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 258,
							"name": "getStep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`gpgpu`"
									},
									{
										"kind": "text",
										"text": " update step function, for use with a "
									},
									{
										"kind": "code",
										"text": "`gpgpu`"
									},
									{
										"kind": "text",
										"text": " state object."
									}
								],
								"blockTags": [
									{
										"tag": "@todo",
										"content": [
											{
												"kind": "text",
												"text": "Make this fully extensible in state."
											}
										]
									},
									{
										"tag": "@todo",
										"content": [
											{
												"kind": "text",
												"text": "Example"
											}
										]
									},
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "buffer",
												"target": 306
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "command",
												"target": 318
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "subimage",
												"target": 330
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "onStep",
												"target": 336
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "onPass",
												"target": 341
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getPass",
												"target": 299
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroPass",
												"target": 417
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getUniforms",
												"target": 209
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " The given "
											},
											{
												"kind": "code",
												"text": "`to`"
											},
											{
												"kind": "text",
												"text": " object; containing a "
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " update\n  step function and related properties, to be passed a "
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " state."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.vert`"
											},
											{
												"kind": "text",
												"text": " The given/new "
											},
											{
												"kind": "code",
												"text": "`state.vert`"
											},
											{
												"kind": "text",
												"text": " vertex shader "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.frag`"
											},
											{
												"kind": "text",
												"text": " The given "
											},
											{
												"kind": "code",
												"text": "`state.frag`"
											},
											{
												"kind": "text",
												"text": " fragment shader "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.verts]`"
											},
											{
												"kind": "text",
												"text": " Any cached pre-processed vertex shaders\n  "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": ", if "
											},
											{
												"kind": "code",
												"text": "`state.step.verts`"
											},
											{
												"kind": "text",
												"text": " was given."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`[to.frags]`"
											},
											{
												"kind": "text",
												"text": " Any cached pre-processed fragment\n  shaders "
											},
											{
												"kind": "code",
												"text": "`GLSL`"
											},
											{
												"kind": "text",
												"text": ", if "
											},
											{
												"kind": "code",
												"text": "`state.step.verts`"
											},
											{
												"kind": "text",
												"text": " was enabled."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.uniforms`"
											},
											{
												"kind": "text",
												"text": " The given "
											},
											{
												"kind": "code",
												"text": "`state.uniforms`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.count`"
											},
											{
												"kind": "text",
												"text": " The given/new "
											},
											{
												"kind": "code",
												"text": "`state.count`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.positions`"
											},
											{
												"kind": "text",
												"text": " The given/new "
											},
											{
												"kind": "code",
												"text": "`state.positions`"
											},
											{
												"kind": "text",
												"text": "; via\n  "
											},
											{
												"kind": "code",
												"text": "`api.buffer`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.pass`"
											},
											{
												"kind": "text",
												"text": " A "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " command function to draw a given pass;\n  via "
											},
											{
												"kind": "code",
												"text": "`api`"
											},
											{
												"kind": "text",
												"text": "/"
											},
											{
												"kind": "code",
												"text": "`api.command`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`to.run`"
											},
											{
												"kind": "text",
												"text": " The main step function, which performs all the\n  draw pass "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " commands for a given state step."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 259,
									"name": "api",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An API for "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " resources."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 260,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 261,
													"name": "buffer",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Function to set up a "
															},
															{
																"kind": "code",
																"text": "`GL`"
															},
															{
																"kind": "text",
																"text": " buffer."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 105,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"id": 306,
														"name": "buffer"
													}
												},
												{
													"id": 262,
													"name": "clear",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Function to clear "
															},
															{
																"kind": "code",
																"text": "`GL`"
															},
															{
																"kind": "text",
																"text": " view or "
															},
															{
																"kind": "code",
																"text": "`framebuffer`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 106,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"id": 310,
														"name": "clear"
													}
												},
												{
													"id": 263,
													"name": "command",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Function to create a "
															},
															{
																"kind": "code",
																"text": "`GL`"
															},
															{
																"kind": "text",
																"text": " render pass,\n  given options, to be called later with options; "
															},
															{
																"kind": "code",
																"text": "`api`"
															},
															{
																"kind": "text",
																"text": " if not given."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 107,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"id": 318,
														"name": "command"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														261,
														262,
														263
													]
												}
											],
											"sources": [
												{
													"fileName": "step.js",
													"line": 105,
													"character": 3
												}
											]
										}
									}
								},
								{
									"id": 264,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " state to use. See "
											},
											{
												"kind": "code",
												"text": "`getState`"
											},
											{
												"kind": "text",
												"text": " and\n  "
											},
											{
												"kind": "code",
												"text": "`mapGroups`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 265,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 266,
													"name": "maps",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "How values are grouped per-"
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " per-pass\n  per-step. See "
															},
															{
																"kind": "code",
																"text": "`mapGroups`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 111,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 268,
													"name": "merge",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Any merged state "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "; uses separate state\n  textures if not given."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 115,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 269,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 270,
																	"name": "texture",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 117,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 271,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 272,
																					"name": "subimage",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "step.js",
																							"line": 118,
																							"character": 3
																						}
																					],
																					"type": {
																						"type": "reference",
																						"id": 330,
																						"name": "subimage"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [
																						272
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "step.js",
																					"line": 118,
																					"character": 3
																				}
																			]
																		}
																	}
																},
																{
																	"id": 273,
																	"name": "update",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 120,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "Function",
																		"qualifiedName": "Function",
																		"package": "typescript"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		270,
																		273
																	]
																}
															],
															"sources": [
																{
																	"fileName": "step.js",
																	"line": 117,
																	"character": 3
																}
															]
														}
													}
												},
												{
													"id": 267,
													"name": "passes",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "How textures are grouped into\n  passes. See "
															},
															{
																"kind": "code",
																"text": "`mapGroups`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 113,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																],
																"name": "array"
															}
														],
														"name": "array"
													}
												},
												{
													"id": 274,
													"name": "pre",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The namespace prefix; "
															},
															{
																"kind": "code",
																"text": "`preDef`"
															},
															{
																"kind": "text",
																"text": " by default."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 129,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 275,
													"name": "step",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The properties for the step "
															},
															{
																"kind": "code",
																"text": "`GL`"
															},
															{
																"kind": "text",
																"text": " command."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 130,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 276,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 281,
																	"name": "count",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 138,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 278,
																	"name": "frag",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 133,
																			"character": 3
																		},
																		{
																			"fileName": "step.js",
																			"line": 145,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 284,
																	"name": "frags",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 146,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																},
																{
																	"id": 282,
																	"name": "passCommand",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 140,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 280,
																	"name": "positions",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 136,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 279,
																	"name": "uniforms",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 134,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 277,
																	"name": "vert",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 131,
																			"character": 3
																		},
																		{
																			"fileName": "step.js",
																			"line": 142,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 283,
																	"name": "verts",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "step.js",
																			"line": 143,
																			"character": 3
																		}
																	],
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		281,
																		278,
																		284,
																		282,
																		280,
																		279,
																		277,
																		283
																	]
																}
															],
															"sources": [
																{
																	"fileName": "step.js",
																	"line": 131,
																	"character": 3
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														266,
														268,
														267,
														274,
														275
													]
												}
											],
											"sources": [
												{
													"fileName": "step.js",
													"line": 111,
													"character": 3
												}
											]
										}
									}
								},
								{
									"id": 285,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 341,
					"name": "onPass",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 387,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 342,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "step.js",
									"line": 387,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 343,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Callback upon each pass.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n\n**Returns**\n- A "
											},
											{
												"kind": "code",
												"text": "`passProps`"
											},
											{
												"kind": "text",
												"text": " object to use for the render "
											},
											{
												"kind": "code",
												"text": "`command`"
											},
											{
												"kind": "text",
												"text": " call; or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "ish to\n  use the given "
											},
											{
												"kind": "code",
												"text": "`stepProps`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"parameters": [
										{
											"id": 344,
											"name": "stepProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The "
													},
													{
														"kind": "code",
														"text": "`props`"
													},
													{
														"kind": "text",
														"text": " passed to "
													},
													{
														"kind": "code",
														"text": "`run`"
													},
													{
														"kind": "text",
														"text": " via any "
													},
													{
														"kind": "code",
														"text": "`onStep`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 345,
											"name": "pass",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The maps for the next pass. See "
													},
													{
														"kind": "code",
														"text": "`mapGroups`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												],
												"name": "array"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							]
						}
					}
				},
				{
					"id": 336,
					"name": "onStep",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 365,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 337,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "step.js",
									"line": 365,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 338,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Callback upon each step.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "framebuffer",
												"target": 169
											},
											{
												"kind": "text",
												"text": "\n\n**Returns**\n- A "
											},
											{
												"kind": "code",
												"text": "`stepProps`"
											},
											{
												"kind": "text",
												"text": " object to use for each of the step's next passes; or\n  "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "ish to use the given "
											},
											{
												"kind": "code",
												"text": "`props`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"parameters": [
										{
											"id": 339,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The "
													},
													{
														"kind": "code",
														"text": "`props`"
													},
													{
														"kind": "text",
														"text": " passed to "
													},
													{
														"kind": "code",
														"text": "`run`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 340,
											"name": "step",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The "
													},
													{
														"kind": "code",
														"text": "`framebuffer`"
													},
													{
														"kind": "text",
														"text": "s for "
													},
													{
														"kind": "code",
														"text": "`props.stepNow`"
													},
													{
														"kind": "text",
														"text": " from\n  "
													},
													{
														"kind": "code",
														"text": "`props.steps`"
													},
													{
														"kind": "text",
														"text": ", where the next state step will be drawn. See "
													},
													{
														"kind": "code",
														"text": "`getState`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "framebuffer"
													}
												],
												"name": "array"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							]
						}
					}
				},
				{
					"id": 330,
					"name": "subimage",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 344,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 331,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "step.js",
									"line": 344,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 332,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function of a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": " "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": " to update part of it with new data; from a "
											},
											{
												"kind": "code",
												"text": "`GL`"
											},
											{
												"kind": "text",
												"text": "\nAPI.\n\n**See**\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getStep",
												"target": 257
											},
											{
												"kind": "text",
												"text": "\n- "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "texture",
												"target": 159
											},
											{
												"kind": "text",
												"text": "\n\n**Returns**\n- The calling "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": ", with part updated part to "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"parameters": [
										{
											"id": 333,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The data to update into part of the calling "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "reference",
												"name": "texture"
											}
										},
										{
											"id": 334,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Offset on the x-axis within the calling "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 335,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Offset on the y-axis within the calling "
													},
													{
														"kind": "code",
														"text": "`texture`"
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "texture"
									}
								}
							]
						}
					}
				},
				{
					"id": 250,
					"name": "updateMerge",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "step.js",
							"line": 66,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 251,
							"name": "updateMerge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Merged "
									},
									{
										"kind": "code",
										"text": "`texture`"
									},
									{
										"kind": "text",
										"text": " update, called upon each pass.\n\nCopies the active pass's output into the merged "
									},
									{
										"kind": "code",
										"text": "`texture`"
									},
									{
										"kind": "text",
										"text": ", from each of its\nattachments one by one (to support multiple draw buffers).\nMatches the lookup logic defined in "
									},
									{
										"kind": "code",
										"text": "`macroTaps`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@todo",
										"content": [
											{
												"kind": "text",
												"text": "Update docs."
											}
										]
									},
									{
										"tag": "@see",
										"content": [
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "text",
												"text": "[SO reading from multiple "
											},
											{
												"kind": "code",
												"text": "`framebuffers`"
											},
											{
												"kind": "text",
												"text": "](https://stackoverflow.com/a/34160982/716898)"
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getPass",
												"target": 299
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "texture",
												"target": 159
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "getState",
												"target": 110
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "mapGroups",
												"target": 58
											},
											{
												"kind": "text",
												"text": "\n"
											},
											{
												"kind": "text",
												"text": " - "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "macroTaps",
												"target": 366
											},
											{
												"kind": "text",
												"text": "\n"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The merged "
											},
											{
												"kind": "code",
												"text": "`texture`"
											},
											{
												"kind": "text",
												"text": ", updated by the active pass's output;\n  matches the lookup logic defined in "
											},
											{
												"kind": "code",
												"text": "`macroTaps`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 252,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A "
											},
											{
												"kind": "code",
												"text": "`gpgpu`"
											},
											{
												"kind": "text",
												"text": " state of the active pass."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 253,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 255,
													"name": "merge",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The merged "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": " to update."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 60,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 254,
													"name": "passes",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Passes per\n  step; the active one is found via "
															},
															{
																"kind": "code",
																"text": "`getPass`"
															},
															{
																"kind": "text",
																"text": ", with a "
															},
															{
																"kind": "code",
																"text": "`color`"
															},
															{
																"kind": "text",
																"text": " array of\n  "
															},
															{
																"kind": "code",
																"text": "`texture`"
															},
															{
																"kind": "text",
																"text": "s, and a "
															},
															{
																"kind": "code",
																"text": "`map`"
															},
															{
																"kind": "text",
																"text": " array of numbers showing how the textures are\n  grouped into the pass. See "
															},
															{
																"kind": "code",
																"text": "`getState`"
															},
															{
																"kind": "text",
																"text": " and "
															},
															{
																"kind": "code",
																"text": "`mapGroups`"
															},
															{
																"kind": "text",
																"text": "."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 56,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"name": "texture"
																			}
																		],
																		"name": "array"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			}
																		],
																		"name": "array"
																	}
																],
																"name": "object"
															}
														],
														"name": "array"
													}
												},
												{
													"id": 256,
													"name": "stepNow",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The currently active state step, if any."
															}
														]
													},
													"sources": [
														{
															"fileName": "step.js",
															"line": 61,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														255,
														254,
														256
													]
												}
											],
											"sources": [
												{
													"fileName": "step.js",
													"line": 56,
													"character": 3
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "texture"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						306,
						310,
						318,
						341,
						336,
						330
					]
				},
				{
					"title": "Variables",
					"children": [
						286
					]
				},
				{
					"title": "References",
					"children": [
						346
					]
				},
				{
					"title": "Functions",
					"children": [
						299,
						257,
						250
					]
				}
			],
			"sources": [
				{
					"fileName": "step.js",
					"line": 10,
					"character": 0
				}
			]
		},
		{
			"id": 36,
			"name": "util/remain-div.glsl",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`./remain-div.glsl`"
					},
					{
						"kind": "text",
						"text": " transformed via "
					},
					{
						"kind": "code",
						"text": "`glslify`"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 38,
					"name": "default",
					"kind": 8388608,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "util/remain-div.glsl.js",
							"line": 17,
							"character": 0
						}
					],
					"target": 37
				},
				{
					"id": 37,
					"name": "glsl",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"summary": [
							{
								"kind": "code",
								"text": "`./remain-div.glsl`"
							},
							{
								"kind": "text",
								"text": " transformed via "
							},
							{
								"kind": "code",
								"text": "`glslify`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "util/remain-div.glsl.js",
							"line": 15,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "transformed"
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						38
					]
				},
				{
					"title": "Variables",
					"children": [
						37
					],
					"categories": [
						{
							"title": "GLSL",
							"children": [
								37
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "util/remain-div.glsl.js",
					"line": 7,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				85,
				178,
				42,
				49,
				39,
				106,
				208,
				100,
				103,
				347,
				52,
				1,
				109,
				249,
				36
			],
			"categories": [
				{
					"title": "Main",
					"children": [
						85
					]
				},
				{
					"title": "GLSL",
					"children": [
						49,
						39,
						106,
						100,
						103,
						36
					]
				},
				{
					"title": "JS",
					"children": [
						85,
						178,
						42,
						208,
						347,
						52,
						1,
						109,
						249
					]
				}
			]
		}
	]
}