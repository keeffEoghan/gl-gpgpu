{"mappings":"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","sources":["demo/particles/index.js","node_modules/clamp/index.js","node_modules/@epok.tech/fn-time/dist/es/index.js","node_modules/@epok.tech/fn-lists/reduce.js","node_modules/@epok.tech/fn-lists/map.js","node_modules/@epok.tech/fn-lists/each.js","node_modules/@epok.tech/fn-lists/range.js","index.js","maps.js","const.js","node_modules/@epok.tech/gl-screen-triangle/dist/esm/index.js","index.vert.glsl","state.js","step.js","node_modules/@epok.tech/fn-lists/wrap-index.js","macros.js","node_modules/@epok.tech/is-type/type.js","inputs.js","node_modules/@thi.ng/vectors/setc.js","index-pairs/index.js","demo/particles/step.frag.glsl","demo/particles/draw.vert.glsl","demo/particles/draw.frag.glsl"],"sourcesContent":["/**\n * Demo implementation of 3D particle Verlet/Euler integration simulation.\n */\n\nimport getRegl from 'regl';\nimport clamp from 'clamp';\nimport timer from '@epok.tech/fn-time';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport each from '@epok.tech/fn-lists/each';\nimport range from '@epok.tech/fn-lists/range';\n\nimport { gpgpu, extensionsFloat, extensionsHalfFloat, optionalExtensions }\n    from '../../index';\n\nimport { macroPass } from '../../macros';\nimport { getMaps } from '../../maps';\nimport { getUniforms, getDrawIndexes } from '../../inputs';\nimport indexPairs from '../../index-pairs';\n\nimport stepFrag from './step.frag.glsl';\nimport drawVert from './draw.vert.glsl';\nimport drawFrag from './draw.frag.glsl';\n\nself.gpgpu = gpgpu;\nself.macroPass = macroPass;\nself.getMaps = getMaps;\nself.getUniforms = getUniforms;\nself.getDrawIndexes = getDrawIndexes;\nself.indexPairs = indexPairs;\n\nconst extend = {\n    halfFloat: extensionsHalfFloat?.(),\n    float: extensionsFloat?.(),\n    other: optionalExtensions?.()\n};\n\nconst regl = self.regl = getRegl({\n    pixelRatio: Math.max(Math.floor(devicePixelRatio), 1.5),\n    extensions: extend.required = extend.halfFloat,\n    optionalExtensions: extend.optional = [...extend.float, ...extend.other]\n});\n\nconsole.group('Extensions');\n\nconsole.log('required', (extend.required &&\n    reduce((o, e) => o+(o && '; ')+e+': '+regl.hasExtension(e),\n        extend.required, '')));\n\nconsole.log('optional', (extend.optional &&\n    reduce((o, e) => o+(o && '; ')+e+': '+regl.hasExtension(e),\n        extend.optional, '')));\n\nconsole.groupEnd();\n\nconst canvas = document.querySelector('canvas');\n\ncanvas.classList.add('view');\n\n// How many frame-buffers are bound at a given time.\nconst bound = 1;\n\n// How many values/channels each property independently tracks.\n// The order here corresponds to the order in the shaders and generated macros,\n// though these may be `packed` across channels/textures/passes differently.\n\nconst valuesMap = (new Map())\n    .set('position', 3).set('motion', 3).set('life', 1);\n\nconst values = [];\nconst valuesIndex = {};\n\nvaluesMap.forEach((v, k) => valuesIndex[k] = values.push(v)-1);\n\n// Limits of this device and these `values`.\nconst { maxTextureUnits, maxTextureSize, lineWidthDims, pointSizeDims } =\n    regl.limits;\n\nconst limits = {\n    steps: [\n        1+bound,\n        Math.floor(maxTextureUnits/(reduce((s, v) => s+v, values, 0)/4))\n    ],\n    // Better stay farther under maximum texture size, or errors/crashes.\n    scale: [1, Math.log2(maxTextureSize)]\n};\n\nconst niceScale = clamp(8, ...limits.scale);\n\nconsole.log('limits', limits, regl.limits);\n\n// Handle query parameters.\n\nconst getQuery = (search = location.search) => new URLSearchParams(search);\n\nfunction setQuery(entries, query = getQuery()) {\n    each(([k, v = null]) => ((v === null)? query.delete(k) : query.set(k, v)),\n        entries);\n\n    return query;\n}\n\nlet query = getQuery();\n\n// 1 active state, as many others as can be bound; at least 2 past states needed\n// for Verlet integration, 1 for Euler integration.\nconst steps = Math.floor(clamp((parseInt(query.get('steps'), 10) || 2+bound),\n    ...limits.steps));\n\nconst stepsPast = steps-bound;\n\nconst scale = Math.floor(clamp((parseInt(query.get('scale'), 10) || niceScale),\n    ...limits.scale));\n\n// Trails of points if given; if not given, uses trails of lines.\nconst usePoints = query.has('points');\n\n// Constant-step (add time-step), if given; if not given, uses real-time\n// (variable delta-time).\nconst hasTimestep = query.has('timestep');\nconst timestepDef = 1e3/60;\n\nconst timestep = (hasTimestep &&\n    (parseFloat(query.get('timestep'), 10) || timestepDef));\n\nconsole.log(location.search+':\\n', ...([...query.entries()].flat()), '\\n',\n    'steps:', steps, 'scale:', scale, 'timestep:', timestep);\n\n// Set up the links.\n\ndocument.querySelector('#default').href =\n    `?${setQuery([['steps'], ['scale']])}#default`;\n\ndocument.querySelector('#euler').href = `?${setQuery([\n        ['steps', 1+bound], ['scale', Math.max(niceScale, limits.scale[1]-5)]\n    ])}#euler`;\n\ndocument.querySelector('#long').href = `?${setQuery([\n        ['steps', limits.steps[1]],\n        ['scale', clamp(limits.scale[0]+5, limits.scale[1]-8, limits.scale[1])]\n    ])}#long`;\n\ndocument.querySelector('#max').href = `?${setQuery([\n        ['steps', Math.max(limits.steps[0], limits.steps[1]-3)],\n        ['scale', Math.max(niceScale, limits.scale[1]-5)]\n    ])}#max`;\n\ndocument.querySelector('#trails').href =\n    `?${setQuery([['points', ((usePoints)? null : '')]])}#trails`;\n\ndocument.querySelector('#timestep').href =\n    `?${setQuery([['timestep', ((timestep)? null : timestepDef)]])}#timestep`;\n\n// How values/channels map to their derivations.\n\nconst derives = [];\n\nderives[valuesIndex.position] = [\n    // Position, 2 steps past.\n    [clamp(1, 0, stepsPast-1), valuesIndex.position],\n    // Position, 1 step past.\n    valuesIndex.position,\n    valuesIndex.motion,\n    valuesIndex.life\n];\n\nderives[valuesIndex.motion] = [\n    valuesIndex.motion,\n    valuesIndex.life\n];\n\nderives[valuesIndex.life] = [\n    // Life, last step past.\n    [Math.max(stepsPast-1, 0), valuesIndex.life],\n    // Life, 1 step past.\n    valuesIndex.life\n];\n\n// Whether to allow Verlet integration.\nconst canVerlet = (stepsPast >= 2);\nconst cache = { source: [] };\n\n// The main GPGPU state.\nconst state = gpgpu(regl, {\n    props: {\n        // Set up the timer.\n        timer: timer((timestep)?\n                // Constant-step (add time-step).\n                { step: timestep, dts: range(2, 0) }\n                // Real-time (variable delta-time).\n            :   { step: '-', now: () => regl.now()*1e3, dts: range(2, 0) }),\n        // Speed up or slow down the passage of time.\n        rate: 1,\n        // Loop time over this period to avoid instability of parts of the demo.\n        loop: 3e3,\n        // Whether to use Verlet (midpoint) or Euler (forward) integration.\n        useVerlet: canVerlet,\n        // Range of how long a particle lives before respawning.\n        lifetime: [5e2, 3e3],\n        // Acceleration due to gravity.\n        g: [0, -9.80665, 0],\n        // The position particles respawn from.\n        source: [0, 0, 0.5],\n        // To help with accuracy of small numbers, uniformly scale space.\n        scale: 1e-7,\n\n        // One option in these arrays chosen by Euler/Verlet, respectively.\n\n        // The motion particles respawn with.\n        spout: [3e3, 2e2],\n        // Drag coefficient.\n        // drag: [range(3, 1e-3), range(3, 1e-1)]\n    },\n    bound, steps, scale, maps: { values, derives },\n    // Data type according to support.\n    type: ((extend.float.every(regl.hasExtension))? 'float' : 'half float'),\n    // Per-shader macro hooks, no macros needed for the `vert` shader.\n    macros: { vert: false },\n    step: {\n        // Per-pass macros will prepend to `frag` shader and cache in `frags`.\n        frag: stepFrag, frags: [],\n        uniforms: {\n            dt: (_, { props: { timer: { dt }, rate: r } }) => dt*r,\n            dt0: (_, { props: { timer: { dts: { 0: dt } }, rate: r } }) => dt*r,\n            dt1: (_, { props: { timer: { dts: { 1: dt } }, rate: r } }) => dt*r,\n            time: (_, { props: { timer: { time: t }, rate: r } }) => t*r,\n\n            loop: (_, { props: { timer: { time: t }, loop: l } }) =>\n                Math.sin(t/l*Math.PI)*l,\n\n            lifetime: regl.prop('props.lifetime'),\n            g: regl.prop('props.g'),\n            useVerlet: (_, { props: { useVerlet: u } }) => +u,\n\n            source: (_, { props: { source, scale } }) =>\n                map((v, i) => v/scale, source, cache.source),\n\n            // One option in these arrays chosen by Euler/Verlet, respectively.\n            spout: (_, { props: { spout: ss, useVerlet: u } }) => ss[+u],\n            // drag: (_, { props: { drag: ds, useVerlet: u } }) => ds[+u]\n        }\n    }\n});\n\nconsole.log(self.state = state);\n\nconsole.group('How `values` are `packed` to fit texture channels efficiently');\nconsole.log(state.maps.values, '`values` (referred to by index)');\nconsole.log(state.maps.packed, '`packed` (`values` indexes)');\nconsole.log(...state.maps.textures, '`textures` (`values` indexes)');\nconsole.log(state.maps.valueToTexture, '`valueToTexture` (`textures` indexes)');\nconsole.groupEnd();\n\n// Set up rendering.\n\n// Draw count; note `state.size.count` here equals `countDrawIndexes`.\nconst drawCount = state.size.count*((usePoints)? steps : indexPairs(steps));\nconst drawIndexes = getDrawIndexes(drawCount);\n\nconst drawState = {\n    ...state,\n    drawProps: {\n        // Speed-to-colour scaling, as `[multiply, power]`.\n        // One option in these arrays chosen by Euler/Verlet, respectively.\n        pace: [[1e-3, 0.5], [5e-5, 0.5]]\n    },\n    // @todo Draw all states with none bound as outputs - currently errors.\n    // bound: 0,\n    // Drawing, don't need to output any data; also don't need `frag` macros.\n    macros: { 'output': 0, 'frag': 0 },\n    // Everything mapped the same way.\n    maps: getMaps({\n        ...state.maps,\n        // This one pass can bind textures for input; not output across passes.\n        texturesMax: maxTextureUnits,\n        /**\n         * One set of reads of all values in one pass.\n         * Passing `true` adds all values at that level of nesting:\n         * `pass|[values|[value|[step, value]]]`\n         * Thus, this example means that the _first_ value derives from:\n         * - All values 1 step past (`true`).\n         * - The position value 2 steps past.\n         * Makes `reads_0_i` macros for each `i => [step, value]` of\n         * `[[0, 0], [0, 1], [0, 2], [1, 0]]`\n         */\n        derives: [[true, [clamp(1, 0, stepsPast-1), valuesIndex.position]]]\n    })\n};\n\nconst drawWidth = 2**3;\n\nconst drawCommand = {\n    // Use GPGPU macro mappings by prepending macros from a single pass.\n    vert: macroPass(drawState)+drawVert,\n    frag: drawFrag,\n    attributes: { index: drawIndexes },\n    // Hook up GPGPU uniforms by adding them here.\n    uniforms: getUniforms(drawState, {\n        ...drawState.step.uniforms,\n        scale: regl.prop('props.scale'),\n        pace: (_, { drawProps: { pace }, props: { useVerlet: u } }) => pace[+u],\n        pointSize: clamp(drawWidth, ...pointSizeDims)\n    }),\n    lineWidth: clamp(drawWidth, ...lineWidthDims),\n    count: drawCount,\n    depth: { enable: true },\n    blend: { enable: true, func: { src: 'one', dst: 'one minus src alpha' } },\n    primitive: ((usePoints || steps-drawState.bound < 2)? 'points' : 'lines')\n};\n\nconsole.log((self.drawState = drawState), (self.drawCommand = drawCommand));\n\nconst draw = regl(drawCommand);\n\nfunction stepTime(state) {\n    const { dts } = state;\n\n    dts[0] = dts[1];\n    dts[1] = timer(state).dt;\n\n    return state;\n}\n\nconst clearView = { color: [0, 0, 0, 0], depth: 1 };\n\nregl.frame(() => {\n    stepTime(state.props.timer);\n    state.step.run();\n    drawState.stepNow = state.stepNow;\n    regl.clear(clearView);\n    draw(drawState);\n});\n\n// Toggle Verlet integration, if there are enough past steps.\ncanvas.addEventListener('click', () =>\n    console.log('useVerlet',\n        (state.props.useVerlet = (canVerlet && !state.props.useVerlet))));\n\ncanvas.addEventListener('touchmove', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n});\n\ncanvas.addEventListener((('onpointermove' in self)? 'pointermove'\n        :   (('ontouchmove' in self)? 'touchmove' : 'mousemove')),\n    (e) => {\n        const { clientX: x, clientY: y } = e;\n        const { source } = state.props;\n        const size = Math.min(innerWidth, innerHeight);\n\n        source[0] = ((((x-((innerWidth-size)*0.5))/size)*2)-1);\n        source[1] = -((((y-((innerHeight-size)*0.5))/size)*2)-1);\n\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\nmodule?.hot?.accept?.(() => location.reload());\n","module.exports = clamp\n\nfunction clamp(value, min, max) {\n  return min < max\n    ? (value < min ? min : value > max ? max : value)\n    : (value < max ? max : value > min ? min : value)\n}\n","/**\n * Simple time-stepping - frame, real-time, constant-step - via any API.\n */\n\nexport const steps = {\n    diff: '-', dt: '-', '⏳': '-',\n    pause: 0, '⏸': 0,\n    add: '+', '⏭': '+'\n};\n\nexport const stepDef = steps.diff;\nexport const startDef = 0;\nexport const nowDef = { [steps.diff]: Date.now, [steps.add]: 1e3/60 };\n\n/**\n * Sets up properties needed to track time, starts/steps time in various ways:\n * - Time-difference or time-advance stepping.\n * - Step forwards or backwards in time or pause it.\n * - Current time can be a number or function; or the object's fixed time-step.\n * - Override property, pass the result to new objects.\n *\n * @example\n *     // Initial call sets up properties.\n *     const diff0 = timer({ step: '-' }, 200);\n *     // => { step: '-', time: 200, dt: 200 };\n *     const add0 = timer({ step: 200 });\n *     // => { step: 200, time: 200, dt: 200 };\n *\n *     // Subsequent calls advance time and track difference.\n *\n *     // No time difference here.\n *     timer(diff0, 200); // => { step: '-', time: 200, dt: 0 };\n *     timer(add0, 0); // => { step: 200, time: 200, dt: 0 };\n *\n *     // Time-difference here with a change or step, into a new result target.\n *     const diff1 = timer(diff0, 300, {});\n *     // => { step: '-', time: 300, dt: 100 };\n *     const add1 = timer(add0, null, {});\n *     // => { step: 200, time: 400, dt: 200 };\n *\n *     diff1.time-diff0.time === diff1.dt; // => true;\n *     add1.time-add0.time === add1.dt; // => true;\n *\n * @param {object} state The state being tracked.\n * @param {number} [state.time=startDef] The initial time.\n * @param {string|number} [state.step=stepDef] How time advances:\n *     - Difference since last `time`: `'diff'`/`'dt'`/`'-'`/`'⏳'`.\n *     - Pause: `'pause'`/`'⏸'`, or number zero (`0`).\n *     - Add `time` step: `'add'`/`'+'`/`'⏭'`, or non-zero number (step size).\n * @param {number|function} [now] The time now (clock/frame/step/etc), or a\n *     function giving it; if not given, uses `state.step` if numeric or\n *     `nowDef[state.step]` otherwise.\n * @param {object|false} [out=state] The state to set up; modifies `state` if\n *     not given.\n *\n * @returns {object|number} The given `out` set up with its initial `time`; or\n *     if `out` is falsey, returns the relevant calculated unknown value:\n *     - The difference since last `time` for `diff` step.\n *     - The updated `time` for `add` or `pause` step.\n */\nexport function timer(state, now, out = state) {\n    // Get the initial time and step-step.\n    const { time: t0 = startDef, step = stepDef, now: n } = state;\n    // Get the step mode - from a key into `steps` or a numerical value.\n    const s = (steps[step] ?? step);\n    const diff = (s === steps.diff);\n    const t = (now ?? n ?? nowDef[s] ?? s);\n\n    // Step by `s`:\n    // - `0` or falsey to `pause`\n    // - `steps.diff` for difference since last `time`\n    // - `steps.add` or a number to add a `time` step\n    const t1 = ((!s)? t0 : ((diff)? 0 : t0)+((isNaN(t))? t() : t));\n    const dt = t1-t0;\n\n    // If only returning a value, return the relevant calculated unknown.\n    if(!out) { return ((diff)? dt : t1); }\n\n    out.time = t1;\n    out.dt = dt;\n    out.step = step;\n\n    return out;\n}\n\nexport default timer;\n","const r = Array.prototype.reduce;\n\n/**\n * Reduce an array-like list.\n * Similar to native, but with iteratee-first arguments.\n * Supports the native single-argument behaviour.\n *\n * @param {function} f The iteratee function, given standard arguments, and any\n *     given `to`.\n * @param {array} a The list to reduce over (array or array-like list).\n * @param {*} [to] The initial accumulator, if given; otherwise, uses standard\n *     `Array.reduce` behaviour.\n *\n * @returns {*} The result of running the reducer iteratee function over all\n *     elements of the list.\n */\nexport const reduce = (f, a, to) =>\n    // Needs separate `call` because native detects even `undefined` parameter.\n    ((to === undefined)? r.call(a, f) : r.call(a, f, to));\n\nexport default reduce;\n","import { reduce } from './reduce';\n\n/**\n * Map an array-like list.\n * Similar to native, but with iteratee-first arguments; and allows the object\n * into which properties will be mapped to be defined (a new array, by default),\n * avoiding always creating new arrays.\n *\n * @param {function} f The iteratee function, given standard `Array.map`\n *     arguments, and any given `to`.\n * @param {array} a The list to map over (array or array-like list).\n * @param {*} [to=[]] The initial accumulator, if given; `a` if falsey; or a new\n *     array if not given.\n *\n * @returns {*} The result of mapping `to` through the iteratee function over\n *     the `a` list.\n */\nexport const map = (f, a, to = []) => reduce((to, v, i) => {\n        to[i] = f(v, i, a, to);\n\n        return to;\n    },\n    a, (to || a));\n\nexport default map;\n","const e = Array.prototype.forEach;\n\n/**\n * Iterates a function over every element of a list, returning the list.\n *\n * @param {function} f The iteratee function.\n * @param {array} a A list to iterate over (array or array-like object).\n *\n * @returns {array} The given list.\n */\nexport const each = (f, a) => {\n    e.call(a, f);\n\n    return a;\n}\n\nexport default each;\n","/**\n * Creates an iterable array of the given length of empty entries, or those\n * given by optional arguments to `Array.fill`.\n *\n * @see Array.constructor\n * @see Array.fill\n *\n * @param {number} n The number of elements to create.\n * @param {*} [value] A value to fill the array with; for `Array.fill`.\n * @param {number} [start=0] Start index, inclusive; for `Array.fill`.\n * @param {number} [end=n] End index, exclusive; for `Array.fill`.\n *\n * @returns {array} An array of the given number of empty elements.\n */\nexport const range = (n, value, start, end) =>\n    Array(Math.floor(n)).fill(value, start, end);\n\nexport default range;\n","/**\n * GPGPU state-stepping: maps minimal draw passes, shaders, GL resources,\n * inputs, outputs. BYORenderer.\n *\n * Rendering approach/engine specific, decoupled from the logic code.\n * The modules and many hooks may be used as given, or piecemeal, or overridden.\n */\n\nimport { getMaps } from './maps';\nimport { getState } from './state';\nimport { getStep } from './step';\n\nexport * from './const';\n\n/**\n * Sets up all the maps, inputs, resources, etc for a GPGPU process.\n *\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [mapSamples]{@link ./maps.js#mapSamples}\n * @see [getState]{@link ./step.js#getState}\n * @see [getUniforms]{@link ./step.js#getUniforms}\n * @see [getStep]{@link ./step.js#getStep}\n * @see [macroPass]{@link ./macros.js#macroPass}\n *\n * @param {object} api An API for GL resources. See `getState` and `getStep`.\n * @param {object} [api.limits=api] A map of GL resource limits.\n * @param {number} [api.limits.maxDrawbuffers] The maximum number of GL textures\n *     a framebuffer can bind in a single draw call.\n * @param {object} [state={}] State properties to set up; a new object by\n *     default. See `getState`, `getUniforms`, and `getStep`.\n * @param {object} [state.maps] How values are grouped per-texture per-pass\n *     per-step. Sets up new maps if not given or missing its mapped properties.\n *     See `mapGroups`.\n * @param {number} [state.maps.texturesMax=api.limits.maxDrawbuffers] The\n *     maximum number of textures to use per draw pass. Uses more passes above\n *     this limit.\n * @param {object} [to=state] The state object to set up. Modifies the given\n *     `state` object by default.\n */\nexport function gpgpu(api, state = {}, to = state) {\n    const { maxDrawbuffers: texturesMax, glsl } = (api.limits ?? api);\n    const { maps = {} } = state;\n\n    to.glsl = parseFloat(glsl.match(/[0-9\\.]+/)[0]);\n    maps.texturesMax ??= texturesMax;\n    to.maps = getMaps(maps);\n    getState(api, state, to).step = getStep(api, state);\n\n    return to;\n}\n\nexport default gpgpu;\n","/**\n * GPGPU mappings for step/draw shaders input/output.\n *\n * These maps show shaders how to make use of a system's supported features, how\n * to pack/unpack their data from framebuffers/textures, perform only minimal\n * needed samples to retrieve any past values they must derive from, etc.\n * Shaders may declare values they output, values they derive from, groupings of\n * in/dependent values - without handling how these concerns map to the\n * particular system resources they're using.\n * System limits/features/extensions are accounted for, to produce the most\n * efficient mappings available with the least I/O when it comes to drawing\n * (draw passes, texture samples, etc).\n *\n * @todo Allow passes into or across textures; separate data and texture shapes.\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport each from '@epok.tech/fn-lists/each';\n\nimport { valuesDef, channelsMaxDef, texturesMaxDef } from './const';\n\nexport const cache = { packed: [] };\n\nexport const validValue = (value, channelsMax = channelsMaxDef) =>\n    ((1 <= value) || (value <= channelsMax) ||\n        !!console.error(`\\`gl-gpgpu\\`: the given value (${value}) exceeds the `+\n            `range of channels available, \\`[1, ${channelsMax}]\\` inclusive.`,\n            value, channelsMax));\n\n/**\n * Minimise resource usage, order `values` to pack into blocks of `channelsMax`;\n * interpreted as indexes into the given `values`.\n *\n * @example\n *     packValues([1, 2, 3], 4, []); // =>\n *     [2, 0, 1];\n *\n *     packValues([3, 2, 1], 4, []); // =>\n *     [0, 2, 1];\n *\n *     packValues([4, 3, 2], 4, []); // =>\n *     [0, 1, 2];\n *\n *     packValues([1, 1, 4, 2], 4, []); // =>\n *     [2, 3, 0, 1];\n *\n * @see mapGroups\n *\n * @param {array<number>} values Each entry is how many interdependent channels\n *     are grouped into one texture in one pass, separate entries may be across\n *     one or more textures/passes. See `mapGroups`.\n * @param {number} [channelsMax=channelsMaxDef] The maximum number of channels\n *     per texture. See `mapGroups`.\n * @param {array} [to=[]] An array to store the result; a new array by default.\n *\n * @returns {array<number>} `to` The indexes of the given `values`, reordered\n *     to pack into the fewest buckets of `channelsMax` size or less; stored in\n *     the given `to` array.\n */\nexport function packValues(values, channelsMax = channelsMaxDef, to = []) {\n    map((_, i) => i, values, to).length = values.length;\n\n    // Counts the number of empty channels in the current group.\n    let channels = channelsMax;\n    // How many values have already been packed.\n    let packed = 0;\n    // Tracks the value that best fits the free channels (fills it tightest).\n    let fitIndex = 0;\n    let fitSize = Infinity;\n\n    for(let i = 0; packed < values.length;) {\n        const v = packed+i;\n        const value = values[to[v]];\n\n        if(!validValue(value, channelsMax)) { return to; }\n\n        // Check how value fits the channels - valid is >= 0, perfect is 0.\n        const fit = channels-value;\n\n        if((fit >= 0) && (fit < fitSize)) {\n            fitSize = fit;\n            fitIndex = v;\n        }\n\n        // Not a perfect fit and can keep searching for better fits - continue.\n        if((fitSize !== 0) && (v < values.length-1)) { ++i; }\n        else {\n            // Got a perfect fit or the search ended - swap in best fit value.\n            const pack = to[fitIndex];\n\n            to[fitIndex] = to[packed];\n            to[packed] = pack;\n\n            // Reduce the free channels by the best value, reset if needed.\n            (((channels -= values[pack]) > 0) || (channels = channelsMax));\n            // Start the search again over the remaining unpacked entries.\n            fitIndex = ++packed;\n            fitSize = Infinity;\n            i = 0;\n        }\n    }\n\n    return to;\n}\n\n/**\n * Groups the `values` of GPGPU data items across draw passes and data textures.\n *\n * @example\n *     const x = 2;\n *     const y = 4;\n *     const z = 1;\n *     const maps = { values: [x, y, z], channelsMax: 4 };\n *\n *     // No optimisations - values not packed, single texture output per pass.\n *     mapGroups({ ...maps, texturesMax: 1, packed: false }); // =>\n *     {\n *         ...maps, packed: false,\n *         textures: [[0], [1], [2]], // length === 3\n *         passes: [[0], [1], [2]], // length === 3\n *         valueToTexture: [0, 1, 2], valueToPass: [0, 1, 2],\n *         textureToPass: [0, 1, 2]\n *     };\n *\n *     // Automatically packed values - values across fewer textures/passes.\n *     mapGroups({ ...maps, texturesMax: 1 }); // =>\n *     {\n *         ...maps, packed: [1, 0, 2],\n *         textures: [[1], [0, 2]], // length === 2\n *         passes: [[0], [1]], // length === 2\n *         valueToTexture: [1, 0, 1], valueToPass: [1, 0, 1],\n *         textureToPass: [0, 1]\n *     };\n *\n *     // Can bind more texture outputs per pass - values across fewer passes.\n *     mapGroups({ ...maps, texturesMax: 4 }); // =>\n *     {\n *         ...maps, packed: [1, 0, 2],\n *         textures: [[1], [0, 2]], // length === 2\n *         passes: [[0, 1]], // length === 1\n *         valueToTexture: [1, 0, 1], valueToPass: [0, 0, 0],\n *         textureToPass: [0, 0]\n *     };\n *\n *     // Custom packed values - fuller control.\n *     mapGroups({ ...maps, texturesMax: 4, packed: [0, 2, 1] }); // =>\n *     {\n *         ...maps, packed: [0, 2, 1],\n *         textures: [[0, 2], [1]], // length === 2\n *         passes: [[0, 1]], // length === 1\n *         valueToTexture: [0, 1, 0], valueToPass: [0, 0, 0],\n *         textureToPass: [0, 0]\n *     };\n *\n *     // Merge dependent values - fuller control, but no map for merged values.\n *     mapGroups({ ...maps, values: [x+z, y], texturesMax: 4 }); // =>\n *     {\n *         ...maps, packed: [1, 0],\n *         textures: [[1], [0]], // length === 2\n *         passes: [[0, 1]], // length === 1\n *         valueToTexture: [1, 0], valueToPass: [0, 0],\n *         textureToPass: [0, 0]\n *     };\n *\n * @see packValues\n *\n * @param {object} [maps={}] Maps and initial settings; new object if not given.\n * @param {array<number>} [maps.values=valuesDef()] An array where each number\n *     denotes how many value channels are grouped into one data texture in one\n *     draw pass (where any value map logic isn't handled here); each separate\n *     number may be computed across one or more data textures/passes.\n *     Each value denotes the number of dependent channels to compute together;\n *     separate values denote channels that are independent, and may be drawn in\n *     the same or separate passes, depending on settings/support.\n *     The order may affect the number of passes/textures needed; can maintain\n *     order as-is, or use a more efficient `packed` order. See `packValues`.\n * @param {number} [maps.channelsMax=channelsMaxDef] Maximum channels per\n *     texture.\n * @param {number} [maps.texturesMax=texturesMaxDef] Maximum textures bound per\n *     pass.\n * @param {array<number>|false} [maps.packed] An array of indexes into `values`\n *     packed into an order that best fits into blocks of `channelsMax` to\n *     minimise resources; or false-y to use `values` in their given order;\n *     uses `packValues` if not given.\n * @param {object} [to=maps] An object to contain the results; modifies `maps`\n *     if not given.\n *\n * @returns {object} `to` The given `to` object; how `values` are grouped\n *     per-texture per-pass per-step, meta information, and given parameters.\n * @returns {array<array<number>>} `to.passes` Textures grouped into passes, as\n *     arrays corresponding to framebuffers in separate draw passes; whose\n *     values are indexes into `to.textures`.\n * @returns {array<array<number>>} `to.textures` Values grouped into\n *     textures, as arrays corresponding to framebuffer attachments, into which\n *     `values` are drawn; whose values are indexes into `to.values`.\n * @returns {array<number>} `to.values` The `values`, as given.\n * @returns {number} `to.texturesMax` The max textures per pass, as given.\n * @returns {number} `to.channelsMax` The max channels per texture, as given.\n * @returns {array<number>} `to.valueToTexture` Inverse map from each index of\n *     `to.values` to the index of the data texture containing it.\n * @returns {array<number>} `to.valueToPass` Inverse map from each index of\n *     `to.values` to the index of the pass containing it.\n * @returns {array<number>} `to.textureToPass` Inverse map from each index of\n *     `to.textures` to the index of the pass containing it.\n */\nexport function mapGroups(maps = {}, to = maps) {\n    if(!maps) { return to; }\n\n    const {\n            values = valuesDef(),\n            channelsMax = channelsMaxDef, texturesMax = texturesMaxDef,\n            // Pack `values` into blocks of `channelsMax` to minimise resources.\n            packed = packValues(values, channelsMax, cache.packed)\n        } = maps;\n\n    to.values = values;\n    to.texturesMax = texturesMax;\n    to.channelsMax = channelsMax;\n    to.packed = packed;\n\n    const passes = to.passes = [[]];\n    const textures = to.textures = [[]];\n    const valueToTexture = to.valueToTexture = [];\n    const valueToPass = to.valueToPass = [];\n    const textureToPass = to.textureToPass = [];\n    // Counts the number of channels written in a single draw pass.\n    let channels = 0;\n    // Get the value, via `packed` if valid, or directly as given in `values`.\n    const getValue = ((packed)? ((_, i) => values[i]) : ((v) => v));\n    const getIndex = ((packed)? ((i) => packed[i]) : ((i) => i));\n\n    return reduce((to, v, i) => {\n            const index = getIndex(i);\n            const value = getValue(v, index);\n\n            if(!validValue(value, channelsMax)) { return to; }\n\n            let p = passes.length-1;\n            let pass = passes[p];\n            let t = textures.length-1;\n            let texture = textures[t];\n\n            if((channels += value) > channelsMax) {\n                channels = value;\n                t = textures.push(texture = [])-1;\n\n                ((pass.length >= texturesMax) &&\n                    (p = passes.push(pass = [])-1));\n\n                pass.push(t);\n                textureToPass.push(p);\n            }\n            else if(pass.length === 0) {\n                pass.push(t);\n                textureToPass.push(p);\n            }\n\n            texture.push(index);\n            valueToTexture[index] = t;\n            valueToPass[index] = p;\n\n            return to;\n        },\n        values, to);\n}\n\n/**\n * Maps the minimal set of texture reads to derive the next state of values from\n * a past state of values they depend upon.\n *\n * @example\n *     const maps = mapGroups({\n *         // See `mapGroups` examples for resulting maps.\n *         values: [2, 4, 1], channelsMax: 4, texturesMax: 1, packed: false,\n *         // Derived step/value indexes, per-value; sample entries include:\n *         derives: [\n *             // Single...\n *             2,\n *             // Empty...\n *             ,\n *             // Multiple...\n *             [\n *                 // Defined step...\n *                 [1, 0],\n *                 // All values at any given level/step...\n *                 true\n *             ]\n *         ]\n *     });\n *\n *     mapSamples(maps); // =>\n *     {\n *         ...maps,\n *         // Minimum texture samples for values; nested per-pass, per-value.\n *         // Deepest arrays are step/texture index pairs into `maps.textures`.\n *         samples: [\n *             [[0, 2]],\n *             null,\n *             [[1, 0], [0, 0], [0, 1], [0, 2]]\n *         ],\n *         // Value indexes into `to.samples`; nested per-pass, per-value.\n *         // Map from a value index to data it needs in the minimal samples.\n *         reads: [\n *             [[0]],\n *             null,\n *             [null, null, [0, 1, 2, 3]]\n *         ]\n *     };\n *\n * @see mapGroups\n *\n * @param {object} maps How values are grouped per-texture, per-pass, per-step.\n *     See `mapGroups`.\n * @param {true|array<null,true,number,array<true,number,array<true,number>>>}\n *     [maps.derives] How values derive from others.\n *     If given as an array, each entry relates the corresponding value to\n *     any past value steps/indexes it derives from - a value not derived from\n *     past values may have an empty/null entry; a value derives from past\n *     values where its entry has:\n *     - Numbers; deriving from the most recent state at the given value index.\n *     - Lists of numbers; deriving from the given past state index (1st number\n *         denotes how many steps ago), at the given value index (2nd number).\n *     The nested hierarchy is thus `pass|[values|[value|[step, value]]]`.\n *     If any level is given as `true`, maps to sample all values, at the given\n *     step (or most recent step, if none given).\n *     If no `derives` given, no samples are mapped, `to` is returned unchanged.\n * @param {array<array<number>>} maps.passes Textures grouped into passes. See\n *     `mapGroups`.\n * @param {array<array<number>>} maps.textures Values grouped into textures. See\n *     `mapGroups`.\n * @param {array<number>} maps.valueToTexture Inverse map from each value index\n *     to the data texture index containing it.\n * @param {object} [to=maps] The object to store the result in; `maps` if not\n *     given.\n *\n * @returns {object} `to` The given `to` object, with resulting maps added for\n *     any given `maps.derives`.\n * @returns {array<array<array<number>>>} `[to.samples]` Map of the minimum\n *     set of indexes into `maps.textures` that need to be sampled per-pass,\n *     to get all `derives` needed for each value of `maps.values` of each\n *     pass of `maps.passes`.\n * @returns {array<array<null,array<number>>>} `[to.reads]` Sparse map from\n *     each value of `derives` to its step and texture indexes in `to.samples`.\n * @returns {true|array<null,true,number,array<true,number,array<true,number>>>}\n *     `[to.derives]` How values are derived, as given.\n */\nexport function mapSamples(maps, to = maps) {\n    const derives = maps?.derives;\n\n    if(!derives) { return to; }\n\n    const { passes, textures, valueToTexture } = maps;\n    const reads = to.reads = [];\n    const cache = {};\n\n    to.derives = derives;\n\n    const all = (step = 0) =>\n        cache[step] ??= map((t, v) => [step, v], valueToTexture);\n\n    const getAddSample = (pass, value) => function add(set, derive, d) {\n        let step = 0;\n        let texture;\n\n        if(derive === true) { return reduce(add, all(step), set); }\n        else if(Number.isFinite(derive)) { texture = valueToTexture[derive]; }\n        else if(derive[1] === true) { return reduce(add, all(derive[0]), set); }\n        else {\n            step = derive[0];\n            texture = valueToTexture[derive[1]];\n        }\n\n        if(!Number.isFinite(step) || !Number.isFinite(texture)) {\n            return console.error('`mapSamples`: invalid map for sample',\n                derives, maps, pass, value, derive, d, step, texture);\n        }\n\n        // Create the set if not already created.\n        const to = (set || []);\n        // Check for any existing matching step/texture read in the set.\n        const i = to.findIndex(([s, t]) => (s === step) && (t === texture));\n\n        // Add the read for this value in this pass; creating any needed maps.\n        ((reads[pass] ??= [])[value] ??= [])\n            // A new read as needed, or any existing matching read.\n            .push((i < 0)? to.push([step, texture])-1 : i);\n\n        return to;\n    };\n\n    const getAddSamples = (pass) => (set, value) => {\n        const valueDerives = ((derives === true)? derives : derives[value]);\n\n        return ((!valueDerives && (valueDerives !== 0))? set\n            : (((valueDerives === true) || Number.isFinite(valueDerives))?\n                    getAddSample(pass, value)(set, valueDerives)\n                :   reduce(getAddSample(pass, value), valueDerives, set)));\n    }\n\n    to.samples = map((pass, p) => reduce((set, texture) =>\n                reduce(getAddSamples(p), textures[texture], set),\n            pass, null),\n        passes, []);\n\n    return to;\n}\n\n/**\n * Main function, creates maps for a given set of values and settings, as well\n * as maps for minimal samples and reads if new values derive from past ones.\n *\n * @see mapGroups\n * @see mapSamples\n *\n * @param {object} [maps] Maps and initial settings.\n * @param {object} [to=maps] An object to contain the results; modifies `maps`\n *     if not given.\n *\n * @returns {object} `to` The given `to` object; how `values` are grouped\n *     per-texture per-pass per-step, meta information, and given parameters;\n *     and minimal samples and reads for any given `maps.derives`.\n */\nexport const getMaps = (maps, to = maps) =>\n    mapSamples(maps, mapGroups(maps, to));\n\nexport default getMaps;\n","/**\n * Default properties for GPGPU and GL capabilities and resources.\n */\n\nimport { positions } from '@epok.tech/gl-screen-triangle';\n\n/** Default vertex shader. */\nexport { default as vertDef } from './index.vert.glsl';\n\n// The required and optional GL extensions for a GPGPU state.\n\n/** Default required extensions; none. */\nexport const extensions = () => [];\n\n/** Default required extensions to draw to `float` buffers. */\nexport const extensionsFloat = () =>\n    ['oes_texture_float', 'webgl_color_buffer_float'];\n\n/** Default required extensions to draw to `half float` buffers. */\nexport const extensionsHalfFloat = () =>\n    ['oes_texture_half_float', 'ext_color_buffer_half_float'];\n\n/** Default optional extensions; update more data in one render pass. */\nexport const optionalExtensions = () => ['webgl_draw_buffers'];\n\n/** Prefix namespace to avoid naming clashes. */\nexport const preDef = '';\n\n/**\n * The allowable range of channels for framebuffer attachments.\n * Default avoids `RGB32F` framebuffer attachments, which errors on\n * Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1448632\n */\nexport const channelsMinDef = 4;\nexport const channelsMaxDef = 4;\n\nexport const texturesMaxDef = 1;\nexport const boundDef = 1;\nexport const scaleDef = 10;\nexport const stepsDef = 2;\nexport const valuesDef = () => [channelsMaxDef];\nexport const positionsDef = () => [...positions];\n\n// Resource format defaults.\n\n/** Default texture data type. */\nexport const typeDef = 'float';\n/** Default texture minification filter. */\nexport const minDef = 'nearest';\n/** Default texture magnification filter. */\nexport const magDef = 'nearest';\n/** Default texture wrap mode. */\nexport const wrapDef = 'clamp';\n/** Default framebuffer depth attachment. */\nexport const depthDef = false;\n/** Default framebuffer stencil attachment. */\nexport const stencilDef = false;\n","/**\n * The 3 vertices of a 2D triangle covering the viewport in NDC coordinates ([-1, 1]).\n *\n * @export\n * @type {array.<array.<number>>}\n */\nexport const vertices = [[-1, -1], [-1, 4], [4, -1]];\n\nexport const count = vertices.length;\nexport const dim = 2;\n\n/**\n * The flat array of the above triangle, to be bound as a WebGL attribute buffer for\n * rendering the triangle in the vertex shader.\n * These positions will result in clipped NDC coordinates ([-1, 1]) over the\n * viewport's width and height.\n *\n * @export\n * @type {array.<number>}\n */\nexport const positions = vertices.flat();\n\nexport default positions;\n","/**\n * Default GPGPU vertex shader.\n *\n * @see @epok.tech/gl-screen-triangle/uv-texture.vert.glsl\n */\n\nprecision highp float;\n\nattribute vec2 position;\n\nuniform vec2 dataShape;\n\nvarying vec2 uv;\n\n#pragma glslify: offsetUV = require(./sample/offset-uv)\n\nvoid main() {\n    // Transform UV NDC to texture coordinates.\n    // Offset UV to sample at the texel center and avoid errors.\n    uv = offsetUV((position*0.5)+0.5, dataShape);\n    gl_Position = vec4(position, 0, 1);\n}\n","/**\n * GPGPU state and GL resources: framebuffers, textures; and meta information.\n *\n * @todo Allow passes into or across textures; separate data and texture shapes.\n * @todo In-place updates of complex resources and meta info.\n * @todo Use transform feedback instead of data textures, if supported (WebGL2)?\n */\n\nimport range from '@epok.tech/fn-lists/range';\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\n\nimport {\n        scaleDef, stepsDef, valuesDef, channelsMinDef,\n        typeDef, minDef, magDef, wrapDef, depthDef, stencilDef\n    } from './const';\n\n/**\n * Set up the GPGPU resources and meta information for a state of a number data.\n *\n * @todo Transform feedback.\n * @todo Reorder the given `values` into the most efficient `maps`?\n *\n * @example\n *     const api = {\n *         framebuffer: ({ depth, stencil, width, height, color }) => null,\n *         texture: ({ type, min, mag, wrap, width, height, channels }) => null\n *     };\n *\n *     // Example with `webgl_draw_buffers` extension support, for 4 buffers.\n *     let maps = mapGroups({ values: [1, 2, 3], texturesMax: 4, packed: 0 });\n *     let state = { steps: 2, side: 10, maps };\n *\n *     const s0 = getState(api, state, {}); // =>\n *     {\n *         ...state, passNow: undefined, stepNow: undefined,\n *         size: {\n *             steps: 2, passes: 2, textures: 4,\n *             width: 10, height: 10, shape: [10, 10], count: 100\n *         },\n *         steps: [\n *             [s0.passes[0][0].framebuffer], [s0.passes[1][0].framebuffer]\n *         ],\n *         // This setup results in fewer passes, as more buffers can be bound.\n *         passes: [\n *             [\n *                 {\n *                     framebuffer: api.framebuffer(s0.passes[0][0]),\n *                     color: [\n *                         s0.textures[0][0].texture, s0.textures[0][1].texture\n *                     ],\n *                     map: [0, 1], // maps.passes[0]\n *                     entry: 0, index: 0, step: 0,\n *                     depth: false, stencil: false, width: 10, height: 10\n *                 }\n *             ],\n *             [\n *                 {\n *                     framebuffer: api.framebuffer(s0.passes[1][0]),\n *                     color: [\n *                         s0.textures[1][0].texture, s0.textures[1][1].texture\n *                     ],\n *                     map: [0, 1], // maps.passes[0]\n *                     entry: 1, index: 0, step: 1,\n *                     depth: false, stencil: false, width: 10, height: 10\n *                 }\n *             ]\n *         ],\n *         textures: [\n *             [\n *                 {\n *                     texture: api.texture(s0.textures[0][0]),\n *                     map: [0, 1], // maps.textures[0]\n *                     entry: 0, index: 0, step: 0, pass: 0,\n *                     type: 'float', width: 10, height: 10, channels: 4,\n *                     min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *                 },\n *                 {\n *                     texture: api.texture(s0.textures[0][1]),\n *                     map: [2], // maps.textures[1]\n *                     entry: 1, index: 1, step: 0, pass: 0,\n *                     type: 'float', width: 10, height: 10, channels: 4,\n *                     min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *                 }\n *             ],\n *             [\n *                 {\n *                     texture: api.texture(s0.textures[1][0]),\n *                     map: [0, 1], // maps.textures[0]\n *                     entry: 2, index: 0, step: 1, pass: 0,\n *                     type: 'float', width: 10, height: 10, channels: 4,\n *                     min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *                 },\n *                 {\n *                     texture: api.texture(s0.textures[1][1]),\n *                     map: [2], // maps.textures[1]\n *                     entry: 3, index: 1, step: 1, pass: 0,\n *                     type: 'float', width: 10, height: 10, channels: 4,\n *                     min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *                 }\n *             ]\n *         ]\n *     };\n *\n *     // Example with no `webgl_draw_buffers` extension support, only 1 buffer.\n *     maps = mapGroups({ values: [1, 2, 3], texturesMax: 1, packed: 0 });\n *     state = { type: 'uint8', steps: 2, scale: 5, maps, stepNow: 1 };\n *\n *     const s1 = getState(api, state, {}); // =>\n *     {\n *         ...state, passNow: undefined, stepNow: 1,\n *         size: {\n *             steps: 2, passes: 4, textures: 4,\n *             width: 32, height: 32, shape: [32, 32], count: 1024\n *         },\n *         steps: [\n *             [s1.passes[0][0].framebuffer, s1.passes[0][1].framebuffer],\n *             [s1.passes[1][0].framebuffer, s1.passes[1][1].framebuffer]\n *         ],\n *         // This setup results in more passes, as fewer buffers can be bound.\n *         passes: [\n *             [\n *                 {\n *                     framebuffer: api.framebuffer(s1.passes[0][0]),\n *                     color: [s1.textures[0][0].texture],\n *                     map: [0], // maps.passes[0]\n *                     entry: 0, index: 0, step: 0,\n *                     depth: false, stencil: false, width: 32, height: 32\n *                 },\n *                 {\n *                     framebuffer: api.framebuffer(s1.passes[0][1]),\n *                     color: [s1.textures[0][1].texture],\n *                     map: [1], // maps.passes[1]\n *                     entry: 1, index: 1, step: 0,\n *                     depth: false, stencil: false, width: 32, height: 32\n *                 }\n *             ],\n *             [\n *                 {\n *                     framebuffer: api.framebuffer(s1.passes[1][0]),\n *                     color: [s1.textures[1][0].texture],\n *                     map: [0], // maps.passes[0]\n *                     entry: 2, index: 0, step: 1,\n *                     depth: false, stencil: false, width: 32, height: 32\n *                 },\n *                 {\n *                     framebuffer: api.framebuffer(s1.passes[1][1]),\n *                     color: [s1.textures[1][1].texture],\n *                     map: [1], // maps.passes[1]\n *                     entry: 3, index: 1, step: 1,\n *                     depth: false, stencil: false, width: 32, height: 32\n *                 }\n *             ]\n *         ],\n *         textures: [\n *             [\n *                 {\n *                     texture: api.texture(s1.textures[0][0]),\n *                     map: [0, 1], // maps.textures[0]\n *                     entry: 0, index: 0, step: 0, pass: 0,\n *                     type: 'uint8', width: 32, height: 32, channels: 4,\n *                     min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *                 },\n *                 {\n *                     texture: api.texture(s1.textures[0][1]),\n *                     map: [2], // maps.textures[1]\n *                     entry: 1, index: 1, step: 0, pass: 1,\n *                     type: 'uint8', width: 32, height: 32, channels: 4,\n *                     min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *                 }\n *             ],\n *             [\n *                 {\n *                     texture: api.texture(s1.textures[1][0]),\n *                     map: [0, 1], // maps.textures[0]\n *                     entry: 2, index: 0, step: 1, pass: 0,\n *                     type: 'uint8', width: 32, height: 32, channels: 4,\n *                     min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *                 },\n *                 {\n *                     texture: api.texture(s1.textures[1][1]),\n *                     map: [2], // maps.textures[1]\n *                     entry: 3, index: 1, step: 1, pass: 1,\n *                     type: 'uint8', width: 32, height: 32, channels: 4,\n *                     min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *                 }\n *             ]\n *         ]\n *     };\n *\n * @see texture\n * @see framebuffer\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [mapSamples]{@link ./maps.js#mapSamples}\n * @see [getStep]{@link ./step.js#getStep}\n * @see [macroPass]{@link ./macros.js#macroPass}\n *\n * @param {object} api The API for GL resources.\n * @param {texture} [api.texture] A function to create a GL texture.\n * @param {framebuffer} [api.framebuffer] A function to create a GL framebuffer.\n * @param {object} [state={}] The state parameters.\n * @param {number} [state.width] The width of the data textures to allocate;\n *     if given, supersedes `state.side` and `state.scale`.\n * @param {number} [state.height] The height of the data textures to allocate;\n *     if given, supersedes `state.side` and `state.scale`.\n * @param {number} [state.side] The length of both sides of the data textures\n *     to allocate; if given, supersedes `state.scale`.\n * @param {number} [state.scale=scaleDef] The length of the data textures sides\n *     to allocate; gives a square power-of-two texture raising 2 to this power.\n * @param {number|array} [state.steps=stepsDef] How many steps of state to\n *     track, or the list of states if already set up.\n * @param {object} [state.maps] How `state.maps.values` are grouped per-texture\n *     per-pass per-step. See `mapGroups`.\n * @param {array<number>} [state.maps.values=valuesDef()] How values of each\n *     data item may be grouped into textures across passes; set up here if not\n *     given. See `mapGroups`.\n * @param {number} [state.maps.channelsMin=channelsMinDef] The minimum allowed\n *     channels for framebuffer attachments; allocates unused channels as needed\n *     to reach this limit.\n * @param {number} [state.maps.textures] How values are grouped into textures.\n *     See `mapGroups`.\n * @param {number} [state.stepNow] The currently active state step, if any.\n * @param {number} [state.passNow] The currently active draw pass, if any.\n * @param {string} [state.type=typeDef] Texture data type.\n * @param {string} [state.min=minDef] Texture minification filter.\n * @param {string} [state.mag=magDef] Texture magnification filter.\n * @param {string} [state.wrap=wrapDef] Texture wrap mode.\n * @param {boolean|*} [state.depth=depthDef] Framebuffer depth attachment.\n * @param {boolean|*} [state.stencil=stencilDef] Framebuffer stencil attachment.\n * @param {object} [to=state] The state object to set up. Modifies the given\n *     `state` object by default.\n *\n * @returns {object} `to` The state object, set up with the data resources and\n *     meta information, for use with `getStep` and drawing:\n * @returns {object<number,array<number,array<number>>>} `to.maps` Any given\n *     `state.maps`. See `mapGroups`.\n * @returns {array<array<object<texture,string,number,array<number>>>>}\n *     `to.textures` Textures per step, as arrays of objects of `texture`s, and\n *     meta info. See `to.maps.textures`.\n * @returns {array<array<object<framebuffer,number,array<number>>>>}\n *     `to.passes` Passes per step, as arrays of objects of `framebuffer`s,\n *     referencing `to.textures`, and meta info. See `to.maps.passes`.\n * @returns {array<framebuffer<array<texture>>>} `to.steps`\n *     Hierarchy of steps of state, as an array of `framebuffer`s from\n *     `to.passes`, with arrays of `texture`s from `to.textures`, and meta\n *     information; set up here, or the given `state.steps` if it's an array.\n *     State data may be drawn into the framebuffers accordingly.\n *     See `mapGroups` and `getStep`.\n * @returns {object<number,string,array<number>>} `to.size` Size/type\n *     information about the created data resources.\n * @returns {number} `to.stepNow` The currently active state step, as given.\n * @returns {number} `to.passNow` The currently active draw pass, as given.\n */\nexport function getState({ texture, framebuffer }, state = {}, to = state) {\n    const {\n            steps = stepsDef, stepNow, passNow, maps, side, scale = scaleDef,\n            // Just `state.scale` ensures square power-of-two; for e.g: mipmaps.\n            width = (side ?? 2**scale), height = (side ?? 2**scale),\n            // Resource format settings.\n            type = typeDef, min = minDef, mag = magDef, wrap = wrapDef,\n            depth = depthDef, stencil = stencilDef\n        } = state;\n\n    to.maps = maps;\n    to.stepNow = stepNow;\n    to.passNow = passNow;\n\n    const {\n            values = valuesDef(),\n            channelsMin = channelsMinDef, textures: texturesMap\n        } = maps;\n\n    maps.channelsMin = channelsMin;\n    maps.values = values;\n\n    // Size of the created resources.\n    const size = to.size = {\n        steps: (steps.length ?? steps), textures: 0, passes: 0,\n        width, height, shape: [width, height], count: width*height\n    };\n\n    const textures = to.textures = [];\n    const passes = to.passes = [];\n\n    const addTexture = (step, pass, props) => (index) =>\n        ((textures[step] ??= [])[index] = {\n            // Meta info.\n            ...props,\n            entry: size.textures++, step, pass, index, map: texturesMap[index],\n            // Resources.\n            texture: texture?.(props)\n        })\n        .texture;\n\n    const addPass = (step) => (pass, index) => {\n        // All framebuffer color attachments need the same number of channels.\n        const textureProps = {\n            type, min, mag, wrap, width, height,\n            channels: reduce((max, t) =>\n                    reduce((max, v) => Math.max(max, values[v]),\n                        texturesMap[t], max),\n                pass, channelsMin)\n        };\n\n        const textures = map(addTexture(step, index, textureProps), pass);\n        const props = { depth, stencil, width, height, color: textures };\n\n        return ((passes[step] ??= [])[index] = {\n                // Meta info.\n                ...props, entry: size.passes++, step, index, map: pass,\n                // Resources.\n                framebuffer: framebuffer?.(props)\n            })\n            .framebuffer;\n    };\n\n    // Set up resources we'll need to store data per-texture per-pass per-step.\n    to.steps = map((passes, step) =>\n            // Use any given passes or create a new list of them.\n            (passes || map(addPass(step), maps.passes)),\n        // Use any given steps or create a new list of them.\n        ((Number.isFinite(steps))? range(steps) : steps), 0);\n\n    return to;\n}\n\n/**\n * A function to create a GL texture.\n *\n * @callback texture\n *\n * @param {string} type\n * @param {string} min\n * @param {string} mag\n * @param {string} wrap\n * @param {number} width\n * @param {number} height\n * @param {number} channels\n *\n * @returns {*} A GL texture, or an object serving that purpose.\n */\n\n/**\n * A function to create a GL framebuffer.\n *\n * @callback framebuffer\n *\n * @param {boolean} depth\n * @param {boolean} stencil\n * @param {number} width\n * @param {number} height\n * @param {array<texture>} color\n *\n * @returns {*} A GL framebuffer, or an object serving that purpose.\n */\n\nexport default getState;\n","/**\n * GPGPU update step.\n */\n\nimport each from '@epok.tech/fn-lists/each';\nimport { wrapGet } from '@epok.tech/fn-lists/wrap-index';\n\nimport { macroPass } from './macros';\nimport { getUniforms } from './inputs';\nimport { vertDef, positionsDef, preDef } from './const';\n\nconst scale = { vec2: 0.5 };\n\n/**\n * Creates a GPGPU update step function, for use with a GPGPU state object.\n *\n * @todo Optional transform feedback instead of GPGPU textures, where available\n *     (needs vertex draw, instead of texture draw).\n * @todo Make this fully extensible in state.\n *\n * @see [getState]{@link ./state.js#getState}\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [macroPass]{@link ./macros.js#macroPass}\n * @see [getUniforms]{@link ./inputs.js#getUniforms}\n *\n * @param {object} api An API for GL resources.\n * @param {function} api.buffer A function to set up a GL buffer.\n * @param {function} api.command A function to call a GL draw, with all options.\n * @param {object} state The GPGPU state to use. See `getState` and `mapGroups`.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @returns {array<array<number>>} `to.passes` How textures are grouped into\n *     passes. See `mapGroups`.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n * @param {object} [state.step=to] The properties for the step GL command.\n * @param {string} [state.step.vert=vertDef] The step vertex shader GLSL; a\n *     simple flat screen shader if not given.\n * @param {string} state.step.frag The step fragment shader GLSL.\n * @param {object} [state.step.uniforms=getUniforms(state)] The step uniforms;\n *     modifies any given. See `getUniforms`.\n * @param {array|api.buffer} [state.step.positions=positionsDef()] The step\n *     position attributes; 3 points of a large flat triangle if not given.\n * @param {number} [state.step.count=state.step.positions.length*scale.vec2] The\n *     number of elements/attributes to draw.\n * @param {array} [state.step.verts] Preprocesses and caches vertex GLSL code\n *     per-pass if given, otherwise processes it just-in-time before each pass.\n * @param {array} [state.step.frags] Preprocesses and caches fragment GLSL code\n *     per-pass, otherwise processes it just-in-time before each pass.\n * @param {object} [to=(state.step ?? {})] The results object; `state.step` or\n *     a new object if not given.\n *\n * @returns {object} `to` The given `to` object; containing a GPGPU update\n *     step function and related properties, to be passed a GPGPU state.\n * @returns {string} `to.vert` The given/new `state.vert` vertex shader GLSL.\n * @returns {string} `to.frag` The given `state.frag` fragment shader GLSL.\n * @returns {array.string} `[to.verts]` Any cached pre-processed vertex shaders\n *     GLSL, if `state.step.verts` was given.\n * @returns {array.string} `[to.frags]` Any cached pre-processed fragment\n *     shaders GLSL, if `state.step.verts` was enabled.\n * @returns {object} `to.uniforms` The given `state.uniforms`.\n * @returns {number} `to.count` The given/new `state.count`.\n * @returns {api.buffer} `to.positions` The given/new `state.positions`; passed\n *     through `api.buffer`.\n * @returns {api.command} `to.pass` A GL command function to draw a given pass.\n * @returns {function} `to.run` The main step function, which performs all the\n *     draw pass GL commands for a given state step.\n */\nexport function getStep(api, state, to = (state.step ?? {})) {\n    const { buffer, command = api } = api;\n    const { maps: { passes }, pre = preDef, step = to } = state;\n    let { positions = positionsDef() } = step;\n\n    const {\n            passCommand, vert = vertDef, verts, frag, frags, uniforms,\n            count = positions.length*scale.vec2\n        } = step;\n\n    to.vert = vert;\n    to.frag = frag;\n    to.uniforms = getUniforms(state, uniforms);\n    to.count = count;\n    positions = to.positions = buffer(positions);\n\n    if(verts || frags) {\n        // Pre-process the shaders needed for all the passes.\n        const stateCache = { ...state };\n\n        (verts && (to.verts = verts));\n        (frags && (to.frags = frags));\n\n        each((pass, p) => {\n                stateCache.passNow = p;\n                (verts && (verts[p] = macroPass(stateCache, 'vert')+vert));\n                (frags && (frags[p] = macroPass(stateCache, 'frag')+frag));\n            },\n            passes);\n    }\n\n    to.pass = command(to.passCommand = {\n        // Uses the full-screen vertex shader state by default.\n        vert(_, props) {\n            const { passNow: p, step } = props;\n            const { vert: v = vert, verts: vs = verts } = step;\n\n            // Specify the shader type, for per-shader macro hooks.\n            return vs?.[p] ?? macroPass(props, 'vert')+v;\n        },\n        frag(_, props) {\n            const { passNow: p, step } = props;\n            const { frag: f = frag, frags: fs = frags } = step;\n\n            // Specify the shader type, for per-shader macro hooks.\n            return fs?.[p] ?? macroPass(props, 'frag')+f;\n        },\n        attributes: {\n            [pre+'position']: (_, { step: { positions: p = positions } }) => p\n        },\n        uniforms, count,\n        depth: { enable: false },\n        framebuffer: (_, { steps: ss, stepNow: s, passNow: p }) =>\n            wrapGet(s, ss)[p],\n        ...passCommand\n    });\n\n    to.run = (props = state) => {\n        const { steps, step, maps: { passes } } = props;\n        const stepNow = props.stepNow = (props.stepNow+1 || 0);\n        const { pass, onPass, onStep } = step;\n\n        onStep?.(props, wrapGet(stepNow, steps));\n\n        each((passProps, p) => {\n                props.passNow = p;\n                pass(onPass?.(props, passProps) ?? props);\n            },\n            passes);\n\n        return props;\n    };\n\n    return to;\n}\n\nexport default getStep;\n","/**\n * Wraps an index within a given length, so that indexes greater than the length\n * loop back past 0, and indexes less than 0 loop backward from the length.\n * Similar to the indexing behaviour of `Array.slice`.\n *\n * @param {number} i The index to wrap.\n * @param {number} l The length to wrap the index within.\n *\n * @returns {number} The index wrapped within the length.\n */\nexport const wrapIndex = (i, l) => ((i%l)+l)%l;\n\n/**\n * Gives the entry at a wrapped index of a given list, never exceeds its bounds.\n *\n * @see wrapIndex\n *\n * @param {number} i The index to wrap.\n * @param {array} a A list to index (array or array-like list).\n * @param {number} a.length The length property of the given list.\n *\n * @returns {*} The entry at the wrapped index of the given list.\n */\nexport const wrapGet = (i, a) => a[wrapIndex(i, a.length)];\n\nexport const wrap = { index: wrapIndex, get: wrapGet };\n\nexport default wrap;\n","/**\n * GPGPU GLSL preprocessor macros for each part of the state.\n *\n * Careful defining these, as each set of different macros will result in new\n * shaders and compilations, missing the cache here and in the rendering system.\n * So, as few unique macros as possible should be created for a given set of\n * inputs, for efficiency.\n *\n * @todo Allow passes into or across textures; separate data and texture shapes.\n */\n\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport { type } from '@epok.tech/is-type/type';\n\nimport { preDef, boundDef } from './const';\n\nexport const rgba = 'rgba';\nexport const cache = {};\n\n// Keys for each part of the macro handling process available to hooks.\nexport const hooks = {\n    // The full set of macros.\n    macroPass: '',\n    // Each part of the set of macros.\n    macroValues: 'values', macroOutput: 'output',\n    macroSamples: 'samples', macroSamplesTap: 'tap'\n};\n\n/**\n * Whether macros should be handled here; or the result of handling them by a\n * given named hook.\n * Allows macros of the given key to be handled by external named hooks, to\n * replace any part of the functionality here.\n *\n * @example\n *     // Macros to be handled here, the default.\n *     [hasMacros(), hasMacros({}), hasMacros({ macros: true })]]\n *         .every((m) => m === null);\n *\n *     // Macros to be handled here, with prefix `'pre_'` instead of `'preDef'`.\n *     hasMacros({ pre: 'pre_' }) === null;\n *\n *     // Macros not created.\n *     [hasMacros({ macros: false }), hasMacros({ macros: 0 })]\n *         .every((m) => m === '');\n *\n *     // Macros for 'a' handled by external static hook, not here.\n *     hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'a') === '//A\\n';\n *     // Macros for 'b' handled by external function hook, not here.\n *     hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'b') === '//B\\n';\n *     // Macros specified `on` a 'frag' not created.\n *     hasMacros({ macros: { frag: 0 } }, '', 'frag') === '';\n *     // Macros specified `on` a 'vert' handled here.\n *     hasMacros({ macros: { frag: 0, a_vert: 0 } }, '', 'vert') === null;\n *     // Macros for hook `'a'` specified `on` a 'vert' not created.\n *     hasMacros({ macros: { frag: 0, a_vert: 0 } }, 'a', 'vert') === '';\n *\n * @param {object} [props] The properties handling macros.\n * @param {string} [key] The name for which macros should be handled.\n * @param {string} [on=''] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [macros=props.macros] Whether and how\n *     GLSL preprocessor macros should be handled:\n *     - If it's false-y and non-nullish, no macros are handled here.\n *     - If it's a string, no macros are handled here as it's used instead.\n *     - If it's a function, it's passed the given `props`, `key`, `macros`, and\n *         the returned result is used.\n *     - If it's an object, any value at the given `key` is entered recursively,\n *         with the given `props`, `key`, and `macros[key]`.\n *     - Otherwise, returns `null` to indicate macros should be handled here.\n *\n * @returns {string|null|*} Either the result of the macros handled elsewhere,\n *     or `null` if macros should be handled here.\n */\nexport function hasMacros(props, key, on = '', macros = props?.macros) {\n    if((macros ?? true) === true) { return null; }\n    else if(!macros) { return ''; }\n\n    const t = type(macros);\n\n    return ((t === 'Function')? macros(props, key, on, macros)\n        : ((t === 'String')? macros\n        : (((macros instanceof Object) && (key in macros))?\n            hasMacros(props, key, on, macros[key])\n        : ((on)? hasMacros(props, ((key)? key+'_' : '')+on, '', macros)\n        :   null))));\n}\n\n/**\n * Generates an array-like declaration, as a GLSL syntax string compatible with\n * all versions.\n * Workaround for lack of `const` arrays in GLSL < 3.\n * Used as the base for the other GLSL version list types, ensuring a standard\n * basis while offering further language features where available.\n *\n * @example\n *     getGLSLListBase('float', 'list', [0, 1, 2], 'const'); // =>\n *     'const int list_l = 3; '+\n *     'const int list_0 = float(0); '+\n *     'const int list_1 = float(1); '+\n *     'const int list_2 = float(2);';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 1 array-like declaration string.\n */\nexport const getGLSLListBase = (type, name, a, qualify = '', init = type) =>\n    `const int ${name}_l = ${a.length};`+\n    reduce((s, v, i) =>\n            `${s} ${(qualify && qualify+' ')+type} ${name}_${i} = ${\n                init}(${v.join?.(', ') ?? v});`,\n        a, '');\n\n/**\n * Generates an array-like declaration, as a GLSL 1 syntax string.\n * Workaround for lack of `const` arrays in GLSL < 3.\n * Adds a lookup macro function; slow here, but standard.\n *\n * @example\n *     getGLSL1ListLike('float', 'list', [0, 1, 2], 'const'); // =>\n *     'const int list_l = 3; '+\n *     'const int list_0 = float(0); '+\n *     'const int list_1 = float(1); '+\n *     'const int list_2 = float(2);\\n'+\n *     '// `list_i` index macro (e.g: `list_i(0)`) may be slow, `+\n *         'prefer direct reference (e.g: `list_0`) where possible.\\n'+\n *     '#define list_i(i) ((i == 2)? list_2 : ((i == 1)? list_1 : list_0))\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 1 array-like declaration string.\n */\nexport const getGLSL1ListLike = (type, name, a, qualify = '', init = type) =>\n    getGLSLListBase(type, name, a, qualify, init)+'\\n'+\n    // @todo Would ideally use the concatenation macro, but can't in GLSL 1.\n    // `#define ${name}_i(i) ${name}_##i`;\n    `// \\`${name}_i\\` index macro (e.g: \\`${name}_i(0)\\`) may be slow, `+\n        `prefer direct reference (e.g: \\`${name}_0\\`) where possible.\\n`+\n    `#define ${name}_i(i) ${reduce((s, v, i) =>\n            ((i)? `((i == ${i})? ${name}_${i} : ${s})` : `${name}_${i}`),\n        a, '')}\\n`;\n\n/**\n * Generates an array declaration, as a GLSL 1 syntax string.\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @example\n *     getGLSL1ListArray('vec3', 'list', [[1, 0, 0], [0, 2, 0], [0, 0, 3]]);\n *     // =>\n *     'const int list_l = 3; '+\n *     'vec3 list_0 = vec3(1, 0, 0); '+\n *     'vec3 list_1 = vec3(0, 2, 0); '+\n *     'vec3 list_2 = vec3(0, 0, 3); '+\n *     'vec3 list[list_l]; '+\n *     'list[0] = list_0; '+\n *     'list[1] = list_1; '+\n *     'list[2] = list_2;\\n'+\n *     '#define list_i(i) list[i]\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 1 array declaration string.\n */\nexport const getGLSL1ListArray = (type, name, a, qualify = '', init = type) =>\n    getGLSLListBase(type, name, a, qualify, init)+' '+\n    (qualify && qualify+' ')+`${type} ${name}[${name}_l];`+\n    reduce((s, _, i) => `${s} ${name}[${i}] = ${name}_${i};`, a, '')+'\\n'+\n    `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Generates an array declaration, as a GLSL 3 syntax string.\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @example\n *     getGLSL3List('int', 'list', [0, 1, 2], 'const'); // =>\n *     'const int list_l = 3; '+\n *     'const int list_0 = int(0); '+\n *     'const int list_1 = int(1); '+\n *     'const int list_2 = int(2); '+\n *     'const int list[list_l] = int[list_l](list_0, list_1, list_2);\\n'+\n *     '#define list_i(i) list[i]\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 3 array declaration string.\n */\nexport const getGLSL3List = (type, name, a, qualify = '', init = type) =>\n    getGLSLListBase(type, name, a, qualify, init)+' '+\n    `${(qualify && qualify+' ')+type} ${name}[${name}_l] = ${init}[${name}_l](${\n        reduce((s, _, i) => (s && s+', ')+name+'_'+i, a, '')});\\n`+\n    `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Creates a GLSL definition of an array, and initialises it with the given\n * values, type, and variable name.\n * The initialisation is valid GLSL 1.0 or greater syntax; but is written with\n * escaped new-lines so it may be used in a single-line - e.g: for preprocessor\n * macros.\n * For a `qualify` of `const` on any `glsl` less than `3`, falls back to using\n * non-array variables with the index appended to `name`, since `const` arrays\n * aren't supported before GLSL 3.0.\n *\n * @example\n *     getGLSLList('int', 'test', [0, 1]); // =>\n *     'const int test_l = 2; '+\n *     'int test_0 = int(0); '+\n *     'int test_1 = int(1); '+\n *     'int test[test_l]; '+\n *     'test[0] = test_0; '+\n *     'test[1] = test_1;\\n'+\n *     '#define test_i(i) test[i]\\n';\n *\n *     getGLSLList('ivec2', 'vecs', [[1, 0], [0, 1]], 'const', 3); // =>\n *     'const int vecs_l = 2; '+\n *     'ivec2 vecs_0 = ivec2(1, 0); '+\n *     'ivec2 vecs_1 = ivec2(0, 1); '+\n *     'const ivec2 vecs[vecs_l] = ivec2[vecs_l](vecs_0, vecs_1);\\n'+\n *     '#define vecs_i(i) vecs[i]\\n';\n *\n *     getGLSLList('int', 'listLike', [0, 1], 'const', 1); // =>\n *     'const int listLike_l = 2; '+\n *     'const int listLike_0 = int(0); '+\n *     'const int listLike_1 = int(1);\\n'+\n *     '// `listLike_i` index macro (e.g: `listLike_i(0)`) may be slow, `+\n *         'prefer direct reference (e.g: `listLike_0`) where possible.\\n'+\n *     '#define listLike_i(i) ((i == 1)? listLike_1 : listLike_0)\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed (e.g: `const`).\n * @param {number} [glsl=1] The GLSL version to target, if specified.\n * @param {string} [init] A data-type initialiser.\n *\n * @returns {string} The GLSL (1 or 3) array or array-like declaration string.\n */\nexport const getGLSLList = (type, name, a, qualify = '', glsl = 1, init) =>\n    ((glsl >= 3)? getGLSL3List\n    : ((qualify.trim() === 'const')? getGLSL1ListLike\n    :   getGLSL1ListArray))(type, name, a, qualify, init);\n\n/**\n * Defines the values within textures per-step, as GLSL preprocessor macros.\n * These macros define mappings from values to their textures and channels.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     const maps = { values: [2, 4, 1], channelsMax: 4 };\n *\n *     // No optimisations - values not packed, single texture output per pass.\n *     const state = {\n *         steps: 2, maps: mapGroups({ ...maps, texturesMax: 1, packed: 0 })\n *     };\n *\n *     macroValues(state); // =>\n *     '#define texture_0 0\\n'+\n *     '#define channels_0 rg\\n'+\n *     '\\n'+\n *     '#define texture_1 1\\n'+\n *     '#define channels_1 rgba\\n'+\n *     '\\n'+\n *     '#define texture_2 2\\n'+\n *     '#define channels_2 r\\n'+\n *     '\\n'+\n *     '#define textures 3\\n'+\n *     '#define passes 3\\n'+\n *     '#define stepsPast 1\\n'+\n *     '#define steps 2\\n';\n *\n *     // Automatically packed values - values across fewer textures/passes.\n *     state.maps = mapGroups({ ...maps, texturesMax: 1 });\n *     state.size = { count: 2**5 };\n *     macroValues(state); // =>\n *     '#define texture_1 0\\n'+\n *     '#define channels_1 rgba\\n'+\n *     '\\n'+\n *     '#define texture_0 1\\n'+\n *     '#define channels_0 rg\\n'+\n *     '\\n'+\n *     '#define texture_2 1\\n'+\n *     '#define channels_2 b\\n'+\n *     '\\n'+\n *     '#define count 32\\n'+\n *     '#define textures 2\\n'+\n *     '#define passes 2\\n'+\n *     '#define stepsPast 1\\n'+\n *     '#define steps 2\\n';\n *\n *     // Can bind more texture outputs per pass - values across fewer passes.\n *     state.maps = mapGroups({ ...maps, texturesMax: 4 });\n *     macroValues(state); // =>\n *     '#define texture_1 0\\n'+\n *     '#define channels_1 rgba\\n'+\n *     '\\n'+\n *     '#define texture_0 1\\n'+\n *     '#define channels_0 rg\\n'+\n *     '\\n'+\n *     '#define texture_2 1\\n'+\n *     '#define channels_2 b\\n'+\n *     '\\n'+\n *     '#define count 32\\n'+\n *     '#define textures 2\\n'+\n *     '#define passes 1\\n'+\n *     '#define stepsPast 1\\n'+\n *     '#define steps 2\\n';\n *\n * @param {object} state Properties used to generate the macros. See `getState`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled\n *     or prefixed. See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step.\n * @param {array<number>} state.maps.values How values of each data item are\n *     grouped into textures. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures The groupings of values\n *     into textures. See `mapGroups`.\n * @param {array} state.maps.passes Passes drawn per-step. See `mapGroups`.\n * @param {array|number} state.steps States drawn across frames. See `getState`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *     unavailable as inputs.\n * @param {object} [state.size] Any size information about the GL resources.\n * @param {number} [state.size.count] The number of data entries per texture\n *     (the texture's area), if given. See `getState`.\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings from\n *     values to textures/channels.\n */\nexport function macroValues(state, on) {\n    const key = hooks.macroValues;\n    const hook = hasMacros(state, key, on);\n\n    if(hook !== null) { return hook; }\n\n    const { maps, steps, bound = boundDef, size, pre: n = preDef } = state;\n    const { values, textures, passes: { length: passesL } } = maps;\n    const stepsL = (steps.length ?? steps);\n    const count = size?.count;\n\n    const c = key+':'+\n        JSON.stringify({ n, bound, values, textures, stepsL, passesL, count });\n\n    return (cache[c] ??=\n        reduce((s, texture, t, _, i = 0) => reduce((s, v) => s+\n                    `#define ${n}texture_${v} ${t}\\n`+\n                    `#define ${n}channels_${v} ${\n                        rgba.slice(i, (i += values[v]))}\\n\\n`,\n                texture, s),\n            textures, '')+\n        ((count)? `#define count ${count}\\n` : '')+\n        `#define ${n}textures ${textures.length}\\n`+\n        `#define ${n}passes ${passesL}\\n`+\n        `#define ${n}stepsPast ${stepsL-bound}\\n`+\n        `#define ${n}steps ${stepsL}\\n`);\n}\n\n/**\n * Defines the outputs being drawn to per-pass, as GLSL preprocessor macros.\n * These macros define mappings from values to their outputs, if bound.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     const maps = { values: [2, 4, 1], channelsMax: 4 };\n *\n *     // No optimisations - values not packed, single texture output per pass.\n *     const state = {\n *         passNow: 0, maps: mapGroups({ ...maps, texturesMax: 1, packed: 0 })\n *     };\n *\n *     macroOutput(state); // =>\n *     '#define passNow 0\\n'+\n *     '\\n'+\n *     '#define bound_0 0\\n'+\n *     '#define attach_0 0\\n'+\n *     '#define output_0 gl_FragData[attach_0].rg\\n';\n *\n *     // Automatically packed values - values across fewer textures/passes.\n *     state.maps = mapGroups({ ...maps, texturesMax: 1 });\n *     macroOutput(state); // =>\n *     '#define passNow 0\\n'+\n *     '\\n'+\n *     '#define bound_1 0\\n'+\n *     '#define attach_1 0\\n'+\n *     '#define output_1 gl_FragData[attach_1].rgba\\n';\n *\n *     // Next pass in this step.\n *     ++state.passNow;\n *     macroOutput(state); // =>\n *     '#define passNow 1\\n'+\n *     '\\n'+\n *     '#define bound_0 1\\n'+\n *     '#define attach_0 0\\n'+\n *     '#define output_0 gl_FragData[attach_0].rg\\n'+\n *     '\\n'+\n *     '#define bound_2 1\\n'+\n *     '#define attach_2 0\\n'+\n *     '#define output_2 gl_FragData[attach_2].b\\n';\n *\n *     // Can bind more texture outputs per pass - values across fewer passes.\n *     state.maps = mapGroups({ ...maps, texturesMax: 4 });\n *     state.passNow = 0;\n *     macroOutput(state); // =>\n *     '#define passNow 0\\n'+\n *     '\\n'+\n *     '#define bound_1 0\\n'+\n *     '#define attach_1 0\\n'+\n *     '#define output_1 gl_FragData[attach_1].rgba\\n'+\n *     '\\n'+\n *     '#define bound_0 1\\n'+\n *     '#define attach_0 1\\n'+\n *     '#define output_0 gl_FragData[attach_0].rg\\n'+\n *     '\\n'+\n *     '#define bound_2 1\\n'+\n *     '#define attach_2 1\\n'+\n *     '#define output_2 gl_FragData[attach_2].b\\n';\n *\n * @param {object} state Properties for generating the macros. See `getState`:\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *     See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `pre` if not given.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<number>} state.maps.values How values of each data item may be\n *     grouped into textures across passes. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures The groupings of values\n *     into textures. See `mapGroups`.\n * @param {array<array<number>>} state.maps.passes The groupings of textures\n *     into passes. See `mapGroups`.\n *\n * @returns {string} The GLSL preprocessor macros for the pass's bound outputs.\n */\nexport function macroOutput(state, on) {\n    const key = hooks.macroOutput;\n    const hook = hasMacros(state, key, on);\n\n    if(hook !== null) { return hook; }\n\n    const { passNow: p, maps, pre: n = preDef } = state;\n    const { values, textures, passes } = maps;\n    const pass = passes[p];\n    const c = key+':'+JSON.stringify({ n, p, values, textures, passes });\n\n    return (cache[c] ??=\n        `#define ${n}passNow ${p}\\n`+\n        reduce((s, texture, bound, _, i = 0) => reduce((s, v) => `${s}\\n`+\n                    `#define ${n}bound_${v} ${texture}\\n`+\n                    `#define ${n}attach_${v} ${bound}\\n`+\n                    `#define ${n}output_${v} gl_FragData[${n}attach_${v}].${\n                        rgba.slice(i, (i += values[v]))}\\n`,\n                textures[texture], s),\n            pass, ''));\n}\n\n/**\n * Defines the texture samples/reads per-pass, as GLSL preprocessor macros.\n * The macros define the mapping between the values and the minimum texture\n * samples for the data they derive from. They're set up as function-like macros\n * that may be called from the shader to initialise the mappings arrays with a\n * given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see getGLSLList\n * @see [getMaps]{@link ./maps.js#getMaps}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     const values = [2, 4, 1];\n *     const derives = [2, , [[1, 0], true]];\n *     const maps = { values, derives, channelsMax: 4 };\n *\n *     // No optimisations - values not packed, single texture output per pass.\n *     const state = { maps: getMaps({ ...maps, texturesMax: 1, packed: 0 }) };\n *\n *     state.passNow = 0;\n *     macroSamples(state); // =>\n *     '#define useSamples '+\n *         'const int samples_l = 1; '+\n *         'const ivec2 samples_0 = ivec2(0, 2);\\n'+\n *     '// `samples_i` index macro (e.g: `samples_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `samples_0`) where possible.\\n'+\n *     '#define samples_i(i) samples_0\\n'+\n *     '\\n'+\n *     '#define tapSamples(states, uv, textures) '+\n *         'const int data_l = 1; '+\n *         'vec4 data_0 = vec4(texture2D(states[(0*int(textures))+2], uv)); '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = data_0;\\n'+\n *     '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define tapSamplesShift(states, uv, textures, byS, byT) '+\n *         'const int data_l = 1; '+\n *         'vec4 data_0 = vec4(texture2D(states['+\n *             '((samples_0.s+int(byS))*int(textures))+samples_0.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = data_0;\\n'+\n *     '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '\\n'+\n *     '#define useReads_0 '+\n *         'const int reads_0_l = 1; '+\n *         'const int reads_0_0 = int(0);\\n'+\n *     '// `reads_0_i` index macro (e.g: `reads_0_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `reads_0_0`) where possible.\\n'+\n *     '#define reads_0_i(i) reads_0_0\\n';\n *\n *     // Next pass in this step - no derives, no samples nor reads.\n *     ++state.passNow;\n *     macroSamples(state); // =>\n *     '';\n *\n *     // Next pass in this step.\n *     ++state.passNow;\n *     macroSamples(state); // =>\n *     '#define useSamples '+\n *         'const int samples_l = 4; '+\n *         'const ivec2 samples_0 = ivec2(1, 0); '+\n *         'const ivec2 samples_1 = ivec2(0, 0); '+\n *         'const ivec2 samples_2 = ivec2(0, 1); '+\n *         'const ivec2 samples_3 = ivec2(0, 2);\\n'+\n *     '// `samples_i` index macro (e.g: `samples_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `samples_0`) where possible.\\n'+\n *     '#define samples_i(i) ((i == 3)? samples_3 : ((i == 2)? samples_2 '+\n *         ': ((i == 1)? samples_1 : samples_0)))\\n'+\n *     '\\n'+\n *     '#define tapSamples(states, uv, textures) '+\n *         'const int data_l = 4; '+\n *         'vec4 data_0 = vec4(texture2D('+\n *             'states[((samples_0.s)*int(textures))+samples_0.t], uv)); '+\n *         'vec4 data_1 = vec4(texture2D('+\n *             'states[((samples_1.s)*int(textures))+samples_1.t], uv)); '+\n *         'vec4 data_2 = vec4(texture2D('+\n *             'states[((samples_2.s)*int(textures))+samples_2.t], uv)); '+\n *         'vec4 data_3 = vec4(texture2D('+\n *             'states[((samples_3.s)*int(textures))+samples_3.t], uv)); '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = data_0; '+\n *         'data[1] = data_1; '+\n *         'data[2] = data_2; '+\n *         'data[3] = data_3;\\n'+\n *     '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define tapSamplesShift(states, uv, textures, byS, byT) '+\n *         'const int data_l = 4; '+\n *         'vec4 data_0 = vec4(texture2D(states['+\n *             '((samples_0.s+int(byS))*int(textures))+samples_0.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data_1 = vec4(texture2D(states['+\n *             '((samples_1.s+int(byS))*int(textures))+samples_1.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data_2 = vec4(texture2D(states['+\n *             '((samples_2.s+int(byS))*int(textures))+samples_2.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data_3 = vec4(texture2D(states['+\n *             '((samples_3.s+int(byS))*int(textures))+samples_3.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = data_0; '+\n *         'data[1] = data_1; '+\n *         'data[2] = data_2; '+\n *         'data[3] = data_3;\\n'+\n *     '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '\\n'+\n *     '#define useReads_2 '+\n *         'const int reads_2_l = 4; '+\n *         'const int reads_2_0 = int(0); '+\n *         'const int reads_2_1 = int(1); '+\n *         'const int reads_2_2 = int(2); '+\n *         'const int reads_2_3 = int(3);\\n'+\n *     '// `reads_2_i` index macro (e.g: `reads_2_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `reads_2_0`) where possible.\\n'+\n *     '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *         ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n *     '\\n';\n *\n *     // Automatically packed values - values across fewer textures/passes.\n *     // Can bind more texture outputs per pass - values across fewer passes.\n *     // Also fewer samples where values share derives or textures.\n *     state.maps = mapGroups({ ...maps, texturesMax: 4 });\n *     state.passNow = 0;\n *     macroSamples(state); // =>\n *     '#define useSamples '+\n *         'const int samples_l = 3; '+\n *         'const ivec2 samples_0 = ivec2(0, 1); '+\n *         'const ivec2 samples_1 = ivec2(1, 1); '+\n *         'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n *     '// `samples_i` index macro (e.g: `samples_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `samples_0`) where possible.\\n'+\n *     '#define samples_i(i) '+\n *         '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n *     '\\n'+\n *     '#define tapSamples(states, uv, textures) '+\n *         'const int data_l = 3; '+\n *         'vec4 data_0 = vec4(texture2D('+\n *             'states[((samples_0.s)*int(textures))+samples_0.t], uv)); '+\n *         'vec4 data_1 = vec4(texture2D('+\n *             'states[((samples_1.s)*int(textures))+samples_1.t], uv)); '+\n *         'vec4 data_2 = vec4(texture2D('+\n *             'states[((samples_2.s)*int(textures))+samples_2.t], uv)); '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = data_0; '+\n *         'data[1] = data_1; '+\n *         'data[2] = data_2;\\n'+\n *     '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define tapSamplesShift(states, uv, textures, byS, byT) '+\n *         'const int data_l = 3; '+\n *         'vec4 data_0 = vec4(texture2D(states['+\n *             '((samples_0.s+int(byS))*int(textures))+samples_0.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data_1 = vec4(texture2D(states['+\n *             '((samples_1.s+int(byS))*int(textures))+samples_1.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data_2 = vec4(texture2D(states['+\n *             '((samples_2.s+int(byS))*int(textures))+samples_2.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = data_0; '+\n *         'data[1] = data_1; '+\n *         'data[2] = data_2;\\n'+\n *     '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '\\n'+\n *     '#define useReads_0 '+\n *         'const int reads_0_l = 1; '+\n *         'const int reads_0_0 = int(0);\\n'+\n *     '// `reads_0_i` index macro (e.g: `reads_0_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `reads_0_0`) where possible.\\n'+\n *     '#define reads_0_i(i) reads_0_0\\n'+\n *     '\\n'+\n *     '#define useReads_2 '+\n *         'const int reads_2_l = 4; '+\n *         'const int reads_2_0 = int(1); '+\n *         'const int reads_2_1 = int(0); '+\n *         'const int reads_2_2 = int(2); '+\n *         'const int reads_2_3 = int(0);\\n'+\n *     '// `reads_2_i` index macro (e.g: `reads_2_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `reads_2_0`) where possible.\\n'+\n *     '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *         ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n *     '\\n';\n *\n * @param {object} state Properties used to generate the macros. See `getState`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *     See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps  How `values` are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<array<array<number>>>} [state.maps.samples] The minimal set of\n *     texture samples to use. See `mapSamples`.\n * @param {array<array<array<number>>>} [state.maps.reads] The mappings from\n *     values to the corresponding `state.samples`. See `mapSamples`.\n * @param {number} [state.glsl=1] The GLSL language version. See `getGLSLList`.\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings for\n *     samples and reads, for each value.\n */\nexport function macroSamples(state, on) {\n    const key = hooks.macroSamples;\n    const hook = hasMacros(state, key, on);\n\n    if(hook !== null) { return hook; }\n\n    const { passNow: p = 0, maps, glsl, pre: n = preDef } = state;\n    const { samples, reads } = maps;\n    const passSamples = samples?.[p];\n    const passReads = reads?.[p];\n    // Whether to generate GLSL preprocessor macros for the lookup logic.\n    const tap = hasMacros(state, hooks.macroSamplesTap, on);\n\n    const c = key+':'+\n        JSON.stringify({ n, p, passSamples, passReads, glsl, tap });\n\n    return (cache[c] ??=\n        ((!passSamples)? ''\n        :   `#define ${n}useSamples ${\n                getGLSLList('ivec2', n+'samples', passSamples, 'const', glsl)\n            }\\n`+\n            // The texture-sampling logic.\n            (tap ??\n                `#define ${n}tapSamples(states, uv, textures) `+\n                    // 2D-to-1D indexing, as textures are a flat array.\n                    getGLSLList('vec4', n+'data',\n                            map(([s, t], i) => 'texture2D(states['+\n                                    // Avoids D3D error \"sampler array index\n                                    // must be a literal expression\":\n                                    `(${s})*int(textures)+${t}`+\n                                    // Causes the above error on D3D:\n                                    // `(${n}samples_${i}.s*int(textures))+`+\n                                    // `${n}samples_${i}.t`+\n                                '], uv)',\n                            passSamples),\n                        '', glsl)+'\\n'+\n                // Data may also be sampled by adding step/texture lookup shift.\n                `#define ${n}tapSamplesShift(states, uv, textures, byS, byT) `+\n                    // 2D-to-1D indexing, as textures are a flat array.\n                    getGLSLList('vec4', n+'data',\n                            map(([s, t], i) => 'texture2D(states['+\n                                    // Avoids D3D error \"sampler array index\n                                    // must be a literal expression\":\n                                    `((${s}+int(byS))*int(textures))+`+\n                                    `${t}+int(byT)`+\n                                    // Causes the above error on D3D:\n                                    // `((${n}samples_${i}.s+int(byS))*`+\n                                    //     'int(textures))+'+\n                                    // `${n}samples_${i}.t+int(byT)`+\n                                '], uv)',\n                            passSamples),\n                        '', glsl)+'\\n'+\n                '\\n'))+\n        ((!passReads)? ''\n        :   reduce((s, reads, v) =>\n                    `${s}#define ${n}useReads_${v} ${\n                        getGLSLList('int', n+'reads_'+v, reads, 'const', glsl)\n                    }\\n`,\n                passReads, '')));\n}\n\n/**\n * Defines all GLSL preprocessor macro values, texture samples, and outputs for\n * the active pass.\n * The macros define the mapping between the active values, their textures and\n * channels, bound outputs, and other macros useful for a draw pass.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see macroValues\n * @see macroOutput\n * @see macroSamples\n * @see [getMaps]{@link ./maps.js#getMaps}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     const values = [2, 4, 1];\n *     const derives = [2, , [[1, 0], true]];\n *\n *     // Automatically packed values - values across fewer textures/passes.\n *     // Only a single texture output per pass - values across more passes.\n *     const state = {\n *         passNow: 0, steps: 2, size: { count: 2**5 }, pre: 'gpgpu_',\n *         maps: getMaps({ values, derives, channelsMax: 4, texturesMax: 1 })\n *     };\n *\n *     macroPass(state); // =>\n *     '#define gpgpu_texture_1 0\\n'+\n *     '#define gpgpu_channels_1 rgba\\n'+\n *     '\\n'+\n *     '#define gpgpu_texture_0 1\\n'+\n *     '#define gpgpu_channels_0 rg\\n'+\n *     '\\n'+\n *     '#define gpgpu_texture_2 1\\n'+\n *     '#define gpgpu_channels_2 b\\n'+\n *     '\\n'+\n *     '#define count 32\\n'+\n *     '#define gpgpu_textures 2\\n'+\n *     '#define gpgpu_passes 2\\n'+\n *     '#define gpgpu_stepsPast 1\\n'+\n *     '#define gpgpu_steps 2\\n'+\n *     '\\n'+\n *     '#define gpgpu_passNow 0\\n'+\n *     '\\n'+\n *     '#define gpgpu_bound_1 0\\n'+\n *     '#define gpgpu_attach_1 0\\n'+\n *     '#define gpgpu_output_1 gl_FragData[gpgpu_attach_1].rgba\\n'+\n *     '\\n';\n *\n *     // Next pass and extra step.\n *     ++state.steps;\n *     ++state.passNow;\n *     state.pre = '';\n *     macroPass(state); // =>\n *     '#define texture_1 0\\n'+\n *     '#define channels_1 rgba\\n'+\n *     '\\n'+\n *     '#define texture_0 1\\n'+\n *     '#define channels_0 rg\\n'+\n *     '\\n'+\n *     '#define texture_2 1\\n'+\n *     '#define channels_2 b\\n'+\n *     '\\n'+\n *     '#define count 32\\n'+\n *     '#define textures 2\\n'+\n *     '#define passes 2\\n'+\n *     '#define stepsPast 2\\n'+\n *     '#define steps 3\\n'+\n *     '\\n'+\n *     '#define passNow 1\\n'+\n *     '\\n'+\n *     '#define bound_0 1\\n'+\n *     '#define attach_0 0\\n'+\n *     '#define output_0 gl_FragData[attach_0].rg\\n'+\n *     '\\n'+\n *     '#define bound_2 1\\n'+\n *     '#define attach_2 0\\n'+\n *     '#define output_2 gl_FragData[attach_2].b\\n'+\n *     '\\n'+\n *     '#define useSamples '+\n *         'const int samples_l = 3; '+\n *         'const ivec2 samples_0 = ivec2(0, 1); '+\n *         'const ivec2 samples_1 = ivec2(1, 1); '+\n *         'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n *     '// `samples_i` index macro (e.g: `samples_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `samples_0`) where possible.\\n'+\n *     '#define samples_i(i) '+\n *         '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n *     '\\n'+\n *     '#define tapSamples(states, uv, textures) '+\n *         'const int data_l = 3; '+\n *         'vec4 data_0 = vec4(texture2D('+\n *             'states[((samples_0.s)*int(textures))+samples_0.t], uv)); '+\n *         'vec4 data_1 = vec4(texture2D('+\n *             'states[((samples_1.s)*int(textures))+samples_1.t], uv)); '+\n *         'vec4 data_2 = vec4(texture2D('+\n *             'states[((samples_2.s)*int(textures))+samples_2.t], uv)); '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = data_0; '+\n *         'data[1] = data_1; '+\n *         'data[2] = data_2;\\n'+\n *     '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define tapSamplesShift(states, uv, textures, byS, byT) '+\n *         'const int data_l = 3; '+\n *         'vec4 data_0 = vec4(texture2D(states['+\n *             '((samples_0.s+int(byS))*int(textures))+samples_0.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data_1 = vec4(texture2D(states['+\n *             '((samples_1.s+int(byS))*int(textures))+samples_1.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data_2 = vec4(texture2D(states['+\n *             '((samples_2.s+int(byS))*int(textures))+samples_2.t+int(byT)'+\n *             '], uv)); '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = data_0; '+\n *         'data[1] = data_1; '+\n *         'data[2] = data_2;\\n'+\n *     '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '\\n'+\n *     '#define useReads_0 '+\n *         'const int reads_0_l = 1; '+\n *         'const int reads_0_0 = int(0);\\n'+\n *     '// `reads_0_i` index macro (e.g: `reads_0_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `reads_0_0`) where possible.\\n'+\n *     '#define reads_0_i(i) reads_0_0\\n'+\n *     '\\n'+\n *     '#define useReads_2 '+\n *         'const int reads_2_l = 4; '+\n *         'const int reads_2_0 = int(1); '+\n *         'const int reads_2_1 = int(0); '+\n *         'const int reads_2_2 = int(2); '+\n *         'const int reads_2_3 = int(0);\\n'+\n *     '// `reads_2_i` index macro (e.g: `reads_2_i(0)`) may be slow, '+\n *         'prefer direct reference (e.g: `reads_2_0`) where possible.\\n'+\n *     '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *         ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n *     '\\n';\n *\n * @param {object} state Properties for generating the macros. See `getState`\n *     and `mapGroups`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings for\n *     values, textures, channels, bound outputs of the active pass, etc. See\n *     `macroValues`, `macroOutput`, and `macroSamples`.\n */\nexport const macroPass = (state, on) =>\n    (hasMacros(state, hooks.macroPass, on) ??\n        macroValues(state)+'\\n'+macroOutput(state)+'\\n'+macroSamples(state));\n\nexport default macroPass;\n","const [{ length: start}, { length: end }] = '[object {type}]'.split('{type}');\n\n/**\n * Gives the type of a given input.\n *\n * @see https://stackoverflow.com/a/17772086/716898\n *\n * @param {*} x Any input to test.\n *\n * @returns {string} The type of `x`.\n */\nexport const type = (x) => toString.call(x).slice(start, -end);\n\nexport default type;\n","/**\n * GPGPU inputs (uniforms, attributes, indexes, etc).\n */\n\nimport { setC2 } from '@thi.ng/vectors/setc';\nimport map from '@epok.tech/fn-lists/map';\nimport range from '@epok.tech/fn-lists/range';\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap-index';\n\nimport { boundDef, preDef } from './const';\n\n/**\n * Uniform inputs for GPGPU calls, such as in `getStep`.\n * Uniforms are defined as callback hooks called at each pass, using properties\n * from given global context and local state objects, allowing different APIs or\n * author-defined hooks.\n *\n * @example\n *     const state = { steps: 2, maps: getMaps({ values: [1, 2, 3] };\n *\n *     getUniforms(state); // =>\n *     {\n *         stepNow: (context, state) => {},\n *         dataShape: (context, state) => {},\n *         viewShape: (context, state) => {},\n *         // Data textures for the 1st step ago not bound as an output.\n *         'states[0]': (context, state) => {},\n *         'states[1]': (context, state) => {}\n *     };\n *\n *     getUniforms({ ...state, steps: 3 }); // =>\n *     {\n *         stepNow: (context, state) => {},\n *         dataShape: (context, state) => {},\n *         viewShape: (context, state) => {},\n *         // Data textures for the 1st step ago not bound as an output.\n *         'states[0]': (context, state) => {},\n *         'states[1]': (context, state) => {}\n *         // Data textures for the 2nd step ago not bound as an output.\n *         'states[2]': (context, state) => {},\n *         'states[3]': (context, state) => {}\n *     };\n *\n * @see [getStep]{@link ./step.js#getStep}\n * @see [getState]{@link ./state.js#getState}\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n *\n * @param {object} state The GPGPU state to use. See `getState` and `mapGroups`.\n * @param {array|number} state.steps The array of steps, or number of steps.\n *     See `getState`.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures How values are grouped into\n *     textures. See `mapGroups`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *     unavailable as input; for platforms forbidding read/write of same buffer.\n * @param {string} [state.pre=preDef] Namespace prefix; `preDef` if not given.\n * @param {object} [to=(state.uniforms ?? {})] The object to contain the\n *     uniforms; `state.uniforms` or a new object if not given.\n *\n * @returns {object<function>} `to` The uniform hooks for the given `state`.\n *     Each is a function called on each pass, taking 2 arguments:\n *     - Object of general/global properties; containing e.g: `viewportWidth`.\n *     - Object of local properties; e.g: the given `state`.\n */\nexport function getUniforms(state, to = (state.uniforms ?? {})) {\n    const {\n            bound = boundDef, pre: n = preDef, steps,\n            steps: { length: stepsL = steps }, maps: { textures: textureMap }\n        } = state;\n\n    const texturesL = textureMap.length;\n    const cache = { viewShape: [] };\n\n    to[n+'stepNow'] = (_, { stepNow: s }) => s;\n    to[n+'dataShape'] = (_, { size: { shape: s } }) => s;\n\n    to[n+'viewShape'] = ({ viewportWidth: w, viewportHeight: h }) =>\n        setC2(cache.viewShape, w, h);\n\n    /**\n     * Set up the ago steps, as the number of steps ago from the currently\n     * bound step `[0,... stepsL-1-bound]`.\n     */\n    const addTexture = (ago, texture) =>\n        // Hook to pull a given texture from the latest `props`.\n        to[`${n}states[${(ago*texturesL)+texture}]`] =\n            (_, { stepNow: s, bound: b = bound, textures }) =>\n                wrap.get(s-b-ago, textures)[texture].texture;\n\n    // Flatten all input textures, as uniforms are stored in flat arrays.\n    for(let ago = 0, pl = stepsL-bound; ago < pl; ++ago) {\n        each((_, texture) => addTexture(ago, texture), textureMap);\n    }\n\n    return to;\n}\n\n/**\n * Gives the number of indexes to draw a full state, for various parameters.\n *\n * @see [getState]{@link ./state.js#getState}\n *\n * @param {object|array<number>|number} size Size/type information of data\n *     resources, or a shape array of width and height numbers, or width if\n *     height is given as a second parameter.\n * @param {number} [size.count] The number of entries of each data-texture.\n * @param {array<number>} [size] The width/height of each data-texture.\n * @param {number} [size.width] The width of each data-texture.\n * @param {number} [size.height] The height of each data-texture.\n * @param {number} [size.x] The width of each data-texture.\n * @param {number} [size.y] The height of each data-texture.\n * @param {number} [size.shape] The shape of each data-texture.\n * @param {array<number>} [size.shape] The width/height of each data-texture.\n *\n * @param {number} [height] The height of each data-texture.\n *\n * @returns {number} The number of indexes needed to draw a full state; each\n *     entry of a data-texture (its area, equivalent to `state.size.count`).\n */\nexport const countDrawIndexes = (size, height) => (size.count ??\n    ((size[0] ?? size.width ?? size.x ?? size.shape?.[0] ?? size)*\n        (size[1] ?? size.height ?? size.y ?? size.shape?.[1] ?? height ?? 1)));\n\n/**\n * Gives the array of indexes needed to draw a full state.\n *\n * @param {number|object<number>} size The number of entries in each\n *     data-texture; or an object of size/type information on data resources.\n *\n * @returns {array<number>} An array of indexes for drawing all data-texture\n *     entries, numbered `0` to `size-1`.\n */\nexport const getDrawIndexes = (size) => map((_, i) => i,\n    range(Number.isInteger(size)? size : countDrawIndexes(size)), 0);\n","export const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);\nexport const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);\nexport const setC4 = (out, x, y, z, w) => (!out && (out = []),\n    (out[0] = x),\n    (out[1] = y),\n    (out[2] = z),\n    (out[3] = w),\n    out);\nexport const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),\n    (out[0] = a),\n    (out[1] = b),\n    (out[2] = c),\n    (out[3] = d),\n    (out[4] = e),\n    (out[5] = f),\n    out);\nexport const setC = (out, ...xs) => {\n    !out && (out = []);\n    for (let i = 0, n = xs.length; i < n; i++) {\n        out[i] = xs[i];\n    }\n    return out;\n};\n","/**\n * How many vertexes for pairs of line segments linking each entry's states,\n * using `gl.LINES`.\n * If fewer than 2 states are given, lines can't be drawn, assumes `gl.POINTS`.\n * Every pair of indexes is a line-segment connecting each state to its past\n * state, making one continuous line back through steps using `gl.LINES`;\n * iterating each start index and its past index.\n * Corresponds to the indexing logic in the `indexPairs` GLSL function.\n *\n * @see [readme]{@link ./readme.md}\n * @see `gl.LINES` at https://webglfundamentals.org/webgl/lessons/webgl-points-lines-triangles.html\n * @see [indexPairs]{@link ./index.glsl#indexPairs}\n *\n * @param {number} states The number of steps of state to link by pairs of line\n *     segments.\n *\n * @returns {number} The number of points needed to link all steps of state\n *     by pairs of line segments. May be multiplied with the number of entries\n *     in each step.\n */\nexport const indexPairs = (states) => Math.max(1, (states-1)*2);\n\nexport default indexPairs;\n","/**\n * The update step for a GPGPU particle simulation.\n * Requires setup with preprocessor macros - see `macroPass`.\n * Executed in one or more passes; each chunk depending on a `gpgpu` macro may\n * be combined with others into one pass or separated into its own pass; `gpgpu`\n * preprocessor macros control the combination according to which `values` are\n * currently bound for `output` to the next `state`.\n *\n * @see [getStep]{@link ../../step.js#getStep}\n * @see [macroPass]{@link ../../macros.js#macroPass}\n */\n\n#ifdef GL_EXT_draw_buffers\n    #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\n// Setting up the macros and aliases.\n// Note that these `texture_i`/`channels_i`/`reads_i_j` indexes correspond to\n// the value at that index in the `values`/`derives` arrays provided to `gpgpu`;\n// they are defined here to match the arrangement in `./index.js`.\n\n// The texture channels each of the `values` is stored in.\n#define positionChannels channels_0\n#define motionChannels channels_1\n#define lifeChannels channels_2\n\n// Set up sampling logic.\nuseSamples\n\n// Set up minimal texture reads logic; only read what a value with a currently\n// bound output `derives` from other `values` for its next state.\n// See `derives` for indexing `reads_${bound value index}_${derives index}`.\n#ifdef output_0\n    #define positionOutput output_0\n    useReads_0\n    #define positionReadPosition0 reads_0_0\n    #define positionReadPosition1 reads_0_1\n    #define positionReadMotion reads_0_2\n    #define positionReadLife reads_0_3\n#endif\n#ifdef output_1\n    #define motionOutput output_1\n    useReads_1\n    #define motionReadMotion reads_1_0\n    #define motionReadLife reads_1_1\n#endif\n#ifdef output_2\n    #define lifeOutput output_2\n    useReads_2\n    #define lifeReadLifeLast reads_2_0\n    #define lifeReadLife1 reads_2_1\n#endif\n\n// The main shader.\n\n// States from `gl-gpgpu`.\nuniform sampler2D states[stepsPast*textures];\nuniform vec2 dataShape;\n// Custom inputs for this demo.\nuniform float dt0;\nuniform float dt1;\nuniform float loop;\nuniform vec2 lifetime;\nuniform float useVerlet;\nuniform vec3 g;\nuniform vec3 source;\nuniform float spout;\n// uniform vec3 drag;\n\nvarying vec2 uv;\n\n#pragma glslify: map = require(glsl-map)\n#pragma glslify: le = require(glsl-conditionals/when_le)\n\n#ifdef positionOutput\n    // @todo Try Velocity Verlet integration.\n    #pragma glslify: verlet = require(@epok.tech/glsl-verlet/p-p-a)\n#endif\n\n#ifdef motionOutput\n    #pragma glslify: tau = require(glsl-constants/TWO_PI)\n\n    // @see https://observablehq.com/@rreusser/equally-distributing-points-on-a-sphere\n    vec3 randomOnSphere(float randomAngle, float randomDepth) {\n        float a = randomAngle*tau;\n        float u = (randomDepth*2.0)-1.0;\n\n        return vec3(sqrt(1.0-(u*u))*vec2(cos(a), sin(a)), u);\n    }\n#endif\n\n#if defined(motionOutput) || defined(lifeOutput)\n    #pragma glslify: random = require(glsl-random)\n#endif\n\n// Drag acceleration, constrained within the given velocity.\n// @see https://en.wikipedia.org/wiki/Verlet_integration#Algorithmic_representation\n// vec3 dragAcc(vec3 velocity, vec3 drag) {\n//     vec3 l = abs(velocity);\n\n//     return clamp(-0.5*sign(velocity)*dot(velocity, velocity)*drag, -l, l);\n// }\n\nvoid main() {\n    // Sample the desired state values - creates the `data` array.\n    tapSamples(states, uv, textures)\n\n    // Read values.\n\n    #ifdef positionOutput\n        vec3 position0 = data[positionReadPosition0].positionChannels;\n        vec3 position1 = data[positionReadPosition1].positionChannels;\n    #endif\n\n    // If reads all map to the same value sample, any of them will do.\n    #if defined(positionOutput) || defined(motionOutput)\n        #if defined(positionOutput)\n            #define readMotion positionReadMotion\n        #elif defined(motionOutput)\n            #define readMotion motionReadMotion\n        #endif\n\n        vec3 motion = data[readMotion].motionChannels;\n    #endif\n\n    // If reads all map to the same value sample, any of them will do.\n    #if defined(positionOutput)\n        #define readLife positionReadLife\n    #elif defined(lifeOutput)\n        #define readLife lifeReadLife\n    #elif defined(motionOutput)\n        #define readLife motionReadLife\n    #endif\n\n    float life = data[readLife].lifeChannels;\n\n    #ifdef lifeOutput\n        float lifeLast = data[lifeReadLifeLast].lifeChannels;\n    #endif\n\n    // Update and output values.\n    // Note that the update/output logic components within each `#if` macro\n    // block from `gpgpu` are independent modules, as the `gpgpu` macros\n    // determine whether they're executed across one or more passes - they could\n    // also be coded in separate files called from here, however for brevity and\n    // easy access to shared variables they're coded inline.\n\n    // Whether the particle is ready to respawn.\n    float spawn = le(life, 0.0);\n\n    #if defined(positionOutput) || defined(motionOutput)\n        // Workaround for switching Euler/Verlet; interpret `motion` data as\n        // acceleration/velocity, respectively.\n        vec3 velocity = motion;\n        vec3 acceleration = motion;\n    #endif\n\n    #ifdef positionOutput\n        // Use either Euler integration...\n        vec3 positionTo = mix(position1+(velocity*dt1),\n            // ... or Verlet integration...\n            verlet(position0, position1, acceleration, dt0, dt1),\n            // ... according to which is currently active.\n            useVerlet);\n\n        positionOutput = mix(positionTo, source, spawn);\n    #endif\n    #ifdef motionOutput\n        // The new acceleration is just constant acceleration due to gravity.\n        acceleration = g;\n        // Can also combine other forces, e.g: drag.\n        // acceleration = g+\n        //     dragAcc(mix(velocity, acceleration*dt1, useVerlet), drag);\n\n        vec3 motionTo = mix(velocity+(acceleration*dt1), acceleration,\n            useVerlet);\n\n        vec3 motionNew = spout*random(loop-(uv*dt0))*\n            randomOnSphere(random((uv+loop)/dt1), random((uv-loop)*dt0));\n\n        motionOutput = mix(motionTo, motionNew, spawn);\n    #endif\n    #ifdef lifeOutput\n        float lifeTo = max(life-dt1, 0.0);\n        float lifeNew = map(random(uv*loop), 0.0, 1.0, lifetime.s, lifetime.t);\n        // Whether the oldest of this trail has faded.\n        float faded = le(lifeLast, 0.0);\n\n        // Only spawn life once the oldest step reaches the end of its lifetime\n        // (past and current life are both 0).\n        lifeOutput = mix(lifeTo, lifeNew, spawn*faded);\n    #endif\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see [macroPass]{@link ../../macros.js#macroPass}\n * @see [macroValues]{@link ../../macros.js#macroValues}\n */\n\nprecision highp float;\n\n// The texture channels each of the `values` is stored in.\n#define positionChannels channels_0\n#define motionChannels channels_1\n#define lifeChannels channels_2\n// Set up sampling logic.\nuseSamples\n// Only the first value derives from all values, giving these minimal `reads`.\nuseReads_0\n// All `derives` here are in one pass (`0`), and in the same order as `values`.\n// See `values` for indexing `reads_0_${derives index == values index}`.\n#define readPosition1 reads_0_0\n#define readMotion reads_0_1\n#define readLife reads_0_2\n#define readPosition0 reads_0_3\n\nattribute float index;\n\nuniform sampler2D states[stepsPast*textures];\nuniform vec2 dataShape;\nuniform vec2 viewShape;\nuniform float pointSize;\nuniform float dt;\nuniform vec2 lifetime;\nuniform float scale;\nuniform vec2 pace;\nuniform float useVerlet;\n\nvarying vec4 color;\n\n#pragma glslify: aspect = require(@epok.tech/glsl-aspect/contain)\n#pragma glslify: gt = require(glsl-conditionals/when_gt)\n\n#pragma glslify: indexUV = require(../../sample/index-uv)\n\n#if stepsPast > 1\n    // If multiple steps are given, shift into past steps.\n    #pragma glslify: indexPairs = require(../../index-pairs)\n#endif\n\nvoid main() {\n    #if stepsPast > 1\n        // If multiple steps are given, find past step and entry.\n        vec2 stepEntry = indexPairs(index, stepsPast);\n        float stepPast = stepEntry.s;\n        float entry = stepEntry.t;\n    #else\n        // If only 1 step is given, past step and entry are known.\n        float stepPast = 0.0;\n        float entry = index;\n    #endif\n\n    // Turn the 1D index into a 2D texture UV; offset to sample at the texel\n    // center and avoid errors.\n    vec2 st = indexUV(entry+0.5, dataShape);\n\n    // Can also use the `reads` logic to take the minimum possible samples here.\n    // Sample the desired state values - creates the `data` array.\n    #if stepsPast > 1\n        // Shift into past steps.\n        tapSamplesShift(states, st, textures, stepPast, 0)\n    #else\n        // No past steps, no shift.\n        tapSamples(states, st, textures)\n    #endif\n\n    // Read values.\n    vec3 position0 = data[readPosition0].positionChannels;\n    vec3 position1 = data[readPosition1].positionChannels;\n    vec3 velocity = data[readMotion].motionChannels;\n    float life = data[readLife].lifeChannels;\n\n    #if stepsPast > 1\n        float ratioNow = 1.0-(stepPast/float(stepsPast-1));\n    #else\n        float ratioNow = 1.0;\n    #endif\n\n    float alive = gt(life, 0.0);\n    vec2 ar = aspect(viewShape);\n    vec4 vertex = vec4(position1.xy*ar*scale, position1.z*scale, 1.0);\n    float depth = clamp(1.0-(vertex.z/vertex.w), 0.1, 1.0);\n\n    gl_Position = alive*vertex;\n    gl_PointSize = alive*pointSize*depth*mix(0.1, 1.0, ratioNow);\n\n    float a = pow(life/lifetime.t, 0.3)*pow(ratioNow, 0.3);\n    float speed = length(mix(velocity, position1-position0, useVerlet)/dt);\n\n    color = a*vec4(mix(0.2, 1.0, ratioNow), mix(0.2, 1.0, entry/float(count)),\n        clamp(pow(speed*pace.s, pace.t), 0.0, 1.0), a);\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see [macroPass]{@link ../../macros.js#macroPass}\n * @see [macroValues]{@link ../../macros.js#macroValues}\n */\n\nprecision highp float;\n\nvarying vec4 color;\n\nvoid main() { gl_FragColor = color; }\n"],"names":["ref","ref1","self","gpgpu","$92xBu","macroPass","$7BlYt","getMaps","$bVJ8f","getUniforms","$ijOPy","getDrawIndexes","indexPairs","$eMLc4","default","extend","halfFloat","$gz2w5","extensionsHalfFloat","float","extensionsFloat","other","optionalExtensions","regl","$parcel$interopDefault","$di2cr","pixelRatio","Math","max","floor","devicePixelRatio","extensions","required","optional","console","group","log","$5uoMq","o","e","hasExtension","groupEnd","canvas","document","querySelector","classList","add","valuesMap","Map","set","values","valuesIndex","forEach","v","k","push","maxTextureUnits","maxTextureSize","lineWidthDims","pointSizeDims","limits","steps","s","scale","log2","niceScale","$dKg8J","getQuery","search","location","URLSearchParams","setQuery","entries","query","$4PyNq","delete","query1","parseInt","get","stepsPast","scale1","usePoints","has","timestepDef","timestep","parseFloat","flat","href","derives","position","motion","life","canVerlet","cache","state1","props","timer","$3XJsI","step","dts","$1Nz0O","now","rate","loop","useVerlet","lifetime","g","source","spout","bound","maps","type","every","macros","vert","frag","$7W3SR","frags","uniforms","dt","_","r","dt0","dt1","time","t","l","sin","PI","prop","u","$kHTr6","i","ss","state","packed","textures","valueToTexture","drawCount","size","count","drawIndexes","drawState","drawProps","pace","output","texturesMax","drawCommand","$2nMxP","$3q41T","attributes","index","pointSize","lineWidth","depth","enable","blend","func","src","dst","primitive","draw","clearView","color","frame","stepTime","run","stepNow","clear","addEventListener","stopPropagation","preventDefault","clientX","x","clientY","y","min","innerWidth","innerHeight","module","hot","accept","call","reload","exports","value","$2e2a25a52591e6ab$export$be3f796aed065412","diff","pause","$2e2a25a52591e6ab$export$7548f4bc1b09ff22","$2e2a25a52591e6ab$export$85b884786400d38f","$2e2a25a52591e6ab$export$eb8a9b7a1ebec59a","Date","$2e2a25a52591e6ab$export$2e2bcd8739ae039","out","t0","n","_step","t1","isNaN","$3ff2f9e4ab7bdeff$var$r","Array","prototype","reduce","$3ff2f9e4ab7bdeff$export$533b26079ad0b4b","f","a","to","undefined","$3ff2f9e4ab7bdeff$export$2e2bcd8739ae039","$f132d33d57f1bee8$export$2e2bcd8739ae039","to1","$3846eaa2ea51626f$var$e","$3846eaa2ea51626f$export$2e2bcd8739ae039","$14f586be6fb44fe8$export$2e2bcd8739ae039","start","end","fill","_maps","$694e5df7a7173951$export$a8489f67fe30ef76","api","_limits","maxDrawbuffers","glsl","match","_texturesMax","$j6bxN","getState","$a93za","getStep","_cache","_reads","_ref","$8af806db8832338e$export$69a3209f1a06c04d","$8af806db8832338e$export$5ca26c99531348ec","channelsMax","channelsMaxDef","error","$8af806db8832338e$export$9d1d9285bd6d8c57","length","channels","fitIndex","fitSize","Infinity","i1","fit","pack","$8af806db8832338e$export$574963e692b662ec","to2","passes","reads","all","getAddSample","pass","derive","d","texture","Number","isFinite","findIndex","_pass","_value","samples","p","valueDerives","getAddSamples","$8af806db8832338e$export$e8886fdb6718f96","valuesDef","texturesMaxDef","valueToPass","textureToPass","getValue","getIndex","$8af806db8832338e$export$96707a1f51900f3d","$c0f1ddf86a2c884a$export$ac0cd3cc21f80dfc","$c0f1ddf86a2c884a$export$5d97924d29f48e83","$c0f1ddf86a2c884a$export$4bceda1224fc5ab8","$c0f1ddf86a2c884a$export$b4781c2237bde956","$c0f1ddf86a2c884a$export$26945b8c914b7fc","$c0f1ddf86a2c884a$export$154f256b9eac9103","$c0f1ddf86a2c884a$export$4d253b84ce5f5f8e","$c0f1ddf86a2c884a$export$b029aceb5666f022","$c0f1ddf86a2c884a$export$71c6d8e332d66a75","$c0f1ddf86a2c884a$export$617a37502ff8853","$c0f1ddf86a2c884a$export$ff01eb58fe4e69","$c0f1ddf86a2c884a$export$cfdc3a7c4cb854c6","$8iiFw","positions","$c0f1ddf86a2c884a$export$27fb0dad99ae5dd2","$c0f1ddf86a2c884a$export$47b10f415de592b1","$c0f1ddf86a2c884a$export$1fb689c67b965bff","$c0f1ddf86a2c884a$export$8d7f4a48e1f2b2a","$c0f1ddf86a2c884a$export$a211ab2c8ecded9a","$c0f1ddf86a2c884a$export$a1b7c201e9365814","$609e7c658f51082e$export$ba60520149d1328e","$609e7c658f51082e$export$878041e1e4cd4218","_textures","_passes","$de77884057adbfa7$export$50fdfeece43146fd","framebuffer","stepsDef","passNow","side","scaleDef","width","height","typeDef","minDef","mag","magDef","wrap","wrapDef","depthDef","stencil","stencilDef","channelsMin","channelsMinDef","texturesMap","_length","shape","textures1","passes1","addPass","textureProps","max1","_step1","entry","map","addTexture","$762d82d3b4f274a6$var$scale","vec2","$762d82d3b4f274a6$export$89e7bec3b8bce705","buffer","command","pre","preDef","step1","positionsDef","passCommand","$7WK5S","verts","stateCache","vs","fs","$jcizf","wrapGet","onPass","onStep","passProps","$df9d8a68b07f20b6$export$acb6ab09ed1b7b8b","$df9d8a68b07f20b6$export$ea134dcc07e79c49","$df9d8a68b07f20b6$export$2e2bcd8739ae039","_cache1","_cache2","$588d08c6cd703f4f$export$4e46ac54fc82cf3b","$588d08c6cd703f4f$export$69a3209f1a06c04d","$588d08c6cd703f4f$export$11949c6f5fba7dcd","$588d08c6cd703f4f$export$feaf5ffc92c2af94","key","on","$5jmLt","Object","$588d08c6cd703f4f$export$83d01c7b88bc16d5","name","qualify","init","ref2","join","$588d08c6cd703f4f$export$45db4de6da38aa8d","$588d08c6cd703f4f$export$3df19e70a88cb8cd","$588d08c6cd703f4f$export$1c7039c93eddfba","$588d08c6cd703f4f$export$c346962e7dd3191","trim","$588d08c6cd703f4f$export$d38b14fb9031108e","hook","boundDef","passesL","stepsL","c","JSON","stringify","_c","s1","slice","$588d08c6cd703f4f$export$84186522bf5a7d4d","s2","$588d08c6cd703f4f$export$49873e279ff642c0","reads1","passSamples","passReads","tap","$588d08c6cd703f4f$export$9cb6037fa2a40c2e","$3de062af33d77200$var$start","$3de062af33d77200$var$end","split","$3de062af33d77200$export$bf9fb029d174d554","toString","_uniforms","ref3","ref4","ref5","ref6","ref7","ref8","_count","$d5616e34cd48fb78$export$4e06fab977536f8e","textureMap","texturesL","viewportWidth","w","viewportHeight","h","$lwLPF","setC2","ago","b","ago1","pl","$d5616e34cd48fb78$export$87ed20f81f3c66ff","isInteger","ref10","ref9","$d5616e34cd48fb78$export$a495db45d4904b10","$fac1b09e36acee4f$export$dcfbb7940cfb3a48","$ac3a28119436338f$export$2e2bcd8739ae039","states"],"version":3,"file":"index.77394b86.js.map"}