{"mappings":"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","sources":[".yarn/cache/@thi.ng-math-npm-5.4.0-52f68754e2-399736a0ad.zip/node_modules/@thi.ng/math/interval.js",".yarn/cache/@thi.ng-math-npm-5.4.0-52f68754e2-399736a0ad.zip/node_modules/@thi.ng/math/fit.js",".yarn/cache/@thi.ng-errors-npm-2.2.8-2edd338dd8-187a4df7da.zip/node_modules/@thi.ng/errors/deferror.js",".yarn/cache/@thi.ng-errors-npm-2.2.8-2edd338dd8-187a4df7da.zip/node_modules/@thi.ng/errors/unsupported.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/vop.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/constants.js",".yarn/cache/@thi.ng-errors-npm-2.2.8-2edd338dd8-187a4df7da.zip/node_modules/@thi.ng/errors/illegal-arity.js",".yarn/cache/@thi.ng-compose-npm-2.1.24-c983939304-329c0d01d6.zip/node_modules/@thi.ng/compose/comp.js",".yarn/cache/@thi.ng-checks-npm-3.3.7-ec6d5a227d-780008a6c0.zip/node_modules/@thi.ng/checks/implements-function.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/ensure.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/comp.js",".yarn/cache/@thi.ng-checks-npm-3.3.7-ec6d5a227d-780008a6c0.zip/node_modules/@thi.ng/checks/is-iterable.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/compr.js",".yarn/cache/@thi.ng-api-npm-8.6.3-a92669c76e-dcaf304f7b.zip/node_modules/@thi.ng/api/api.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/reduced.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/reduce.js",".yarn/cache/@thi.ng-checks-npm-3.3.7-ec6d5a227d-780008a6c0.zip/node_modules/@thi.ng/checks/is-arraylike.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/push.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/iterator.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/map.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/map-indexed.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/range.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/str.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/take.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/transduce.js",".yarn/cache/@thi.ng-transducers-npm-8.3.30-f46a255a0a-af111041a1.zip/node_modules/@thi.ng/transducers/zip.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/compile/templates.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/compile/emit.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/set.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/set.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/identity.js",".yarn/cache/@thi.ng-math-npm-5.4.0-52f68754e2-399736a0ad.zip/node_modules/@thi.ng/math/api.js",".yarn/cache/@thi.ng-math-npm-5.4.0-52f68754e2-399736a0ad.zip/node_modules/@thi.ng/math/angle.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/magsq.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/muln.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/normalize.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/setc.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/m33-m44.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/rotation-around-axis.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/frustum.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/perspective.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/cross.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/dot.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/sub.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/lookat.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/dots.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/mulm.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/concat.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/mulv.js",".yarn/cache/@thi.ng-vectors-npm-7.5.31-856e2d4358-7bbc6b9925.zip/node_modules/@thi.ng/vectors/dotc.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/determinant.js",".yarn/cache/@thi.ng-matrices-npm-2.1.40-df846732bf-ed21d92c96.zip/node_modules/@thi.ng/matrices/invert.js",".yarn/cache/@thi.ng-errors-npm-2.2.2-79c8f729f8-a8144abc8c.zip/node_modules/@thi.ng/errors/deferror.js",".yarn/cache/@thi.ng-errors-npm-2.2.2-79c8f729f8-a8144abc8c.zip/node_modules/@thi.ng/errors/illegal-arity.js",".yarn/cache/@thi.ng-compose-npm-2.1.15-44e9fea825-cff680a1f8.zip/node_modules/@thi.ng/compose/comp.js",".yarn/cache/@thi.ng-checks-npm-3.2.6-5d8affb4e8-b29235850c.zip/node_modules/@thi.ng/checks/implements-function.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/ensure.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/comp.js",".yarn/cache/@thi.ng-checks-npm-3.2.6-5d8affb4e8-b29235850c.zip/node_modules/@thi.ng/checks/is-iterable.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/compr.js",".yarn/cache/@thi.ng-api-npm-8.4.3-1eb379d03f-5adb33b09f.zip/node_modules/@thi.ng/api/api.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/reduced.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/reduce.js",".yarn/cache/@thi.ng-checks-npm-3.2.6-5d8affb4e8-b29235850c.zip/node_modules/@thi.ng/checks/is-arraylike.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/push.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/iterator.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/map.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/map-indexed.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/range.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/str.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/take.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/transduce.js",".yarn/cache/@thi.ng-transducers-npm-8.3.17-84620dd479-9a17a4ee56.zip/node_modules/@thi.ng/transducers/zip.js",".yarn/cache/@thi.ng-errors-npm-2.2.2-79c8f729f8-a8144abc8c.zip/node_modules/@thi.ng/errors/unsupported.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/vop.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/compile/templates.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/compile/emit.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/muln.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/div.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/divn.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/sub.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/add.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/invert.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/setc.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/distsq.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/dist.js",".yarn/cache/@thi.ng-math-npm-5.3.10-6ff40c3dbd-374cf5d94e.zip/node_modules/@thi.ng/math/api.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/magsq.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/set.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/normalize.js",".yarn/cache/gsl-const-npm-1.0.2-aa478f68bf-f40e554778.zip/node_modules/gsl-const/main.js",".yarn/cache/@epok.tech-fn-time-npm-0.2.1-4ea264980d-08c6bc1abc.zip/node_modules/@epok.tech/fn-time/dist/es/index.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a09750e171.zip/node_modules/@epok.tech/fn-lists/reduce.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a09750e171.zip/node_modules/@epok.tech/fn-lists/map.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a09750e171.zip/node_modules/@epok.tech/fn-lists/each.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a09750e171.zip/node_modules/@epok.tech/fn-lists/range.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a09750e171.zip/node_modules/@epok.tech/fn-lists/wrap-index.js",".yarn/cache/@epok.tech-fn-lists-npm-0.1.4-f8d8e09191-a09750e171.zip/node_modules/@epok.tech/fn-lists/wrap.js",".yarn/cache/@epok.tech-gl-screen-triangle-npm-1.2.1-49978ae6b0-551e98be3c.zip/node_modules/@epok.tech/gl-screen-triangle/dist/esm/index.js","src/const.js","src/index.vert.glsl","src/maps.js","src/size.js","src/data.js","src/uniforms.js",".yarn/cache/@epok.tech-is-type-npm-0.1.0-e4ecb8732b-3e1f1e06b6.zip/node_modules/@epok.tech/is-type/type.js","src/macros.js","src/step.js","src/index.js","src/index-forms/index.js",".yarn/cache/@thi.ng-math-npm-5.4.0-52f68754e2-399736a0ad.zip/node_modules/@thi.ng/math/mix.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/maddns.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/sets.js",".yarn/cache/@thi.ng-math-npm-5.3.10-6ff40c3dbd-374cf5d94e.zip/node_modules/@thi.ng/math/angle.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/api.js",".yarn/cache/@thi.ng-vectors-npm-7.5.18-8b6c940b84-4103c301a5.zip/node_modules/@thi.ng/vectors/cartesian.js","demo/particles-regl/axis2.js","demo/particles-regl/shake.js","demo/particles-regl/index.js","demo/particles-regl/step.frag.glsl","demo/particles-regl/draw.vert.glsl","demo/particles-regl/draw.frag.glsl"],"sourcesContent":["/**\n * Clamps value `x` to given closed interval.\n *\n * @param x - value to clamp\n * @param min - lower bound\n * @param max - upper bound\n */\nexport const clamp = (x, min, max) => (x < min ? min : x > max ? max : x);\n/**\n * Clamps value `x` to closed [0 .. ∞] interval.\n *\n * @param x -\n */\nexport const clamp0 = (x) => (x > 0 ? x : 0);\n/**\n * Clamps value `x` to closed [0 .. 1] interval.\n *\n * @param x -\n */\nexport const clamp01 = (x) => (x < 0 ? 0 : x > 1 ? 1 : x);\n/**\n * Clamps value `x` to closed [-1 .. 1] interval.\n *\n * @param x -\n */\nexport const clamp11 = (x) => (x < -1 ? -1 : x > 1 ? 1 : x);\n/**\n * Clamps value `x` to closed [0 .. 0.5] interval.\n *\n * @param x -\n */\nexport const clamp05 = (x) => (x < 0 ? 0 : x > 0.5 ? 0.5 : x);\n/**\n * Folds `x` back inside closed [min..max] interval. Also see\n * {@link wrapOnce}.\n *\n * @param x -\n * @param min -\n * @param max -\n */\nexport const wrap = (x, min, max) => {\n    if (min === max)\n        return min;\n    if (x > max) {\n        const d = max - min;\n        x -= d;\n        if (x > max)\n            x -= d * (((x - min) / d) | 0);\n    }\n    else if (x < min) {\n        const d = max - min;\n        x += d;\n        if (x < min)\n            x += d * (((min - x) / d + 1) | 0);\n    }\n    return x;\n};\n/**\n * Like {@link wrap}, but optimized for cases where `x` is guaranteed to\n * be in `[min - d, max + d]` interval, where `d = max - min`. Result\n * will be in closed `[min..max]` interval.\n *\n * @param x -\n * @param min -\n * @param max -\n */\nexport const wrapOnce = (x, min, max) => x < min ? x - min + max : x > max ? x - max + min : x;\n/**\n * Similar to {@link wrapOnce} for [0..1] interval.\n *\n * @param x -\n */\nexport const wrap01 = (x) => (x < 0 ? x + 1 : x > 1 ? x - 1 : x);\n/**\n * Similar to {@link wrapOnce} for [-1..1] interval.\n *\n * @param x -\n */\nexport const wrap11 = (x) => (x < -1 ? x + 2 : x > 1 ? x - 2 : x);\nexport const min2id = (a, b) => (a <= b ? 0 : 1);\nexport const min3id = (a, b, c) => a <= b ? (a <= c ? 0 : 2) : b <= c ? 1 : 2;\nexport const min4id = (a, b, c, d) => a <= b\n    ? a <= c\n        ? a <= d\n            ? 0\n            : 3\n        : c <= d\n            ? 2\n            : 3\n    : b <= c\n        ? b <= d\n            ? 1\n            : 3\n        : c <= d\n            ? 2\n            : 3;\nexport const max2id = (a, b) => (a >= b ? 0 : 1);\nexport const max3id = (a, b, c) => a >= b ? (a >= c ? 0 : 2) : b >= c ? 1 : 2;\nexport const max4id = (a, b, c, d) => a >= b\n    ? a >= c\n        ? a >= d\n            ? 0\n            : 3\n        : c >= d\n            ? 2\n            : 3\n    : b >= c\n        ? b >= d\n            ? 1\n            : 3\n        : c >= d\n            ? 2\n            : 3;\n/**\n * Returns the non-zero minimum value of the given `a`, `b` args.\n *\n * @param a -\n * @param b -\n */\nexport const minNonZero2 = (a, b) => a !== 0 ? (b !== 0 ? Math.min(a, b) : a) : b;\n/**\n * Returns the non-zero minimum value of the given `a`, `b`, `c` args.\n *\n * @param a -\n * @param b -\n * @param c -\n */\nexport const minNonZero3 = (a, b, c) => minNonZero2(minNonZero2(a, b), c);\n/**\n * See `smax()`.\n *\n * @param a -\n * @param b -\n * @param k - smooth exponent (MUST be > 0)\n */\nexport const smin = (a, b, k) => smax(a, b, -k);\n/**\n * Smooth maximum. Note: Result values will be slightly larger than max value\n * near max(a,b) + eps due to exponential decay. Higher `k` values reduce the\n * error, but also reduce the smoothing. Recommended k=16.\n *\n * https://en.wikipedia.org/wiki/Smooth_maximum\n *\n * @param a -\n * @param b -\n * @param k - smooth exponent (MUST be > 0)\n */\nexport const smax = (a, b, k) => {\n    const ea = Math.exp(a * k);\n    const eb = Math.exp(b * k);\n    return (a * ea + b * eb) / (ea + eb);\n};\n/**\n * Same as `smin(smax(x, min, k), max, k)`.\n *\n * @param x -\n * @param min -\n * @param max -\n * @param k -\n */\nexport const sclamp = (x, min, max, k) => smin(smax(x, min, k), max, k);\nexport const absMin = (a, b) => (Math.abs(a) < Math.abs(b) ? a : b);\nexport const absMax = (a, b) => (Math.abs(a) > Math.abs(b) ? a : b);\n/**\n * If `abs(x) > abs(e)`, recursively mirrors `x` back into `[-e .. +e]`\n * interval at respective positive/negative boundary.\n *\n * @remarks\n * References:\n * - https://www.desmos.com/calculator/lkyf2ag3ta\n * - https://www.musicdsp.org/en/latest/Effects/203-fold-back-distortion.html\n *\n * @param e - threshold (> 0)\n * @param x - input value\n */\nexport const foldback = (e, x) => x < -e || x > e ? Math.abs(Math.abs((x - e) % (4 * e)) - 2 * e) - e : x;\n/**\n * Returns true iff `x` is in closed interval `[min .. max]`\n *\n * @param x -\n * @param min -\n * @param max -\n */\nexport const inRange = (x, min, max) => x >= min && x <= max;\n/**\n * Returns true iff `x` is in open interval `(min .. max)`\n *\n * @param x -\n * @param min -\n * @param max -\n */\nexport const inOpenRange = (x, min, max) => x > min && x < max;\n","import { clamp01, clamp11 } from \"./interval.js\";\n/**\n * Returns normalized value of `x` WRT to interval `a .. b`. If `a`\n * equals `b`, returns 0.\n *\n * @param x -\n * @param a -\n * @param b -\n */\nexport const norm = (x, a, b) => (b !== a ? (x - a) / (b - a) : 0);\n/**\n * Returns a number in the `[c,d]` interval which is relative to `x` in the\n * `[a,b]` interval. **No** clamping will be performed if `x` lies outside the\n * original range (for that use {@link fitClamped} instead).\n *\n * @param x\n * @param a\n * @param b\n * @param c\n * @param d\n */\nexport const fit = (x, a, b, c, d) => c + (d - c) * norm(x, a, b);\n/**\n * Clamped version of {@link fit}, i.e. before mapping `x` into the target\n * interval `[c,d]`, it will be clamped to the source interval `[a,b]`.\n *\n * @param x\n * @param a\n * @param b\n * @param c\n * @param d\n */\nexport const fitClamped = (x, a, b, c, d) => c + (d - c) * clamp01(norm(x, a, b));\n/**\n * Similar to {@link fitClamped}, assuming [0,1] as source interval.\n *\n * @param x\n * @param a\n * @param b\n */\nexport const fit01 = (x, a, b) => a + (b - a) * clamp01(x);\n/**\n * Similar to {@link fitClamped}, assuming the reverse ordered [1,0] as source\n * interval.\n *\n * @param x\n * @param a\n * @param b\n */\nexport const fit10 = (x, a, b) => b + (a - b) * clamp01(x);\n/**\n * Similar to {@link fitClamped}, assuming [-1,1] as source interval.\n *\n * @param x\n * @param a\n * @param b\n */\nexport const fit11 = (x, a, b) => a + (b - a) * (0.5 + 0.5 * clamp11(x));\n","export const defError = (prefix, suffix = (msg) => (msg !== undefined ? \": \" + msg : \"\")) => class extends Error {\n    constructor(msg) {\n        super(prefix(msg) + suffix(msg));\n    }\n};\n","import { defError } from \"./deferror.js\";\nexport const UnsupportedOperationError = defError(() => \"unsupported operation\");\nexport const unsupported = (msg) => {\n    throw new UnsupportedOperationError(msg);\n};\n","import { unsupported } from \"@thi.ng/errors/unsupported\";\n/**\n * Specialized / optimized version of\n * [`thi.ng/defmulti`](https://thi.ng/defmulti) for vector operations. Uses\n * simplified logic to dispatch on length (vector size) of `dispatch` argument.\n *\n * @param dispatch - arg index\n */\nexport const vop = (dispatch = 0) => {\n    const impls = new Array(5);\n    let fallback;\n    const fn = (...args) => {\n        const g = impls[args[dispatch].length] || fallback;\n        return g\n            ? g(...args)\n            : unsupported(`no impl for vec size ${args[dispatch].length}`);\n    };\n    fn.add = (dim, fn) => (impls[dim] = fn);\n    fn.default = (fn) => (fallback = fn);\n    fn.impl = (dim) => impls[dim] || fallback;\n    // fn.impls = impls;\n    return fn;\n};\n","export const IDENT22 = Object.freeze([1, 0, 0, 1]);\nexport const IDENT23 = Object.freeze([1, 0, 0, 1, 0, 0]);\n//prettier-ignore\nexport const IDENT33 = Object.freeze([\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1\n]);\n//prettier-ignore\nexport const IDENT44 = Object.freeze([\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n]);\n","import { defError } from \"./deferror.js\";\nexport const IllegalArityError = defError(() => \"illegal arity\");\nexport const illegalArity = (n) => {\n    throw new IllegalArityError(n);\n};\n","import { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nexport function comp(...fns) {\n    let [a, b, c, d, e, f, g, h, i, j] = fns;\n    switch (fns.length) {\n        case 0:\n            illegalArity(0);\n        case 1:\n            return a;\n        case 2:\n            return (...xs) => a(b(...xs));\n        case 3:\n            return (...xs) => a(b(c(...xs)));\n        case 4:\n            return (...xs) => a(b(c(d(...xs))));\n        case 5:\n            return (...xs) => a(b(c(d(e(...xs)))));\n        case 6:\n            return (...xs) => a(b(c(d(e(f(...xs))))));\n        case 7:\n            return (...xs) => a(b(c(d(e(f(g(...xs)))))));\n        case 8:\n            return (...xs) => a(b(c(d(e(f(g(h(...xs))))))));\n        case 9:\n            return (...xs) => a(b(c(d(e(f(g(h(i(...xs)))))))));\n        case 10:\n        default:\n            const fn = (...xs) => a(b(c(d(e(f(g(h(i(j(...xs))))))))));\n            return fns.length === 10 ? fn : comp(fn, ...fns.slice(10));\n    }\n}\nexport function compL(...fns) {\n    return comp.apply(null, fns.reverse());\n}\n/**\n * @deprecated renamed to {@link compL}\n */\nexport const compI = compL;\n","export const implementsFunction = (x, fn) => x != null && typeof x[fn] === \"function\";\n","import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nexport const ensureTransducer = (x) => implementsFunction(x, \"xform\") ? x.xform() : x;\n","import { comp as _comp } from \"@thi.ng/compose/comp\";\nimport { ensureTransducer } from \"./ensure.js\";\nexport function comp(...fns) {\n    fns = fns.map(ensureTransducer);\n    return _comp.apply(null, fns);\n}\n","export const isIterable = (x) => x != null && typeof x[Symbol.iterator] === \"function\";\n","/**\n * Reducer composition helper, internally used by various transducers\n * during initialization. Takes existing reducer `rfn` (a 3-tuple) and a\n * reducing function `fn`. Returns a new reducer tuple.\n *\n * @remarks\n * `rfn[2]` reduces values of type `B` into an accumulator of type `A`.\n * `fn` accepts values of type `C` and produces interim results of type\n * `B`, which are then (possibly) passed to the \"inner\" `rfn[2]`\n * function. Therefore the resulting reducer takes inputs of `C` and an\n * accumulator of type `A`.\n *\n * It is assumed that `fn` internally calls `rfn[2]` to pass its own\n * results for further processing by the nested reducer `rfn`.\n *\n * @example\n * ```ts\n * compR(rfn, fn)\n * // [rfn[0], rfn[1], fn]\n * ```\n *\n * @param rfn -\n * @param fn -\n */\nexport const compR = (rfn, fn) => [rfn[0], rfn[1], fn];\n","export const DEFAULT_EPS = 1e-6;\n/**\n * Internal use only. **Do NOT use in user land code!**\n *\n * @internal\n */\nexport const SEMAPHORE = Symbol();\n/**\n * No-effect placeholder function.\n */\nexport const NO_OP = () => { };\n/**\n * Catch-all event ID\n */\nexport const EVENT_ALL = \"*\";\nexport const EVENT_ENABLE = \"enable\";\nexport const EVENT_DISABLE = \"disable\";\n","export class Reduced {\n    constructor(val) {\n        this.value = val;\n    }\n    deref() {\n        return this.value;\n    }\n}\nexport const reduced = (x) => new Reduced(x);\nexport const isReduced = (x) => x instanceof Reduced;\nexport const ensureReduced = (x) => x instanceof Reduced ? x : new Reduced(x);\nexport const unreduced = (x) => (x instanceof Reduced ? x.deref() : x);\n","import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nimport { isArrayLike } from \"@thi.ng/checks/is-arraylike\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { isReduced, unreduced } from \"./reduced.js\";\nconst parseArgs = (args) => args.length === 2\n    ? [undefined, args[1]]\n    : args.length === 3\n        ? [args[1], args[2]]\n        : illegalArity(args.length);\nexport function reduce(...args) {\n    const rfn = args[0];\n    const init = rfn[0];\n    const complete = rfn[1];\n    const reduce = rfn[2];\n    args = parseArgs(args);\n    const acc = args[0] == null ? init() : args[0];\n    const xs = args[1];\n    return unreduced(complete(implementsFunction(xs, \"$reduce\")\n        ? xs.$reduce(reduce, acc)\n        : isArrayLike(xs)\n            ? reduceArray(reduce, acc, xs)\n            : reduceIterable(reduce, acc, xs)));\n}\nexport function reduceRight(...args) {\n    const rfn = args[0];\n    const init = rfn[0];\n    const complete = rfn[1];\n    const reduce = rfn[2];\n    args = parseArgs(args);\n    let acc = args[0] == null ? init() : args[0];\n    const xs = args[1];\n    for (let i = xs.length; i-- > 0;) {\n        acc = reduce(acc, xs[i]);\n        if (isReduced(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return unreduced(complete(acc));\n}\nconst reduceArray = (rfn, acc, xs) => {\n    for (let i = 0, n = xs.length; i < n; i++) {\n        acc = rfn(acc, xs[i]);\n        if (isReduced(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return acc;\n};\nconst reduceIterable = (rfn, acc, xs) => {\n    for (let x of xs) {\n        acc = rfn(acc, x);\n        if (isReduced(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return acc;\n};\n/**\n * Convenience helper for building a full {@link Reducer} using the identity\n * function (i.e. `(x) => x`) as completion step (true for 90% of all\n * bundled transducers).\n *\n * @param init - init step of reducer\n * @param rfn - reduction step of reducer\n */\nexport const reducer = (init, rfn) => [init, (acc) => acc, rfn];\nexport const $$reduce = (rfn, args) => {\n    const n = args.length - 1;\n    return isIterable(args[n])\n        ? args.length > 1\n            ? reduce(rfn.apply(null, args.slice(0, n)), args[n])\n            : reduce(rfn(), args[0])\n        : undefined;\n};\n","export const isArrayLike = (x) => x != null && typeof x !== \"function\" && x.length !== undefined;\n","import { reducer } from \"./reduce.js\";\nexport function push(xs) {\n    return xs\n        ? [...xs]\n        : reducer(() => [], (acc, x) => (acc.push(x), acc));\n}\n","import { NO_OP, SEMAPHORE } from \"@thi.ng/api/api\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { push } from \"./push.js\";\nimport { isReduced, unreduced } from \"./reduced.js\";\n/**\n * Takes a transducer and input iterable. Returns iterator of\n * transformed results.\n *\n * @param xform -\n * @param xs -\n */\nexport function* iterator(xform, xs) {\n    const rfn = ensureTransducer(xform)(push());\n    const complete = rfn[1];\n    const reduce = rfn[2];\n    for (let x of xs) {\n        const y = reduce([], x);\n        if (isReduced(y)) {\n            yield* unreduced(complete(y.deref()));\n            return;\n        }\n        if (y.length) {\n            yield* y;\n        }\n    }\n    yield* unreduced(complete([]));\n}\n/**\n * Optimized version of {@link iterator} for transducers which are\n * guaranteed to:\n *\n * 1) Only produce none or a single result per input\n * 2) Do not require a `completion` reduction step\n *\n * @param xform -\n * @param xs -\n */\nexport function* iterator1(xform, xs) {\n    const reduce = (ensureTransducer(xform)([NO_OP, NO_OP, (_, x) => x]))[2];\n    for (let x of xs) {\n        let y = reduce(SEMAPHORE, x);\n        if (isReduced(y)) {\n            y = unreduced(y.deref());\n            if (y !== SEMAPHORE) {\n                yield y;\n            }\n            return;\n        }\n        if (y !== SEMAPHORE) {\n            yield y;\n        }\n    }\n}\n/**\n * Helper function used by various transducers to wrap themselves as\n * transforming iterators. Delegates to {@link iterator1} by default.\n *\n * @param xform -\n * @param args -\n * @param impl -\n *\n * @internal\n */\nexport const __iter = (xform, args, impl = iterator1) => {\n    const n = args.length - 1;\n    return isIterable(args[n])\n        ? args.length > 1\n            ? impl(xform.apply(null, args.slice(0, n)), args[n])\n            : impl(xform(), args[0])\n        : undefined;\n};\n","import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator1 } from \"./iterator.js\";\nexport function map(fn, src) {\n    return isIterable(src)\n        ? iterator1(map(fn), src)\n        : (rfn) => {\n            const r = rfn[2];\n            return compR(rfn, (acc, x) => r(acc, fn(x)));\n        };\n}\n/**\n * Convenience wrapper for {@link map} to transform an iterable with given `fn`\n * and immediatedly collect results into an array.\n */\nexport const mapA = (fn, src) => [\n    ...map(fn, src),\n];\n","import { compR } from \"./compr.js\";\nimport { __iter } from \"./iterator.js\";\nexport function mapIndexed(...args) {\n    return (__iter(mapIndexed, args) ||\n        ((rfn) => {\n            const r = rfn[2];\n            const fn = args[0];\n            let i = args[1] || 0;\n            return compR(rfn, (acc, x) => r(acc, fn(i++, x)));\n        }));\n}\n","import { isReduced } from \"./reduced.js\";\nexport function range(from, to, step) {\n    return new Range(from, to, step);\n}\n/**\n * Simple class wrapper around given range interval and implementing `Iterable`\n * and {@link IReducible} interfaces, the latter is used to accelerate use with\n * {@link reduce}.\n */\nexport class Range {\n    constructor(from, to, step) {\n        if (from === undefined) {\n            from = 0;\n            to = Infinity;\n        }\n        else if (to === undefined) {\n            to = from;\n            from = 0;\n        }\n        step = step === undefined ? (from < to ? 1 : -1) : step;\n        this.from = from;\n        this.to = to;\n        this.step = step;\n    }\n    *[Symbol.iterator]() {\n        let { from, to, step } = this;\n        if (step > 0) {\n            while (from < to) {\n                yield from;\n                from += step;\n            }\n        }\n        else if (step < 0) {\n            while (from > to) {\n                yield from;\n                from += step;\n            }\n        }\n    }\n    $reduce(rfn, acc) {\n        const step = this.step;\n        if (step > 0) {\n            for (let i = this.from, n = this.to; i < n && !isReduced(acc); i += step) {\n                acc = rfn(acc, i);\n            }\n        }\n        else {\n            for (let i = this.from, n = this.to; i > n && !isReduced(acc); i += step) {\n                acc = rfn(acc, i);\n            }\n        }\n        return acc;\n    }\n}\n","import { reducer } from \"./reduce.js\";\nexport function str(sep, xs) {\n    sep = sep || \"\";\n    let first = true;\n    return xs\n        ? [...xs].join(sep)\n        : reducer(() => \"\", (acc, x) => ((acc = first ? acc + x : acc + sep + x),\n            (first = false),\n            acc));\n}\n","import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator } from \"./iterator.js\";\nimport { ensureReduced, reduced } from \"./reduced.js\";\nexport function take(n, src) {\n    return isIterable(src)\n        ? iterator(take(n), src)\n        : (rfn) => {\n            const r = rfn[2];\n            let m = n;\n            return compR(rfn, (acc, x) => --m > 0\n                ? r(acc, x)\n                : m === 0\n                    ? ensureReduced(r(acc, x))\n                    : reduced(acc));\n        };\n}\n","import { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { map } from \"./map.js\";\nimport { reduce, reduceRight } from \"./reduce.js\";\nexport function transduce(...args) {\n    return $transduce(transduce, reduce, args);\n}\nexport function transduceRight(...args) {\n    return $transduce(transduceRight, reduceRight, args);\n}\nconst $transduce = (tfn, rfn, args) => {\n    let acc, xs;\n    switch (args.length) {\n        case 4:\n            xs = args[3];\n            acc = args[2];\n            break;\n        case 3:\n            xs = args[2];\n            break;\n        case 2:\n            return map((x) => tfn(args[0], args[1], x));\n        default:\n            illegalArity(args.length);\n    }\n    return rfn(ensureTransducer(args[0])(args[1]), acc, xs);\n};\n","export function* zip(...src) {\n    const iters = src.map((s) => s[Symbol.iterator]());\n    while (true) {\n        const tuple = [];\n        for (let i of iters) {\n            let v = i.next();\n            if (v.done) {\n                return;\n            }\n            tuple.push(v.value);\n        }\n        yield tuple;\n    }\n}\n","/** @internal */\nexport const ARGS_V = \"o,a\";\n/** @internal */\nexport const ARGS_VV = \"o,a,b\";\n/** @internal */\nexport const ARGS_VVV = \"o,a,b,c\";\n/** @internal */\nexport const ARGS_VN = \"o,a,n\";\n/** @internal */\nexport const ARGS_VNV = \"o,a,n,b\";\n/** @internal */\nexport const ARGS_VVN = \"o,a,b,n\";\n/** @internal */\nexport const SARGS_V = \"io=0,ia=0,so=1,sa=1\";\n/** @internal */\nexport const SARGS_VV = \"io=0,ia=0,ib=0,so=1,sa=1,sb=1\";\n/** @internal */\nexport const SARGS_VVV = \"io=0,ia=0,ib=0,ic=0,so=1,sa=1,sb=1,sc=1\";\n/** @internal */\nexport const DEFAULT_OUT = \"!o&&(o=a);\";\n/** @internal */\nexport const NEW_OUT = \"!o&&(o=[]);\";\n/** @internal */\nexport const NEW_OUT_A = \"!a&&(a=[]);\";\n/** @internal */\n// prettier-ignore\nexport const MATH = (op) => ([o, a, b]) => `${o}=${a}${op}${b};`;\n/** @internal */\n// prettier-ignore\nexport const MATH_N = (op) => ([o, a]) => `${o}=${a}${op}n;`;\n/** @internal */\n// prettier-ignore\nexport const MATH2 = (op1, op2) => ([o, a, b, c]) => `${o}=(${a}${op1}${b})${op2}${c};`;\n/** @internal */\n// prettier-ignore\nexport const MATH2_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}${b})${op2}n;`;\n/** @internal */\n// prettier-ignore\nexport const MATH2A_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}n)${op2}${b};`;\n/** @internal */\n// prettier-ignore\nexport const SIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})|0;`;\n/** @internal */\n// prettier-ignore\nexport const UNSIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})>>>0;`;\n/** @internal */\n// prettier-ignore\nexport const SIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)|0;`;\n/** @internal */\n// prettier-ignore\nexport const UNSIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)>>>0;`;\n/** @internal */\n// prettier-ignore\nexport const FN = (op = \"op\") => ([o, a]) => `${o}=${op}(${a});`;\n/** @internal */\n// prettier-ignore\nexport const FN2 = (op = \"op\") => ([o, a, b]) => `${o}=${op}(${a},${b});`;\n/** @internal */\n// prettier-ignore\nexport const FN3 = (op = \"op\") => ([o, a, b, c]) => `${o}=${op}(${a},${b},${c});`;\n/** @internal */\n// prettier-ignore\nexport const FN5 = (op = \"op\") => ([o, a, b, c, d, e]) => `${o}=${op}(${a},${b},${c},${d},${e});`;\n/** @internal */\n// prettier-ignore\nexport const FN_N = (op = \"op\") => ([o, a]) => `${o}=${op}(${a},n);`;\n/** @internal */\nexport const DOT = ([a, b]) => `${a}*${b}`;\n/** @internal */\nexport const DOT_G = ([a, b]) => `s+=${a}*${b};`;\n/** @internal */\nexport const SET = ([o, a]) => `${o}=${a};`;\n/** @internal */\nexport const SET_N = ([a]) => `${a}=n;`;\n/** @internal */\nexport const MIX = ([o, a, b, c]) => `${o}=${a}+(${b}-${a})*${c};`;\n/** @internal */\nexport const MIX_N = ([o, a, b]) => `${o}=${a}+(${b}-${a})*n;`;\n","import { comp } from \"@thi.ng/transducers/comp\";\nimport { map } from \"@thi.ng/transducers/map\";\nimport { mapIndexed } from \"@thi.ng/transducers/map-indexed\";\nimport { range } from \"@thi.ng/transducers/range\";\nimport { str } from \"@thi.ng/transducers/str\";\nimport { take } from \"@thi.ng/transducers/take\";\nimport { transduce } from \"@thi.ng/transducers/transduce\";\nimport { zip } from \"@thi.ng/transducers/zip\";\nimport { vop } from \"../vop.js\";\nimport { ARGS_V, ARGS_VN, ARGS_VV, DEFAULT_OUT, FN, MATH, MATH_N, SARGS_VV, SIGNED, SIGNED_N, UNSIGNED, UNSIGNED_N, } from \"./templates.js\";\n/**\n * HOF array index lookup gen to provide optimized versions of:\n *\n * @example\n * ```ts\n * lookup(\"a\")(0) // a[ia]\n * lookup(\"a\")(1) // a[ia * sa]\n * lookup(\"a\")(2) // a[ia + 2 * sa]\n * ```\n *\n * @param sym -\n */\nconst lookup = (sym) => (i) => i > 1\n    ? `${sym}[i${sym}+${i}*s${sym}]`\n    : i == 1\n        ? `${sym}[i${sym}+s${sym}]`\n        : `${sym}[i${sym}]`;\n/**\n * Infinite iterator of strided index lookups for `sym`.\n *\n * @param sym -\n */\nconst indicesStrided = (sym) => map(lookup(sym), range());\n/**\n * Infinite iterator of simple (non-strided) index lookups for `sym`.\n *\n * @param sym -\n */\nconst indices = (sym) => map((i) => `${sym}[${i}]`, range());\n/**\n * Code generator for loop-unrolled vector operations. Takes a vector\n * size `dim`, a code template function `tpl` and an array of symbol\n * names participating in the template. For each symbol, creates\n * iterator of index lookups (e.g. `a[0]` or `a[ia+k*sa]`), forms them\n * into tuples and passes them to template to generate code and joins\n * generated result with `opJoin` separator (default:\n * `\"\"`).\n *\n * If the optional `ret` arg is not `null` (default `\"a\"`), appends a\n * `return` statement to the result array, using `ret` as return value.\n * Returns array of source code lines.\n *\n * The optional `pre` and `post` strings can be used to wrap the\n * generated code. `post` will be injected **before** the generated\n * return statement (if not suppressed).\n *\n * @param dim -\n * @param tpl -\n * @param syms -\n * @param ret -\n * @param opJoin -\n * @param pre -\n * @param post -\n * @param strided -\n */\nconst assemble = (dim, tpl, syms, ret = \"a\", opJoin = \"\", pre = \"\", post = \"\", strided = false) => [\n    pre,\n    transduce(comp(take(dim), mapIndexed((i, x) => tpl(x, i))), str(opJoin), (zip.apply(null, syms.split(\",\").map(strided ? indicesStrided : indices)))),\n    post,\n    ret !== \"\" ? `return ${ret};` : \"\",\n];\nconst assembleG = (tpl, syms, ret = \"a\", pre, post, strided = false) => [\n    pre,\n    \"for(let i=a.length;--i>=0;) {\",\n    tpl(syms\n        .split(\",\")\n        .map(strided ? (x) => `${x}[i${x}+i*s${x}]` : (x) => `${x}[i]`)),\n    \"}\",\n    post,\n    ret !== null ? `return ${ret};` : \"\",\n];\nconst assembleS = (tpl, syms = ARGS_VV, ret = \"o\", pre = DEFAULT_OUT, post) => [\n    pre,\n    \"while(k-->0) {\",\n    tpl(syms.split(\",\").map((x) => `${x}[i${x}+k*s${x}]`)),\n    \"}\",\n    post,\n    ret !== null ? `return ${ret};` : \"\",\n];\n/** @internal */\nexport const defaultOut = (o, args) => `!${o} && (${o}=${args.split(\",\")[1]});`;\n/** @internal */\nexport const compile = (dim, tpl, args, syms = args, ret = \"a\", opJoin, pre, post, strided = false) => (new Function(args, assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\")));\n/** @internal */\nexport const compileHOF = (dim, fns, tpl, hofArgs, args, syms = args, ret = \"a\", opJoin = \"\", pre, post, strided = false) => {\n    return new Function(hofArgs, `return (${args})=>{${assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\")}}`)(...fns);\n};\n/** @internal */\nexport const compileG = (tpl, args, syms = args, ret = \"a\", pre, post, strided = false) => (new Function(args, assembleG(tpl, syms, ret, pre, post, strided).join(\"\")));\n/** @internal */\nexport const compileS = (tpl, args, syms = args, ret, pre, post) => new Function(args, assembleS(tpl, syms, ret, pre, post).join(\"\"));\n/** @internal */\nexport const compileGHOF = (fns, tpl, hofArgs, args, syms = args, ret = \"a\", pre, post, strided = false) => (new Function(hofArgs, `return (${args})=>{${assembleG(tpl, syms, ret, pre, post, strided).join(\"\")}}`)(...fns));\nexport const defOp = (tpl, args = ARGS_VV, syms, ret = \"o\", dispatch = 1, pre) => {\n    syms = syms || args;\n    pre = pre != null ? pre : defaultOut(ret, args);\n    const fn = vop(dispatch);\n    const $ = (dim) => fn.add(dim, compile(dim, tpl, args, syms, ret, \"\", pre));\n    fn.default(compileG(tpl, args, syms, ret, pre));\n    return [fn, $(2), $(3), $(4)];\n};\nexport const defFnOp = (op) => defOp(FN(op), ARGS_V);\nexport const defHofOp = (op, tpl, args = ARGS_V, syms, ret = \"o\", dispatch = 1, pre) => {\n    const _tpl = tpl || FN(\"op\");\n    syms = syms || args;\n    pre = pre != null ? pre : defaultOut(ret, args);\n    const fn = vop(dispatch);\n    const $ = (dim) => fn.add(dim, compileHOF(dim, [op], _tpl, \"op\", args, syms, ret, \"\", pre));\n    fn.default(compileGHOF([op], _tpl, \"op\", args, syms, ret, pre));\n    return [fn, $(2), $(3), $(4)];\n};\nexport const defOpS = (tpl, args = ARGS_VV, idxArgs = SARGS_VV, syms = ARGS_VV, ret = \"o\", pre, sizes = [2, 3, 4]) => [\n    compileS(tpl, `${args},k,${idxArgs}`, syms, ret, pre),\n    ...sizes.map((dim) => compile(dim, tpl, `${args},${idxArgs}`, syms, ret, \"\", pre != null ? pre : defaultOut(ret, args), \"\", true)),\n];\nexport const defHofOpS = (op, tpl, args = ARGS_VV, idxArgs = SARGS_VV, syms = ARGS_VV, ret = \"o\", pre, sizes = [2, 3, 4]) => [\n    new Function(\"op\", `return (${args},k,${idxArgs})=>{${assembleS(tpl, syms, ret, pre).join(\"\")}}`)(op),\n    ...sizes.map((dim) => compileHOF(dim, [op], tpl, \"op\", `${args},${idxArgs}`, syms, ret, \"\", pre != null ? pre : defaultOut(ret, args), \"\", true)),\n];\nexport const defMathOp = (op) => defOp(MATH(op));\nexport const defMathOpN = (op) => defOp(MATH_N(op), ARGS_VN);\nexport const defBitOp = (op, signed = false) => defOp((signed ? SIGNED : UNSIGNED)(op));\nexport const defBitOpN = (op, signed = false) => defOp((signed ? SIGNED_N : UNSIGNED_N)(op), ARGS_VN);\n","import { defOp } from \"./compile/emit.js\";\nimport { NEW_OUT, SET } from \"./compile/templates.js\";\nexport const [set, set2, set3, set4] = defOp(SET, \"o,a\", undefined, \"o\", 1, NEW_OUT);\n","import { compile } from \"@thi.ng/vectors/compile/emit\";\nimport { SET } from \"@thi.ng/vectors/compile/templates\";\nimport { set as _set, set4 } from \"@thi.ng/vectors/set\";\nconst $ = (dim) => _set.add(dim, compile(dim, SET, \"o,a\", undefined, \"o\"));\nexport const set = _set;\nexport const set22 = set4;\nexport const set23 = $(6);\nexport const set33 = $(9);\nexport const set44 = $(16);\n","import { vop } from \"@thi.ng/vectors/vop\";\nimport { IDENT22, IDENT23, IDENT33, IDENT44 } from \"./constants.js\";\nimport { set } from \"./set.js\";\n/**\n * Writes identity matrix into given matrix.\n */\nexport const identity = vop();\nexport const identity22 = identity.add(4, (m) => set(m, IDENT22));\nexport const identity23 = identity.add(6, (m) => set(m, IDENT23));\nexport const identity33 = identity.add(9, (m) => set(m, IDENT33));\nexport const identity44 = identity.add(16, (m) => set(m, IDENT44));\n","export const PI = Math.PI;\nexport const TAU = PI * 2;\nexport const HALF_PI = PI / 2;\nexport const THIRD_PI = PI / 3;\nexport const QUARTER_PI = PI / 4;\nexport const SIXTH_PI = PI / 6;\nexport const INV_PI = 1 / PI;\nexport const INV_TAU = 1 / TAU;\nexport const INV_HALF_PI = 1 / HALF_PI;\nexport const DEG2RAD = PI / 180;\nexport const RAD2DEG = 180 / PI;\nexport const PHI = (1 + Math.sqrt(5)) / 2;\nexport const SQRT2 = Math.SQRT2;\nexport const SQRT3 = Math.sqrt(3);\nexport const SQRT2_2 = SQRT2 / 2;\nexport const SQRT3_2 = SQRT3 / 2;\nexport const THIRD = 1 / 3;\nexport const TWO_THIRD = 2 / 3;\nexport const SIXTH = 1 / 6;\nexport let EPS = 1e-6;\n","import { DEG2RAD, HALF_PI, INV_HALF_PI, PI, RAD2DEG, TAU } from \"./api.js\";\n/**\n * Returns vector of `[sin(theta)*n, cos(theta)*n]`.\n *\n * @param theta -\n * @param n -\n */\nexport const sincos = (theta, n = 1) => [\n    Math.sin(theta) * n,\n    Math.cos(theta) * n,\n];\n/**\n * Returns vector of `[cos(theta)*n, sin(theta)*n]`.\n *\n * @param theta -\n * @param n -\n */\nexport const cossin = (theta, n = 1) => [\n    Math.cos(theta) * n,\n    Math.sin(theta) * n,\n];\n/**\n * Projects `theta` into [0 .. 2π] interval.\n *\n * @param theta -\n */\nexport const absTheta = (theta) => ((theta %= TAU), theta < 0 ? TAU + theta : theta);\nexport const absInnerAngle = (theta) => ((theta = Math.abs(theta)), theta > PI ? TAU - theta : theta);\n/**\n * Returns smallest absolute angle difference between `a` and `b`.\n * Result will be in [0 .. π] interval.\n *\n * @param a -\n * @param b -\n */\nexport const angleDist = (a, b) => absInnerAngle(absTheta((b % TAU) - (a % TAU)));\n/**\n * Like `Math.atan2`, but always returns angle in [0 .. TAU) interval.\n *\n * @param y -\n * @param x -\n */\nexport const atan2Abs = (y, x) => absTheta(Math.atan2(y, x));\n/**\n * Returns quadrant ID (0-3) of given angle (in radians).\n *\n * @param theta -\n */\nexport const quadrant = (theta) => (absTheta(theta) * INV_HALF_PI) | 0;\n/**\n * Converts angle to degrees.\n *\n * @param theta - angle in radians\n */\nexport const deg = (theta) => theta * RAD2DEG;\n/**\n * Converts angle to radians.\n *\n * @param theta - angle in degrees\n */\nexport const rad = (theta) => theta * DEG2RAD;\n/**\n * Cosecant. Approaches `±Infinity` for `theta` near multiples of π.\n *\n * @param theta - angle in radians\n */\nexport const csc = (theta) => 1 / Math.sin(theta);\n/**\n * Secant. Approaches `±Infinity` for `theta` near π/2 ± nπ\n *\n * @param theta - angle in radians\n */\nexport const sec = (theta) => 1 / Math.cos(theta);\n/**\n * Cotangent. Approaches `±Infinity` for `theta` near multiples of π.\n *\n * @param theta - angle in radians\n */\nexport const cot = (theta) => 1 / Math.tan(theta);\n/**\n * Law of Cosines. Takes length of two sides of a triangle and the inner\n * angle (in radians) between them. Returns length of third side.\n *\n * @param a -\n * @param b -\n * @param gamma -\n */\nexport const loc = (a, b, gamma) => Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(gamma));\n/**\n * Approximates cos(xπ) for x in [-1,1]\n *\n * @param x -\n */\nexport const normCos = (x) => {\n    const x2 = x * x;\n    return 1.0 + x2 * (-4 + 2 * x2);\n};\nconst __fastCos = (x) => {\n    const x2 = x * x;\n    return 0.99940307 + x2 * (-0.49558072 + 0.03679168 * x2);\n};\n/**\n * Fast cosine approximation using {@link normCos} (polynomial). Max. error\n * ~0.00059693\n *\n * In [0 .. 2π] interval, approx. 18-20% faster than `Math.cos` on V8.\n *\n * @param theta - in radians\n */\nexport const fastCos = (theta) => {\n    theta %= TAU;\n    theta < 0 && (theta = -theta);\n    switch ((theta * INV_HALF_PI) | 0) {\n        case 0:\n            return __fastCos(theta);\n        case 1:\n            return -__fastCos(PI - theta);\n        case 2:\n            return -__fastCos(theta - PI);\n        default:\n            return __fastCos(TAU - theta);\n    }\n};\n/**\n * {@link fastCos}\n *\n * @param theta - in radians\n */\nexport const fastSin = (theta) => fastCos(HALF_PI - theta);\n","import { compile, compileG } from \"./compile/emit.js\";\nimport { vop } from \"./vop.js\";\nconst $ = (dim) => magSq.add(dim, compile(dim, ([a]) => `${a}*${a}`, \"a\", \"a\", \"\", \"+\", \"return \", \";\"));\nexport const magSq = vop();\nmagSq.default(compileG(([a]) => `sum+=${a}*${a};`, \"a\", undefined, \"sum\", \"let sum=0;\"));\nexport const magSq2 = $(2);\nexport const magSq3 = $(3);\nexport const magSq4 = $(4);\n","import { defMathOpN } from \"./compile/emit.js\";\nexport const [mulN, mulN2, mulN3, mulN4] = defMathOpN(\"*\");\n","import { EPS } from \"@thi.ng/math/api\";\nimport { mag } from \"./mag.js\";\nimport { magSq2, magSq3, magSq4 } from \"./magsq.js\";\nimport { mulN, mulN2, mulN3, mulN4 } from \"./muln.js\";\nimport { set, set2, set3, set4 } from \"./set.js\";\n/**\n * Normalizes vector to given (optional) length (default: 1). If `out`\n * is null, modifies `v` in place.\n *\n * @param out -\n * @param v -\n * @param n -\n */\nexport const normalize = (out, v, n = 1) => {\n    !out && (out = v);\n    const m = mag(v);\n    return m >= EPS ? mulN(out, v, n / m) : out !== v ? set(out, v) : out;\n};\n/**\n * Optimized 2d version of generic {@link normalize}.\n * @param out\n * @param v\n * @param n\n */\nexport const normalize2 = (out, v, n = 1) => {\n    !out && (out = v);\n    const m = Math.sqrt(magSq2(v));\n    return m >= EPS ? mulN2(out, v, n / m) : out !== v ? set2(out, v) : out;\n};\n/**\n * Optimized 3d version of generic {@link normalize}.\n * @param out\n * @param v\n * @param n\n */\nexport const normalize3 = (out, v, n = 1) => {\n    !out && (out = v);\n    const m = Math.sqrt(magSq3(v));\n    return m >= EPS ? mulN3(out, v, n / m) : out !== v ? set3(out, v) : out;\n};\n/**\n * Optimized 4d version of generic {@link normalize}.\n * @param out\n * @param v\n * @param n\n */\nexport const normalize4 = (out, v, n = 1) => {\n    !out && (out = v);\n    const m = Math.sqrt(magSq4(v));\n    return m >= EPS ? mulN4(out, v, n / m) : out !== v ? set4(out, v) : out;\n};\n","export const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);\nexport const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);\nexport const setC4 = (out, x, y, z, w) => (!out && (out = []),\n    (out[0] = x),\n    (out[1] = y),\n    (out[2] = z),\n    (out[3] = w),\n    out);\nexport const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),\n    (out[0] = a),\n    (out[1] = b),\n    (out[2] = c),\n    (out[3] = d),\n    (out[4] = e),\n    (out[5] = f),\n    out);\nexport const setC = (out, ...xs) => {\n    !out && (out = []);\n    for (let i = 0, n = xs.length; i < n; i++) {\n        out[i] = xs[i];\n    }\n    return out;\n};\n","import { setC } from \"@thi.ng/vectors/setc\";\n/**\n * Converts 3x3 to 4x4 matrix and writes result to `out`. Creates new\n * matrix if `out` is `null`.\n *\n * @param out -\n * @param m33 -\n */\nexport const mat33to44 = (out, m33) => setC(out || [], \n// x\nm33[0], m33[1], m33[2], 0, \n// y\nm33[3], m33[4], m33[5], 0, \n// z\nm33[6], m33[7], m33[8], 0, \n// w\n0, 0, 0, 1);\n","import { sincos } from \"@thi.ng/math/angle\";\nimport { normalize3 } from \"@thi.ng/vectors/normalize\";\nimport { setC } from \"@thi.ng/vectors/setc\";\nimport { mat33to44 } from \"./m33-m44.js\";\n/**\n * Constructs a 3x3 matrix representing a rotation of `theta` around\n * `axis` and writes result to `out`. If `normalize` is true (default\n * false), non-destructively first normalizes axis vector.\n *\n * @param out -\n * @param axis -\n * @param theta -\n * @param normalize -\n */\nexport const rotationAroundAxis33 = (out, axis, theta, normalize = false) => {\n    const [x, y, z] = normalize ? normalize3([], axis) : axis;\n    const [s, c] = sincos(theta);\n    const t = 1 - c;\n    const xs = x * s;\n    const ys = y * s;\n    const zs = z * s;\n    const xt = x * t;\n    const yt = y * t;\n    const zt = z * t;\n    return setC(out || [], x * xt + c, y * xt + zs, z * xt - ys, x * yt - zs, y * yt + c, z * yt + xs, x * zt + ys, y * zt - xs, z * zt + c);\n};\n/**\n * Constructs a 4x4 matrix representing a rotation of `theta` around\n * `axis` and writes result to `out`. If `normalize` is true (default\n * false), non-destructively first normalizes axis vector.\n *\n * @param out -\n * @param axis -\n * @param theta -\n * @param normalize -\n */\nexport const rotationAroundAxis44 = (out, axis, theta, normalize = false) => mat33to44(out, rotationAroundAxis33([], axis, theta, normalize));\n","import { DEG2RAD } from \"@thi.ng/math/api\";\nimport { setC } from \"@thi.ng/vectors/setc\";\n/**\n * Constructs a 4x4 matrix representing the given view frustum. Creates\n * new matrix if `out` is `null`.\n *\n * @param out -\n * @param left -\n * @param right -\n * @param bottom -\n * @param top -\n * @param near -\n * @param far -\n */\nexport const frustum = (out, left, right, bottom, top, near, far) => {\n    const dx = 1 / (right - left);\n    const dy = 1 / (top - bottom);\n    const dz = 1 / (far - near);\n    return setC(out || [], near * 2 * dx, 0, 0, 0, 0, near * 2 * dy, 0, 0, (right + left) * dx, (top + bottom) * dy, -(far + near) * dz, -1, 0, 0, -(far * near * 2) * dz, 0);\n};\nexport const frustumBounds = (fovy, aspect, near, far) => {\n    const top = near * Math.tan((fovy * DEG2RAD) / 2);\n    const right = top * aspect;\n    return {\n        left: -right,\n        right,\n        bottom: -top,\n        top,\n        near,\n        far,\n    };\n};\n","import { frustum, frustumBounds } from \"./frustum.js\";\n/**\n * Creates a 4x4 matrix perspective projection matrix and writes result\n * to `out`.\n *\n * @param out -\n * @param fov -\n * @param aspect -\n * @param near -\n * @param far -\n */\nexport const perspective = (out, fov, aspect, near, far) => {\n    const f = frustumBounds(fov, aspect, near, far);\n    return frustum(out, f.left, f.right, f.bottom, f.top, f.near, f.far);\n};\n","import { setC3 } from \"./setc.js\";\nexport const cross2 = (a, b) => a[0] * b[1] - a[1] * b[0];\nexport const cross3 = (out, a, b) => setC3(out || a, a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]);\n","import { compile, compileG } from \"./compile/emit.js\";\nimport { DOT, DOT_G } from \"./compile/templates.js\";\nimport { vop } from \"./vop.js\";\nconst $ = (dim) => dot.add(dim, compile(dim, DOT, \"a,b\", undefined, \"\", \"+\", \"return \", \";\"));\nexport const dot = vop();\ndot.default(compileG(DOT_G, \"a,b\", undefined, \"s\", \"let s=0;\"));\nexport const dot2 = $(2);\nexport const dot3 = $(3);\nexport const dot4 = $(4);\n","import { defMathOp } from \"./compile/emit.js\";\nexport const [sub, sub2, sub3, sub4] = defMathOp(\"-\");\n","import { cross3 } from \"@thi.ng/vectors/cross\";\nimport { dot3 } from \"@thi.ng/vectors/dot\";\nimport { normalize3 } from \"@thi.ng/vectors/normalize\";\nimport { setC } from \"@thi.ng/vectors/setc\";\nimport { sub3 } from \"@thi.ng/vectors/sub\";\n/**\n * Constructs a 4x4 camera matrix for given `eye` position, look-at\n * `target` (both in world space) and normalized `up` vector. Creates\n * new matrix if `out` is `null`.\n *\n * @param out -\n * @param eye -\n * @param target -\n * @param up -\n */\nexport const lookAt = (out, eye, target, up) => {\n    const z = normalize3(null, sub3([], eye, target));\n    const x = normalize3(null, cross3([], up, z));\n    const y = normalize3(null, cross3([], z, x));\n    return setC(out || [], x[0], y[0], z[0], 0, x[1], y[1], z[1], 0, x[2], y[2], z[2], 0, -dot3(eye, x), -dot3(eye, y), -dot3(eye, z), 1);\n};\n","import { compile } from \"./compile/emit.js\";\nimport { DOT, SARGS_V } from \"./compile/templates.js\";\nexport const dotS = (a, b, n, ia = 0, ib = 0, sa = 1, sb = 1) => {\n    let sum = 0;\n    for (; n-- > 0; ia += sa, ib += sb)\n        sum += a[ia] * b[ib];\n    return sum;\n};\nconst $ = (dim) => compile(dim, DOT, `o,a,${SARGS_V}`, \"o,a\", \"\", \"+\", \"return \", \";\", true);\nexport const dotS2 = $(2);\nexport const dotS3 = $(3);\nexport const dotS4 = $(4);\n","import { dotS2, dotS3, dotS4 } from \"@thi.ng/vectors/dots\";\nimport { setC, setC4, setC6 } from \"@thi.ng/vectors/setc\";\nimport { vop } from \"@thi.ng/vectors/vop\";\n/**\n * Multi-method. Performs matrix-matrix multiplication. If `out` is not\n * given, writes result in `a`.\n *\n * @param out -\n * @param a -\n * @param b -\n */\nexport const mulM = vop(1);\n/**\n * 2x2 matrix-matrix multiplication. If `out` is not given, writes\n * result in `a`.\n *\n * @param out -\n * @param a -\n * @param b -\n */\nexport const mulM22 = mulM.add(4, (out, a, b) => setC4(out || a, dotS2(a, b, 0, 0, 2), dotS2(a, b, 1, 0, 2), dotS2(a, b, 0, 2, 2), dotS2(a, b, 1, 2, 2)));\n/**\n * 2x3 matrix-matrix multiplication. If `out` is not given, writes\n * result in `a`.\n *\n * @param out -\n * @param a -\n * @param b -\n */\nexport const mulM23 = mulM.add(6, (out, a, b) => setC6(out || a, dotS2(a, b, 0, 0, 2), dotS2(a, b, 1, 0, 2), dotS2(a, b, 0, 2, 2), dotS2(a, b, 1, 2, 2), dotS2(a, b, 0, 4, 2) + a[4], dotS2(a, b, 1, 4, 2) + a[5]));\n/**\n * 3x3 matrix-matrix multiplication. If `out` is not given, writes\n * result in `a`.\n *\n * @param out -\n * @param a -\n * @param b -\n */\nexport const mulM33 = mulM.add(9, (out, a, b) => setC(out || a, dotS3(a, b, 0, 0, 3), dotS3(a, b, 1, 0, 3), dotS3(a, b, 2, 0, 3), dotS3(a, b, 0, 3, 3), dotS3(a, b, 1, 3, 3), dotS3(a, b, 2, 3, 3), dotS3(a, b, 0, 6, 3), dotS3(a, b, 1, 6, 3), dotS3(a, b, 2, 6, 3)));\n/**\n * 4x4 matrix-matrix multiplication. If `out` is not given, writes\n * result in `a`.\n *\n * @param out -\n * @param a -\n * @param b -\n */\nexport const mulM44 = mulM.add(16, (out, a, b) => setC(out || a, dotS4(a, b, 0, 0, 4), dotS4(a, b, 1, 0, 4), dotS4(a, b, 2, 0, 4), dotS4(a, b, 3, 0, 4), dotS4(a, b, 0, 4, 4), dotS4(a, b, 1, 4, 4), dotS4(a, b, 2, 4, 4), dotS4(a, b, 3, 4, 4), dotS4(a, b, 0, 8, 4), dotS4(a, b, 1, 8, 4), dotS4(a, b, 2, 8, 4), dotS4(a, b, 3, 8, 4), dotS4(a, b, 0, 12, 4), dotS4(a, b, 1, 12, 4), dotS4(a, b, 2, 12, 4), dotS4(a, b, 3, 12, 4)));\n","import { mulM } from \"./mulm.js\";\n/**\n * Concatenates / multiplies given matrices in left-to-right order. A\n * minimum of 2 input matrices must be given. If `out` is null, writes\n * result into `a`.\n *\n * @param out -\n * @param a -\n * @param b -\n * @param xs -\n */\nexport const concat = (out, a, b, ...xs) => xs.reduce((acc, x) => mulM(acc, acc, x), mulM(out, a, b));\n","import { dotS2, dotS3, dotS4 } from \"@thi.ng/vectors/dots\";\nimport { setC2, setC3, setC4 } from \"@thi.ng/vectors/setc\";\nimport { vop } from \"@thi.ng/vectors/vop\";\n/**\n * Matrix-vector multiplication. Supports in-place modification, i.e. if\n * `out === v`.\n *\n * @param out -\n * @param m -\n * @param v -\n */\nexport const mulV = vop(1);\n/**\n * Multiplies 2x2 matrix `m` with 2D vector `v`. Supports in-place\n * modification, i.e. if `out === v`.\n *\n * @param out -\n * @param m -\n * @param v -\n */\nexport const mulV22 = mulV.add(4, (out, m, v) => setC2(out || v, dotS2(m, v, 0, 0, 2), dotS2(m, v, 1, 0, 2)));\n/**\n * Multiplies 2x3 matrix `m` with 2D vector `v`. Supports in-place\n * modification, i.e. if `out === v`.\n *\n * @param out -\n * @param m -\n * @param v -\n */\nexport const mulV23 = mulV.add(6, (out, m, v) => setC2(out || v, dotS2(m, v, 0, 0, 2) + m[4], dotS2(m, v, 1, 0, 2) + m[5]));\n/**\n * Multiplies 3x3 matrix `m` with 3D vector `v`. Supports in-place\n * modification, i.e. if `out === v`.\n *\n * @param out -\n * @param m -\n * @param v -\n */\nexport const mulV33 = mulV.add(9, (out, m, v) => setC3(out || v, dotS3(m, v, 0, 0, 3), dotS3(m, v, 1, 0, 3), dotS3(m, v, 2, 0, 3)));\n/**\n * Multiplies 4x4 matrix `m` with 4D vector `v`. Supports in-place\n * modification, i.e. if `out === v`.\n *\n * @param out -\n * @param m -\n * @param v -\n */\nexport const mulV44 = mulV.add(16, (out, m, v) => setC4(out || v, dotS4(m, v, 0, 0, 4), dotS4(m, v, 1, 0, 4), dotS4(m, v, 2, 0, 4), dotS4(m, v, 3, 0, 4)));\n/**\n * Multiplies 4x4 matrix `m` with 3D vector `v` and assumes initial\n * `w=1`, i.e. the vector is interpreted as `[x,y,z,1]`. After\n * transformation applies perspective divide of the resulting XYZ\n * components. Returns `undefined` if the computed perspective divisor\n * is zero (and would cause `NaN` results).\n *\n * @param out -\n * @param m -\n * @param v -\n */\nexport const mulV344 = (out, m, v) => {\n    const w = dotS3(m, v, 3, 0, 4) + m[15];\n    return w !== 0\n        ? setC3(out || v, (dotS3(m, v, 0, 0, 4) + m[12]) / w, (dotS3(m, v, 1, 0, 4) + m[13]) / w, (dotS3(m, v, 2, 0, 4) + m[14]) / w)\n        : undefined;\n};\n/**\n * Multiplies quaternion `q` with 3D vector `v`. Returns transformed\n * vector or modifies in-place if `out` is null or `v`.\n *\n * @param out -\n * @param q -\n * @param v -\n */\nexport const mulVQ = (out, q, v) => {\n    const { 0: px, 1: py, 2: pz } = v;\n    const { 0: qx, 1: qy, 2: qz, 3: qw } = q;\n    const ix = qw * px + qy * pz - qz * py;\n    const iy = qw * py + qz * px - qx * pz;\n    const iz = qw * pz + qx * py - qy * px;\n    const iw = -qx * px - qy * py - qz * pz;\n    return setC3(out || v, ix * qw + iw * -qx + iy * -qz - iz * -qy, iy * qw + iw * -qy + iz * -qx - ix * -qz, iz * qw + iw * -qz + ix * -qy - iy * -qx);\n};\n","/**\n * Returns pairwise product sum of given components.\n *\n * @param a -\n * @param b -\n * @param c -\n * @param d -\n */\nexport const dotC4 = (a, b, c, d) => a * b + c * d;\n/**\n * Returns pairwise product sum of given components.\n *\n * @param a -\n * @param b -\n * @param c -\n * @param d -\n * @param e -\n * @param f -\n */\nexport const dotC6 = (a, b, c, d, e, f) => a * b + c * d + e * f;\n/**\n * Returns pairwise product sum of given components.\n *\n * @param a -\n * @param b -\n * @param c -\n * @param d -\n * @param e -\n * @param f -\n * @param g -\n * @param h -\n */\nexport const dotC8 = (a, b, c, d, e, f, g, h) => a * b + c * d + e * f + g * h;\n","import { dotC4, dotC6 } from \"@thi.ng/vectors/dotc\";\nconst dp4 = dotC4;\nconst dp6 = dotC6;\nexport const det22 = (m) => dp4(m[0], m[3], -m[1], m[2]);\nexport const det23 = det22;\nexport const det33 = (m) => {\n    const [m00, m01, m02, m10, m11, m12, m20, m21, m22] = m;\n    const d01 = dp4(m22, m11, -m12, m21);\n    const d11 = dp4(m12, m20, -m22, m10);\n    const d21 = dp4(m21, m10, -m11, m20);\n    return dp6(m00, d01, m01, d11, m02, d21);\n};\nexport const detCoeffs44 = (m) => {\n    const [m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33,] = m;\n    return [\n        dp4(m00, m11, -m01, m10),\n        dp4(m00, m12, -m02, m10),\n        dp4(m00, m13, -m03, m10),\n        dp4(m01, m12, -m02, m11),\n        dp4(m01, m13, -m03, m11),\n        dp4(m02, m13, -m03, m12),\n        dp4(m20, m31, -m21, m30),\n        dp4(m20, m32, -m22, m30),\n        dp4(m20, m33, -m23, m30),\n        dp4(m21, m32, -m22, m31),\n        dp4(m21, m33, -m23, m31),\n        dp4(m22, m33, -m23, m32),\n    ];\n};\nexport const det44FromCoeffs = (d) => dp6(d[0], d[11], -d[1], d[10], d[2], d[9]) +\n    dp6(d[3], d[8], -d[4], d[7], d[5], d[6]);\nexport const det44 = (m) => det44FromCoeffs(detCoeffs44(m));\n","import { dotC4, dotC6 } from \"@thi.ng/vectors/dotc\";\nimport { magSq4 } from \"@thi.ng/vectors/magsq\";\nimport { setC, setC4, setC6 } from \"@thi.ng/vectors/setc\";\nimport { vop } from \"@thi.ng/vectors/vop\";\nimport { det44FromCoeffs, detCoeffs44 } from \"./determinant.js\";\nconst dp4 = dotC4;\nconst dp6 = dotC6;\n/**\n * Matrix inversion. Returns `undefined` if matrix is not invertible.\n * Mutates `mat` if `out` is `null`.\n *\n * @param out -\n * @param mat -\n */\nexport const invert = vop(1);\nexport const invert22 = invert.add(4, (out, m) => {\n    const [m00, m01, m10, m11] = m;\n    let det = dp4(m00, m11, -m01, m10);\n    if (det === 0)\n        return;\n    det = 1.0 / det;\n    return setC4(out || m, m11 * det, -m01 * det, -m10 * det, m00 * det);\n});\nexport const invert23 = invert.add(6, (out, m) => {\n    const [m00, m01, m10, m11, m20, m21] = m;\n    let det = dp4(m00, m11, -m01, m10);\n    if (det === 0)\n        return;\n    det = 1.0 / det;\n    return setC6(out || m, m11 * det, -m01 * det, -m10 * det, m00 * det, dp4(m10, m21, -m11, m20) * det, dp4(m01, m20, -m00, m21) * det);\n});\nexport const invert33 = invert.add(9, (out, m) => {\n    const [m00, m01, m02, m10, m11, m12, m20, m21, m22] = m;\n    const d01 = dp4(m22, m11, -m12, m21);\n    const d11 = dp4(m12, m20, -m22, m10);\n    const d21 = dp4(m21, m10, -m11, m20);\n    let det = dp6(m00, d01, m01, d11, m02, d21);\n    if (det === 0)\n        return;\n    det = 1.0 / det;\n    return setC(out || m, d01 * det, dp4(-m22, m01, m02, m21) * det, dp4(m12, m01, -m02, m11) * det, d11 * det, dp4(m22, m00, -m02, m20) * det, dp4(-m12, m00, m02, m10) * det, d21 * det, dp4(-m21, m00, m01, m20) * det, dp4(m11, m00, -m01, m10) * det);\n});\nexport const invert44 = invert.add(16, (out, m) => {\n    const coeffs = detCoeffs44(m);\n    let det = det44FromCoeffs(coeffs);\n    if (det === 0)\n        return;\n    det = 1.0 / det;\n    const [m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33,] = m;\n    const [d00, d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11] = coeffs;\n    return setC(out || m, dp6(m11, d11, -m12, d10, m13, d09) * det, dp6(-m01, d11, m02, d10, -m03, d09) * det, dp6(m31, d05, -m32, d04, m33, d03) * det, dp6(-m21, d05, m22, d04, -m23, d03) * det, dp6(-m10, d11, m12, d08, -m13, d07) * det, dp6(m00, d11, -m02, d08, m03, d07) * det, dp6(-m30, d05, m32, d02, -m33, d01) * det, dp6(m20, d05, -m22, d02, m23, d01) * det, dp6(m10, d10, -m11, d08, m13, d06) * det, dp6(-m00, d10, m01, d08, -m03, d06) * det, dp6(m30, d04, -m31, d02, m33, d00) * det, dp6(-m20, d04, m21, d02, -m23, d00) * det, dp6(-m10, d09, m11, d07, -m12, d06) * det, dp6(m00, d09, -m01, d07, m02, d06) * det, dp6(-m30, d03, m31, d01, -m32, d00) * det, dp6(m20, d03, -m21, d01, m22, d00) * det);\n});\nexport const invertQ = (out, a) => {\n    let d = magSq4(a);\n    d = d > 0 ? -1 / d : 0;\n    return setC4(out || a, a[0] * d, a[1] * d, a[2] * d, a[3] * -d);\n};\n","export const defError = (prefix, suffix = (msg) => (msg !== undefined ? \": \" + msg : \"\")) => class extends Error {\n    constructor(msg) {\n        super(prefix(msg) + suffix(msg));\n    }\n};\n","import { defError } from \"./deferror.js\";\nexport const IllegalArityError = defError(() => \"illegal arity\");\nexport const illegalArity = (n) => {\n    throw new IllegalArityError(n);\n};\n","import { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nexport function comp(...fns) {\n    let [a, b, c, d, e, f, g, h, i, j] = fns;\n    switch (fns.length) {\n        case 0:\n            illegalArity(0);\n        case 1:\n            return a;\n        case 2:\n            return (...xs) => a(b(...xs));\n        case 3:\n            return (...xs) => a(b(c(...xs)));\n        case 4:\n            return (...xs) => a(b(c(d(...xs))));\n        case 5:\n            return (...xs) => a(b(c(d(e(...xs)))));\n        case 6:\n            return (...xs) => a(b(c(d(e(f(...xs))))));\n        case 7:\n            return (...xs) => a(b(c(d(e(f(g(...xs)))))));\n        case 8:\n            return (...xs) => a(b(c(d(e(f(g(h(...xs))))))));\n        case 9:\n            return (...xs) => a(b(c(d(e(f(g(h(i(...xs)))))))));\n        case 10:\n        default:\n            const fn = (...xs) => a(b(c(d(e(f(g(h(i(j(...xs))))))))));\n            return fns.length === 10 ? fn : comp(fn, ...fns.slice(10));\n    }\n}\nexport function compL(...fns) {\n    return comp.apply(null, fns.reverse());\n}\n/**\n * @deprecated renamed to {@link (compL:1)}\n */\nexport const compI = compL;\n","export const implementsFunction = (x, fn) => x != null && typeof x[fn] === \"function\";\n","import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nexport const ensureTransducer = (x) => implementsFunction(x, \"xform\") ? x.xform() : x;\n","import { comp as _comp } from \"@thi.ng/compose/comp\";\nimport { ensureTransducer } from \"./ensure.js\";\nexport function comp(...fns) {\n    fns = fns.map(ensureTransducer);\n    return _comp.apply(null, fns);\n}\n","export const isIterable = (x) => x != null && typeof x[Symbol.iterator] === \"function\";\n","/**\n * Reducer composition helper, internally used by various transducers\n * during initialization. Takes existing reducer `rfn` (a 3-tuple) and a\n * reducing function `fn`. Returns a new reducer tuple.\n *\n * @remarks\n * `rfn[2]` reduces values of type `B` into an accumulator of type `A`.\n * `fn` accepts values of type `C` and produces interim results of type\n * `B`, which are then (possibly) passed to the \"inner\" `rfn[2]`\n * function. Therefore the resulting reducer takes inputs of `C` and an\n * accumulator of type `A`.\n *\n * It is assumed that `fn` internally calls `rfn[2]` to pass its own\n * results for further processing by the nested reducer `rfn`.\n *\n * @example\n * ```ts\n * compR(rfn, fn)\n * // [rfn[0], rfn[1], fn]\n * ```\n *\n * @param rfn -\n * @param fn -\n */\nexport const compR = (rfn, fn) => [rfn[0], rfn[1], fn];\n","export const DEFAULT_EPS = 1e-6;\n/**\n * Internal use only. **Do NOT use in user land code!**\n *\n * @internal\n */\nexport const SEMAPHORE = Symbol();\n/**\n * No-effect placeholder function.\n */\nexport const NO_OP = () => { };\n/**\n * Catch-all event ID\n */\nexport const EVENT_ALL = \"*\";\nexport const EVENT_ENABLE = \"enable\";\nexport const EVENT_DISABLE = \"disable\";\n","export class Reduced {\n    constructor(val) {\n        this.value = val;\n    }\n    deref() {\n        return this.value;\n    }\n}\nexport const reduced = (x) => new Reduced(x);\nexport const isReduced = (x) => x instanceof Reduced;\nexport const ensureReduced = (x) => x instanceof Reduced ? x : new Reduced(x);\nexport const unreduced = (x) => (x instanceof Reduced ? x.deref() : x);\n","import { implementsFunction } from \"@thi.ng/checks/implements-function\";\nimport { isArrayLike } from \"@thi.ng/checks/is-arraylike\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { isReduced, unreduced } from \"./reduced.js\";\nconst parseArgs = (args) => args.length === 2\n    ? [undefined, args[1]]\n    : args.length === 3\n        ? [args[1], args[2]]\n        : illegalArity(args.length);\nexport function reduce(...args) {\n    const rfn = args[0];\n    const init = rfn[0];\n    const complete = rfn[1];\n    const reduce = rfn[2];\n    args = parseArgs(args);\n    const acc = args[0] == null ? init() : args[0];\n    const xs = args[1];\n    return unreduced(complete(implementsFunction(xs, \"$reduce\")\n        ? xs.$reduce(reduce, acc)\n        : isArrayLike(xs)\n            ? reduceArray(reduce, acc, xs)\n            : reduceIterable(reduce, acc, xs)));\n}\nexport function reduceRight(...args) {\n    const rfn = args[0];\n    const init = rfn[0];\n    const complete = rfn[1];\n    const reduce = rfn[2];\n    args = parseArgs(args);\n    let acc = args[0] == null ? init() : args[0];\n    const xs = args[1];\n    for (let i = xs.length; i-- > 0;) {\n        acc = reduce(acc, xs[i]);\n        if (isReduced(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return unreduced(complete(acc));\n}\nconst reduceArray = (rfn, acc, xs) => {\n    for (let i = 0, n = xs.length; i < n; i++) {\n        acc = rfn(acc, xs[i]);\n        if (isReduced(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return acc;\n};\nconst reduceIterable = (rfn, acc, xs) => {\n    for (let x of xs) {\n        acc = rfn(acc, x);\n        if (isReduced(acc)) {\n            acc = acc.deref();\n            break;\n        }\n    }\n    return acc;\n};\n/**\n * Convenience helper for building a full {@link Reducer} using the identity\n * function (i.e. `(x) => x`) as completion step (true for 90% of all\n * bundled transducers).\n *\n * @param init - init step of reducer\n * @param rfn - reduction step of reducer\n */\nexport const reducer = (init, rfn) => [init, (acc) => acc, rfn];\nexport const $$reduce = (rfn, args) => {\n    const n = args.length - 1;\n    return isIterable(args[n])\n        ? args.length > 1\n            ? reduce(rfn.apply(null, args.slice(0, n)), args[n])\n            : reduce(rfn(), args[0])\n        : undefined;\n};\n","export const isArrayLike = (x) => x != null && typeof x !== \"function\" && x.length !== undefined;\n","import { reducer } from \"./reduce.js\";\nexport function push(xs) {\n    return xs\n        ? [...xs]\n        : reducer(() => [], (acc, x) => (acc.push(x), acc));\n}\n","import { NO_OP, SEMAPHORE } from \"@thi.ng/api/api\";\nimport { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { push } from \"./push.js\";\nimport { isReduced, unreduced } from \"./reduced.js\";\n/**\n * Takes a transducer and input iterable. Returns iterator of\n * transformed results.\n *\n * @param xform -\n * @param xs -\n */\nexport function* iterator(xform, xs) {\n    const rfn = ensureTransducer(xform)(push());\n    const complete = rfn[1];\n    const reduce = rfn[2];\n    for (let x of xs) {\n        const y = reduce([], x);\n        if (isReduced(y)) {\n            yield* unreduced(complete(y.deref()));\n            return;\n        }\n        if (y.length) {\n            yield* y;\n        }\n    }\n    yield* unreduced(complete([]));\n}\n/**\n * Optimized version of {@link iterator} for transducers which are\n * guaranteed to:\n *\n * 1) Only produce none or a single result per input\n * 2) Do not require a `completion` reduction step\n *\n * @param xform -\n * @param xs -\n */\nexport function* iterator1(xform, xs) {\n    const reduce = (ensureTransducer(xform)([NO_OP, NO_OP, (_, x) => x]))[2];\n    for (let x of xs) {\n        let y = reduce(SEMAPHORE, x);\n        if (isReduced(y)) {\n            y = unreduced(y.deref());\n            if (y !== SEMAPHORE) {\n                yield y;\n            }\n            return;\n        }\n        if (y !== SEMAPHORE) {\n            yield y;\n        }\n    }\n}\n/**\n * Helper function used by various transducers to wrap themselves as\n * transforming iterators. Delegates to {@link iterator1} by default.\n *\n * @param xform -\n * @param args -\n * @param impl -\n *\n * @internal\n */\nexport const __iter = (xform, args, impl = iterator1) => {\n    const n = args.length - 1;\n    return isIterable(args[n])\n        ? args.length > 1\n            ? impl(xform.apply(null, args.slice(0, n)), args[n])\n            : impl(xform(), args[0])\n        : undefined;\n};\n","import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator1 } from \"./iterator.js\";\nexport function map(fn, src) {\n    return isIterable(src)\n        ? iterator1(map(fn), src)\n        : (rfn) => {\n            const r = rfn[2];\n            return compR(rfn, (acc, x) => r(acc, fn(x)));\n        };\n}\n/**\n * Convenience wrapper for {@link map} to transform an iterable with given `fn`\n * and immediatedly collect results into an array.\n */\nexport const mapA = (fn, src) => [\n    ...map(fn, src),\n];\n","import { compR } from \"./compr.js\";\nimport { __iter } from \"./iterator.js\";\nexport function mapIndexed(...args) {\n    return (__iter(mapIndexed, args) ||\n        ((rfn) => {\n            const r = rfn[2];\n            const fn = args[0];\n            let i = args[1] || 0;\n            return compR(rfn, (acc, x) => r(acc, fn(i++, x)));\n        }));\n}\n","import { isReduced } from \"./reduced.js\";\nexport function range(from, to, step) {\n    return new Range(from, to, step);\n}\n/**\n * Simple class wrapper around given range interval and implementing\n * `Iterable` and {@link IReducible} interfaces, the latter is used to\n * accelerate use with {@link (reduce:1)}.\n */\nexport class Range {\n    constructor(from, to, step) {\n        if (from === undefined) {\n            from = 0;\n            to = Infinity;\n        }\n        else if (to === undefined) {\n            to = from;\n            from = 0;\n        }\n        step = step === undefined ? (from < to ? 1 : -1) : step;\n        this.from = from;\n        this.to = to;\n        this.step = step;\n    }\n    *[Symbol.iterator]() {\n        let { from, to, step } = this;\n        if (step > 0) {\n            while (from < to) {\n                yield from;\n                from += step;\n            }\n        }\n        else if (step < 0) {\n            while (from > to) {\n                yield from;\n                from += step;\n            }\n        }\n    }\n    $reduce(rfn, acc) {\n        const step = this.step;\n        if (step > 0) {\n            for (let i = this.from, n = this.to; i < n && !isReduced(acc); i += step) {\n                acc = rfn(acc, i);\n            }\n        }\n        else {\n            for (let i = this.from, n = this.to; i > n && !isReduced(acc); i += step) {\n                acc = rfn(acc, i);\n            }\n        }\n        return acc;\n    }\n}\n","import { reducer } from \"./reduce.js\";\nexport function str(sep, xs) {\n    sep = sep || \"\";\n    let first = true;\n    return xs\n        ? [...xs].join(sep)\n        : reducer(() => \"\", (acc, x) => ((acc = first ? acc + x : acc + sep + x),\n            (first = false),\n            acc));\n}\n","import { isIterable } from \"@thi.ng/checks/is-iterable\";\nimport { compR } from \"./compr.js\";\nimport { iterator } from \"./iterator.js\";\nimport { ensureReduced, reduced } from \"./reduced.js\";\nexport function take(n, src) {\n    return isIterable(src)\n        ? iterator(take(n), src)\n        : (rfn) => {\n            const r = rfn[2];\n            let m = n;\n            return compR(rfn, (acc, x) => --m > 0\n                ? r(acc, x)\n                : m === 0\n                    ? ensureReduced(r(acc, x))\n                    : reduced(acc));\n        };\n}\n","import { illegalArity } from \"@thi.ng/errors/illegal-arity\";\nimport { ensureTransducer } from \"./ensure.js\";\nimport { map } from \"./map.js\";\nimport { reduce, reduceRight } from \"./reduce.js\";\nexport function transduce(...args) {\n    return $transduce(transduce, reduce, args);\n}\nexport function transduceRight(...args) {\n    return $transduce(transduceRight, reduceRight, args);\n}\nconst $transduce = (tfn, rfn, args) => {\n    let acc, xs;\n    switch (args.length) {\n        case 4:\n            xs = args[3];\n            acc = args[2];\n            break;\n        case 3:\n            xs = args[2];\n            break;\n        case 2:\n            return map((x) => tfn(args[0], args[1], x));\n        default:\n            illegalArity(args.length);\n    }\n    return rfn(ensureTransducer(args[0])(args[1]), acc, xs);\n};\n","export function* zip(...src) {\n    const iters = src.map((s) => s[Symbol.iterator]());\n    while (true) {\n        const tuple = [];\n        for (let i of iters) {\n            let v = i.next();\n            if (v.done) {\n                return;\n            }\n            tuple.push(v.value);\n        }\n        yield tuple;\n    }\n}\n","import { defError } from \"./deferror.js\";\nexport const UnsupportedOperationError = defError(() => \"unsupported operation\");\nexport const unsupported = (msg) => {\n    throw new UnsupportedOperationError(msg);\n};\n","import { unsupported } from \"@thi.ng/errors/unsupported\";\n/**\n * Specialized / optimized version of {@link @thi.ng/defmulti# | @thi.ng/defmulti} for\n * vector operations. Uses simplified logic to dispatch on length\n * (vector size) of `dispatch` argument.\n *\n * @param dispatch - arg index\n */\nexport const vop = (dispatch = 0) => {\n    const impls = new Array(5);\n    let fallback;\n    const fn = (...args) => {\n        const g = impls[args[dispatch].length] || fallback;\n        return g\n            ? g(...args)\n            : unsupported(`no impl for vec size ${args[dispatch].length}`);\n    };\n    fn.add = (dim, fn) => (impls[dim] = fn);\n    fn.default = (fn) => (fallback = fn);\n    fn.impl = (dim) => impls[dim] || fallback;\n    // fn.impls = impls;\n    return fn;\n};\n","/** @internal */\nexport const ARGS_V = \"o,a\";\n/** @internal */\nexport const ARGS_VV = \"o,a,b\";\n/** @internal */\nexport const ARGS_VVV = \"o,a,b,c\";\n/** @internal */\nexport const ARGS_VN = \"o,a,n\";\n/** @internal */\nexport const ARGS_VNV = \"o,a,n,b\";\n/** @internal */\nexport const ARGS_VVN = \"o,a,b,n\";\n/** @internal */\nexport const SARGS_V = \"io=0,ia=0,so=1,sa=1\";\n/** @internal */\nexport const SARGS_VV = \"io=0,ia=0,ib=0,so=1,sa=1,sb=1\";\n/** @internal */\nexport const SARGS_VVV = \"io=0,ia=0,ib=0,ic=0,so=1,sa=1,sb=1,sc=1\";\n/** @internal */\nexport const DEFAULT_OUT = \"!o&&(o=a);\";\n/** @internal */\nexport const NEW_OUT = \"!o&&(o=[]);\";\n/** @internal */\nexport const NEW_OUT_A = \"!a&&(a=[]);\";\n/** @internal */\n// prettier-ignore\nexport const MATH = (op) => ([o, a, b]) => `${o}=${a}${op}${b};`;\n/** @internal */\n// prettier-ignore\nexport const MATH_N = (op) => ([o, a]) => `${o}=${a}${op}n;`;\n/** @internal */\n// prettier-ignore\nexport const MATH2 = (op1, op2) => ([o, a, b, c]) => `${o}=(${a}${op1}${b})${op2}${c};`;\n/** @internal */\n// prettier-ignore\nexport const MATH2_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}${b})${op2}n;`;\n/** @internal */\n// prettier-ignore\nexport const MATH2A_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}n)${op2}${b};`;\n/** @internal */\n// prettier-ignore\nexport const SIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})|0;`;\n/** @internal */\n// prettier-ignore\nexport const UNSIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})>>>0;`;\n/** @internal */\n// prettier-ignore\nexport const SIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)|0;`;\n/** @internal */\n// prettier-ignore\nexport const UNSIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)>>>0;`;\n/** @internal */\n// prettier-ignore\nexport const FN = (op = \"op\") => ([o, a]) => `${o}=${op}(${a});`;\n/** @internal */\n// prettier-ignore\nexport const FN2 = (op = \"op\") => ([o, a, b]) => `${o}=${op}(${a},${b});`;\n/** @internal */\n// prettier-ignore\nexport const FN3 = (op = \"op\") => ([o, a, b, c]) => `${o}=${op}(${a},${b},${c});`;\n/** @internal */\n// prettier-ignore\nexport const FN5 = (op = \"op\") => ([o, a, b, c, d, e]) => `${o}=${op}(${a},${b},${c},${d},${e});`;\n/** @internal */\n// prettier-ignore\nexport const FN_N = (op = \"op\") => ([o, a]) => `${o}=${op}(${a},n);`;\n/** @internal */\nexport const DOT = ([a, b]) => `${a}*${b}`;\n/** @internal */\nexport const DOT_G = ([a, b]) => `s+=${a}*${b};`;\n/** @internal */\nexport const SET = ([o, a]) => `${o}=${a};`;\n/** @internal */\nexport const SET_N = ([a]) => `${a}=n;`;\n/** @internal */\nexport const MIX = ([o, a, b, c]) => `${o}=${a}+(${b}-${a})*${c};`;\n/** @internal */\nexport const MIX_N = ([o, a, b]) => `${o}=${a}+(${b}-${a})*n;`;\n","import { comp } from \"@thi.ng/transducers/comp\";\nimport { map } from \"@thi.ng/transducers/map\";\nimport { mapIndexed } from \"@thi.ng/transducers/map-indexed\";\nimport { range } from \"@thi.ng/transducers/range\";\nimport { str } from \"@thi.ng/transducers/str\";\nimport { take } from \"@thi.ng/transducers/take\";\nimport { transduce } from \"@thi.ng/transducers/transduce\";\nimport { zip } from \"@thi.ng/transducers/zip\";\nimport { vop } from \"../vop.js\";\nimport { ARGS_V, ARGS_VN, ARGS_VV, DEFAULT_OUT, FN, MATH, MATH_N, SARGS_VV, SIGNED, SIGNED_N, UNSIGNED, UNSIGNED_N, } from \"./templates.js\";\n/**\n * HOF array index lookup gen to provide optimized versions of:\n *\n * @example\n * ```ts\n * lookup(\"a\")(0) // a[ia]\n * lookup(\"a\")(1) // a[ia * sa]\n * lookup(\"a\")(2) // a[ia + 2 * sa]\n * ```\n *\n * @param sym -\n */\nconst lookup = (sym) => (i) => i > 1\n    ? `${sym}[i${sym}+${i}*s${sym}]`\n    : i == 1\n        ? `${sym}[i${sym}+s${sym}]`\n        : `${sym}[i${sym}]`;\n/**\n * Infinite iterator of strided index lookups for `sym`.\n *\n * @param sym -\n */\nconst indicesStrided = (sym) => map(lookup(sym), range());\n/**\n * Infinite iterator of simple (non-strided) index lookups for `sym`.\n *\n * @param sym -\n */\nconst indices = (sym) => map((i) => `${sym}[${i}]`, range());\n/**\n * Code generator for loop-unrolled vector operations. Takes a vector\n * size `dim`, a code template function `tpl` and an array of symbol\n * names participating in the template. For each symbol, creates\n * iterator of index lookups (e.g. `a[0]` or `a[ia+k*sa]`), forms them\n * into tuples and passes them to template to generate code and joins\n * generated result with `opJoin` separator (default:\n * `\"\"`).\n *\n * If the optional `ret` arg is not `null` (default `\"a\"`), appends a\n * `return` statement to the result array, using `ret` as return value.\n * Returns array of source code lines.\n *\n * The optional `pre` and `post` strings can be used to wrap the\n * generated code. `post` will be injected **before** the generated\n * return statement (if not suppressed).\n *\n * @param dim -\n * @param tpl -\n * @param syms -\n * @param ret -\n * @param opJoin -\n * @param pre -\n * @param post -\n * @param strided -\n */\nconst assemble = (dim, tpl, syms, ret = \"a\", opJoin = \"\", pre = \"\", post = \"\", strided = false) => [\n    pre,\n    transduce(comp(take(dim), mapIndexed((i, x) => tpl(x, i))), str(opJoin), (zip.apply(null, syms.split(\",\").map(strided ? indicesStrided : indices)))),\n    post,\n    ret !== \"\" ? `return ${ret};` : \"\",\n];\nconst assembleG = (tpl, syms, ret = \"a\", pre, post, strided = false) => [\n    pre,\n    \"for(let i=a.length;--i>=0;) {\",\n    tpl(syms\n        .split(\",\")\n        .map(strided ? (x) => `${x}[i${x}+i*s${x}]` : (x) => `${x}[i]`)),\n    \"}\",\n    post,\n    ret !== null ? `return ${ret};` : \"\",\n];\nconst assembleS = (tpl, syms = ARGS_VV, ret = \"o\", pre = DEFAULT_OUT, post) => [\n    pre,\n    \"while(k-->0) {\",\n    tpl(syms.split(\",\").map((x) => `${x}[i${x}+k*s${x}]`)),\n    \"}\",\n    post,\n    ret !== null ? `return ${ret};` : \"\",\n];\n/** @internal */\nexport const defaultOut = (o, args) => `!${o} && (${o}=${args.split(\",\")[1]});`;\n/** @internal */\nexport const compile = (dim, tpl, args, syms = args, ret = \"a\", opJoin, pre, post, strided = false) => (new Function(args, assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\")));\n/** @internal */\nexport const compileHOF = (dim, fns, tpl, hofArgs, args, syms = args, ret = \"a\", opJoin = \"\", pre, post, strided = false) => {\n    return new Function(hofArgs, `return (${args})=>{${assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join(\"\")}}`)(...fns);\n};\n/** @internal */\nexport const compileG = (tpl, args, syms = args, ret = \"a\", pre, post, strided = false) => (new Function(args, assembleG(tpl, syms, ret, pre, post, strided).join(\"\")));\n/** @internal */\nexport const compileS = (tpl, args, syms = args, ret, pre, post) => new Function(args, assembleS(tpl, syms, ret, pre, post).join(\"\"));\n/** @internal */\nexport const compileGHOF = (fns, tpl, hofArgs, args, syms = args, ret = \"a\", pre, post, strided = false) => (new Function(hofArgs, `return (${args})=>{${assembleG(tpl, syms, ret, pre, post, strided).join(\"\")}}`)(...fns));\nexport const defOp = (tpl, args = ARGS_VV, syms, ret = \"o\", dispatch = 1, pre) => {\n    syms = syms || args;\n    pre = pre != null ? pre : defaultOut(ret, args);\n    const fn = vop(dispatch);\n    const $ = (dim) => fn.add(dim, compile(dim, tpl, args, syms, ret, \"\", pre));\n    fn.default(compileG(tpl, args, syms, ret, pre));\n    return [fn, $(2), $(3), $(4)];\n};\nexport const defFnOp = (op) => defOp(FN(op), ARGS_V);\nexport const defHofOp = (op, tpl, args = ARGS_V, syms, ret = \"o\", dispatch = 1, pre) => {\n    const _tpl = tpl || FN(\"op\");\n    syms = syms || args;\n    pre = pre != null ? pre : defaultOut(ret, args);\n    const fn = vop(dispatch);\n    const $ = (dim) => fn.add(dim, compileHOF(dim, [op], _tpl, \"op\", args, syms, ret, \"\", pre));\n    fn.default(compileGHOF([op], _tpl, \"op\", args, syms, ret, pre));\n    return [fn, $(2), $(3), $(4)];\n};\nexport const defOpS = (tpl, args = ARGS_VV, idxArgs = SARGS_VV, syms = ARGS_VV, ret = \"o\", pre, sizes = [2, 3, 4]) => [\n    compileS(tpl, `${args},k,${idxArgs}`, syms, ret, pre),\n    ...sizes.map((dim) => compile(dim, tpl, `${args},${idxArgs}`, syms, ret, \"\", pre != null ? pre : defaultOut(ret, args), \"\", true)),\n];\nexport const defHofOpS = (op, tpl, args = ARGS_VV, idxArgs = SARGS_VV, syms = ARGS_VV, ret = \"o\", pre, sizes = [2, 3, 4]) => [\n    new Function(\"op\", `return (${args},k,${idxArgs})=>{${assembleS(tpl, syms, ret, pre).join(\"\")}}`)(op),\n    ...sizes.map((dim) => compileHOF(dim, [op], tpl, \"op\", `${args},${idxArgs}`, syms, ret, \"\", pre != null ? pre : defaultOut(ret, args), \"\", true)),\n];\nexport const defMathOp = (op) => defOp(MATH(op));\nexport const defMathOpN = (op) => defOp(MATH_N(op), ARGS_VN);\nexport const defBitOp = (op, signed = false) => defOp((signed ? SIGNED : UNSIGNED)(op));\nexport const defBitOpN = (op, signed = false) => defOp((signed ? SIGNED_N : UNSIGNED_N)(op), ARGS_VN);\n","import { defMathOpN } from \"./compile/emit.js\";\nexport const [mulN, mulN2, mulN3, mulN4] = defMathOpN(\"*\");\n","import { defMathOp } from \"./compile/emit.js\";\nexport const [div, div2, div3, div4] = defMathOp(\"/\");\n","import { defMathOpN } from \"./compile/emit.js\";\nexport const [divN, divN2, divN3, divN4] = defMathOpN(\"/\");\n","import { defMathOp } from \"./compile/emit.js\";\nexport const [sub, sub2, sub3, sub4] = defMathOp(\"-\");\n","import { defMathOp } from \"./compile/emit.js\";\nexport const [add, add2, add3, add4] = defMathOp(\"+\");\n","import { defOp } from \"./compile/emit.js\";\nexport const [invert, invert2, invert3, invert4] = defOp(([o, a]) => `${o}=1/${a};`);\n","export const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);\nexport const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);\nexport const setC4 = (out, x, y, z, w) => (!out && (out = []),\n    (out[0] = x),\n    (out[1] = y),\n    (out[2] = z),\n    (out[3] = w),\n    out);\nexport const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),\n    (out[0] = a),\n    (out[1] = b),\n    (out[2] = c),\n    (out[3] = d),\n    (out[4] = e),\n    (out[5] = f),\n    out);\nexport const setC = (out, ...xs) => {\n    !out && (out = []);\n    for (let i = 0, n = xs.length; i < n; i++) {\n        out[i] = xs[i];\n    }\n    return out;\n};\n","import { compile, compileG } from \"./compile/emit.js\";\nimport { vop } from \"./vop.js\";\nconst tpl = ([a, b]) => `t=${a}-${b};s+=t*t;`;\nconst pre = \"let t,s=0;\";\nconst $ = (dim) => distSq.add(dim, compile(dim, tpl, \"a,b\", undefined, \"s\", \"\", pre));\nexport const distSq = vop();\ndistSq.default(compileG(tpl, \"a,b\", undefined, \"s\", pre));\nexport const distSq2 = $(2);\nexport const distSq3 = $(3);\nexport const distSq4 = $(4);\n","import { distSq, distSq2, distSq3, distSq4 } from \"./distsq.js\";\nexport const dist = (a, b) => Math.sqrt(distSq(a, b));\nexport const dist2 = (a, b) => Math.sqrt(distSq2(a, b));\nexport const dist3 = (a, b) => Math.sqrt(distSq3(a, b));\nexport const dist4 = (a, b) => Math.sqrt(distSq4(a, b));\n","export const PI = Math.PI;\nexport const TAU = PI * 2;\nexport const HALF_PI = PI / 2;\nexport const THIRD_PI = PI / 3;\nexport const QUARTER_PI = PI / 4;\nexport const SIXTH_PI = PI / 6;\nexport const INV_PI = 1 / PI;\nexport const INV_TAU = 1 / TAU;\nexport const INV_HALF_PI = 1 / HALF_PI;\nexport const DEG2RAD = PI / 180;\nexport const RAD2DEG = 180 / PI;\nexport const PHI = (1 + Math.sqrt(5)) / 2;\nexport const SQRT2 = Math.SQRT2;\nexport const SQRT3 = Math.sqrt(3);\nexport const SQRT2_2 = SQRT2 / 2;\nexport const SQRT3_2 = SQRT3 / 2;\nexport const THIRD = 1 / 3;\nexport const TWO_THIRD = 2 / 3;\nexport const SIXTH = 1 / 6;\nexport let EPS = 1e-6;\n","import { compile, compileG } from \"./compile/emit.js\";\nimport { vop } from \"./vop.js\";\nconst $ = (dim) => magSq.add(dim, compile(dim, ([a]) => `${a}*${a}`, \"a\", \"a\", \"\", \"+\", \"return \", \";\"));\nexport const magSq = vop();\nmagSq.default(compileG(([a]) => `sum+=${a}*${a};`, \"a\", undefined, \"sum\", \"let sum=0;\"));\nexport const magSq2 = $(2);\nexport const magSq3 = $(3);\nexport const magSq4 = $(4);\n","import { defOp } from \"./compile/emit.js\";\nimport { NEW_OUT, SET } from \"./compile/templates.js\";\nexport const [set, set2, set3, set4] = defOp(SET, \"o,a\", undefined, \"o\", 1, NEW_OUT);\n","import { EPS } from \"@thi.ng/math/api\";\nimport { mag } from \"./mag.js\";\nimport { magSq2, magSq3, magSq4 } from \"./magsq.js\";\nimport { mulN, mulN2, mulN3, mulN4 } from \"./muln.js\";\nimport { set, set2, set3, set4 } from \"./set.js\";\n/**\n * Normalizes vector to given (optional) length (default: 1). If `out`\n * is null, modifies `v` in place.\n *\n * @param out -\n * @param v -\n * @param n -\n */\nexport const normalize = (out, v, n = 1) => {\n    !out && (out = v);\n    const m = mag(v);\n    return m >= EPS ? mulN(out, v, n / m) : out !== v ? set(out, v) : out;\n};\n/**\n * Optimized 2d version of generic {@link normalize}.\n * @param out\n * @param v\n * @param n\n */\nexport const normalize2 = (out, v, n = 1) => {\n    !out && (out = v);\n    const m = Math.sqrt(magSq2(v));\n    return m >= EPS ? mulN2(out, v, n / m) : out !== v ? set2(out, v) : out;\n};\n/**\n * Optimized 3d version of generic {@link normalize}.\n * @param out\n * @param v\n * @param n\n */\nexport const normalize3 = (out, v, n = 1) => {\n    !out && (out = v);\n    const m = Math.sqrt(magSq3(v));\n    return m >= EPS ? mulN3(out, v, n / m) : out !== v ? set3(out, v) : out;\n};\n/**\n * Optimized 4d version of generic {@link normalize}.\n * @param out\n * @param v\n * @param n\n */\nexport const normalize4 = (out, v, n = 1) => {\n    !out && (out = v);\n    const m = Math.sqrt(magSq4(v));\n    return m >= EPS ? mulN4(out, v, n / m) : out !== v ? set4(out, v) : out;\n};\n","var gsl_const = {};\n\ngsl_const.CGS = {};\ngsl_const.CGS.SPEED_OF_LIGHT =  2.99792458e+10; /* cm / s */\ngsl_const.CGS.GRAVITATIONAL_CONSTANT =  6.673e-8; /* cm^3 / g s^2 */\ngsl_const.CGS.PLANCKS_CONSTANT_H =  6.62606896e-27; /* g cm^2 / s */\ngsl_const.CGS.PLANCKS_CONSTANT_HBAR =  1.05457162825e-27; /* g cm^2 / s */\ngsl_const.CGS.ASTRONOMICAL_UNIT =  1.49597870691e+13; /* cm */\ngsl_const.CGS.LIGHT_YEAR =  9.46053620707e+17; /* cm */\ngsl_const.CGS.PARSEC =  3.08567758135e+18; /* cm */\ngsl_const.CGS.GRAV_ACCEL =  9.80665e+2; /* cm / s^2 */\ngsl_const.CGS.ELECTRON_VOLT =  1.602176487e-12; /* g cm^2 / s^2 */\ngsl_const.CGS.MASS_ELECTRON =  9.10938188e-28; /* g */\ngsl_const.CGS.MASS_MUON =  1.88353109e-25; /* g */\ngsl_const.CGS.MASS_PROTON =  1.67262158e-24; /* g */\ngsl_const.CGS.MASS_NEUTRON =  1.67492716e-24; /* g */\ngsl_const.CGS.RYDBERG =  2.17987196968e-11; /* g cm^2 / s^2 */\ngsl_const.CGS.BOLTZMANN =  1.3806504e-16; /* g cm^2 / K s^2 */\ngsl_const.CGS.MOLAR_GAS =  8.314472e7; /* g cm^2 / K mol s^2 */\ngsl_const.CGS.STANDARD_GAS_VOLUME =  2.2710981e4; /* cm^3 / mol */\ngsl_const.CGS.MINUTE =  6e1; /* s */\ngsl_const.CGS.HOUR =  3.6e3; /* s */\ngsl_const.CGS.DAY =  8.64e4; /* s */\ngsl_const.CGS.WEEK =  6.048e5; /* s */\ngsl_const.CGS.INCH =  2.54e0; /* cm */\ngsl_const.CGS.FOOT =  3.048e1; /* cm */\ngsl_const.CGS.YARD =  9.144e1; /* cm */\ngsl_const.CGS.MILE =  1.609344e5; /* cm */\ngsl_const.CGS.NAUTICAL_MILE =  1.852e5; /* cm */\ngsl_const.CGS.FATHOM =  1.8288e2; /* cm */\ngsl_const.CGS.MIL =  2.54e-3; /* cm */\ngsl_const.CGS.POINT =  3.52777777778e-2; /* cm */\ngsl_const.CGS.TEXPOINT =  3.51459803515e-2; /* cm */\ngsl_const.CGS.MICRON =  1e-4; /* cm */\ngsl_const.CGS.ANGSTROM =  1e-8; /* cm */\ngsl_const.CGS.HECTARE =  1e8; /* cm^2 */\ngsl_const.CGS.ACRE =  4.04685642241e7; /* cm^2 */\ngsl_const.CGS.BARN =  1e-24; /* cm^2 */\ngsl_const.CGS.LITER =  1e3; /* cm^3 */\ngsl_const.CGS.US_GALLON =  3.78541178402e3; /* cm^3 */\ngsl_const.CGS.QUART =  9.46352946004e2; /* cm^3 */\ngsl_const.CGS.PINT =  4.73176473002e2; /* cm^3 */\ngsl_const.CGS.CUP =  2.36588236501e2; /* cm^3 */\ngsl_const.CGS.FLUID_OUNCE =  2.95735295626e1; /* cm^3 */\ngsl_const.CGS.TABLESPOON =  1.47867647813e1; /* cm^3 */\ngsl_const.CGS.TEASPOON =  4.92892159375e0; /* cm^3 */\ngsl_const.CGS.CANADIAN_GALLON =  4.54609e3; /* cm^3 */\ngsl_const.CGS.UK_GALLON =  4.546092e3; /* cm^3 */\ngsl_const.CGS.MILES_PER_HOUR =  4.4704e1; /* cm / s */\ngsl_const.CGS.KILOMETERS_PER_HOUR =  2.77777777778e1; /* cm / s */\ngsl_const.CGS.KNOT =  5.14444444444e1; /* cm / s */\ngsl_const.CGS.POUND_MASS =  4.5359237e2; /* g */\ngsl_const.CGS.OUNCE_MASS =  2.8349523125e1; /* g */\ngsl_const.CGS.TON =  9.0718474e5; /* g */\ngsl_const.CGS.METRIC_TON =  1e6; /* g */\ngsl_const.CGS.UK_TON =  1.0160469088e6; /* g */\ngsl_const.CGS.TROY_OUNCE =  3.1103475e1; /* g */\ngsl_const.CGS.CARAT =  2e-1; /* g */\ngsl_const.CGS.UNIFIED_ATOMIC_MASS =  1.660538782e-24; /* g */\ngsl_const.CGS.GRAM_FORCE =  9.80665e2; /* cm g / s^2 */\ngsl_const.CGS.POUND_FORCE =  4.44822161526e5; /* cm g / s^2 */\ngsl_const.CGS.KILOPOUND_FORCE =  4.44822161526e8; /* cm g / s^2 */\ngsl_const.CGS.POUNDAL =  1.38255e4; /* cm g / s^2 */\ngsl_const.CGS.CALORIE =  4.1868e7; /* g cm^2 / s^2 */\ngsl_const.CGS.BTU =  1.05505585262e10; /* g cm^2 / s^2 */\ngsl_const.CGS.THERM =  1.05506e15; /* g cm^2 / s^2 */\ngsl_const.CGS.HORSEPOWER =  7.457e9; /* g cm^2 / s^3 */\ngsl_const.CGS.BAR =  1e6; /* g / cm s^2 */\ngsl_const.CGS.STD_ATMOSPHERE =  1.01325e6; /* g / cm s^2 */\ngsl_const.CGS.TORR =  1.33322368421e3; /* g / cm s^2 */\ngsl_const.CGS.METER_OF_MERCURY =  1.33322368421e6; /* g / cm s^2 */\ngsl_const.CGS.INCH_OF_MERCURY =  3.38638815789e4; /* g / cm s^2 */\ngsl_const.CGS.INCH_OF_WATER =  2.490889e3; /* g / cm s^2 */\ngsl_const.CGS.PSI =  6.89475729317e4; /* g / cm s^2 */\ngsl_const.CGS.POISE =  1e0; /* g / cm s */\ngsl_const.CGS.STOKES =  1e0; /* cm^2 / s */\ngsl_const.CGS.STILB =  1e0; /* cd / cm^2 */\ngsl_const.CGS.LUMEN =  1e0; /* cd sr */\ngsl_const.CGS.LUX =  1e-4; /* cd sr / cm^2 */\ngsl_const.CGS.PHOT =  1e0; /* cd sr / cm^2 */\ngsl_const.CGS.FOOTCANDLE =  1.076e-3; /* cd sr / cm^2 */\ngsl_const.CGS.LAMBERT =  1e0; /* cd sr / cm^2 */\ngsl_const.CGS.FOOTLAMBERT =  1.07639104e-3; /* cd sr / cm^2 */\ngsl_const.CGS.CURIE =  3.7e10; /* 1 / s */\ngsl_const.CGS.ROENTGEN =  2.58e-7; /* A s / g */\ngsl_const.CGS.RAD =  1e2; /* cm^2 / s^2 */\ngsl_const.CGS.SOLAR_MASS =  1.98892e33; /* g */\ngsl_const.CGS.BOHR_RADIUS =  5.291772083e-9; /* cm */\ngsl_const.CGS.NEWTON =  1e5; /* cm g / s^2 */\ngsl_const.CGS.DYNE =  1e0; /* cm g / s^2 */\ngsl_const.CGS.JOULE =  1e7; /* g cm^2 / s^2 */\ngsl_const.CGS.ERG =  1e0; /* g cm^2 / s^2 */\ngsl_const.CGS.STEFAN_BOLTZMANN_CONSTANT =  5.67040047374e-5; /* g / K^4 s^3 */\ngsl_const.CGS.THOMSON_CROSS_SECTION =  6.65245893699e-25; /* cm^2 */\n\ngsl_const.CGSM = {};\ngsl_const.CGSM.SPEED_OF_LIGHT = 2.99792458e10 /* cm / s */\ngsl_const.CGSM.GRAVITATIONAL_CONSTANT = 6.673e-8 /* cm^3 / g s^2 */\ngsl_const.CGSM.PLANCKS_CONSTANT_H = 6.62606896e-27 /* g cm^2 / s */\ngsl_const.CGSM.PLANCKS_CONSTANT_HBAR = 1.05457162825e-27 /* g cm^2 / s */\ngsl_const.CGSM.ASTRONOMICAL_UNIT = 1.49597870691e13 /* cm */\ngsl_const.CGSM.LIGHT_YEAR = 9.46053620707e17 /* cm */\ngsl_const.CGSM.PARSEC = 3.08567758135e18 /* cm */\ngsl_const.CGSM.GRAV_ACCEL = 9.80665e2 /* cm / s^2 */\ngsl_const.CGSM.ELECTRON_VOLT = 1.602176487e-12 /* g cm^2 / s^2 */\ngsl_const.CGSM.MASS_ELECTRON = 9.10938188e-28 /* g */\ngsl_const.CGSM.MASS_MUON = 1.88353109e-25 /* g */\ngsl_const.CGSM.MASS_PROTON = 1.67262158e-24 /* g */\ngsl_const.CGSM.MASS_NEUTRON = 1.67492716e-24 /* g */\ngsl_const.CGSM.RYDBERG = 2.17987196968e-11 /* g cm^2 / s^2 */\ngsl_const.CGSM.BOLTZMANN = 1.3806504e-16 /* g cm^2 / K s^2 */\ngsl_const.CGSM.MOLAR_GAS = 8.314472e7 /* g cm^2 / K mol s^2 */\ngsl_const.CGSM.STANDARD_GAS_VOLUME = 2.2710981e4 /* cm^3 / mol */\ngsl_const.CGSM.MINUTE = 6e1 /* s */\ngsl_const.CGSM.HOUR = 3.6e3 /* s */\ngsl_const.CGSM.DAY = 8.64e4 /* s */\ngsl_const.CGSM.WEEK = 6.048e5 /* s */\ngsl_const.CGSM.INCH = 2.54e0 /* cm */\ngsl_const.CGSM.FOOT = 3.048e1 /* cm */\ngsl_const.CGSM.YARD = 9.144e1 /* cm */\ngsl_const.CGSM.MILE = 1.609344e5 /* cm */\ngsl_const.CGSM.NAUTICAL_MILE = 1.852e5 /* cm */\ngsl_const.CGSM.FATHOM = 1.8288e2 /* cm */\ngsl_const.CGSM.MIL = 2.54e-3 /* cm */\ngsl_const.CGSM.POINT = 3.52777777778e-2 /* cm */\ngsl_const.CGSM.TEXPOINT = 3.51459803515e-2 /* cm */\ngsl_const.CGSM.MICRON = 1e-4 /* cm */\ngsl_const.CGSM.ANGSTROM = 1e-8 /* cm */\ngsl_const.CGSM.HECTARE = 1e8 /* cm^2 */\ngsl_const.CGSM.ACRE = 4.04685642241e7 /* cm^2 */\ngsl_const.CGSM.BARN = 1e-24 /* cm^2 */\ngsl_const.CGSM.LITER = 1e3 /* cm^3 */\ngsl_const.CGSM.US_GALLON = 3.78541178402e3 /* cm^3 */\ngsl_const.CGSM.QUART = 9.46352946004e2 /* cm^3 */\ngsl_const.CGSM.PINT = 4.73176473002e2 /* cm^3 */\ngsl_const.CGSM.CUP = 2.36588236501e2 /* cm^3 */\ngsl_const.CGSM.FLUID_OUNCE = 2.95735295626e1 /* cm^3 */\ngsl_const.CGSM.TABLESPOON = 1.47867647813e1 /* cm^3 */\ngsl_const.CGSM.TEASPOON = 4.92892159375e0 /* cm^3 */\ngsl_const.CGSM.CANADIAN_GALLON = 4.54609e3 /* cm^3 */\ngsl_const.CGSM.UK_GALLON = 4.546092e3 /* cm^3 */\ngsl_const.CGSM.MILES_PER_HOUR = 4.4704e1 /* cm / s */\ngsl_const.CGSM.KILOMETERS_PER_HOUR = 2.77777777778e1 /* cm / s */\ngsl_const.CGSM.KNOT = 5.14444444444e1 /* cm / s */\ngsl_const.CGSM.POUND_MASS = 4.5359237e2 /* g */\ngsl_const.CGSM.OUNCE_MASS = 2.8349523125e1 /* g */\ngsl_const.CGSM.TON = 9.0718474e5 /* g */\ngsl_const.CGSM.METRIC_TON = 1e6 /* g */\ngsl_const.CGSM.UK_TON = 1.0160469088e6 /* g */\ngsl_const.CGSM.TROY_OUNCE = 3.1103475e1 /* g */\ngsl_const.CGSM.CARAT = 2e-1 /* g */\ngsl_const.CGSM.UNIFIED_ATOMIC_MASS = 1.660538782e-24 /* g */\ngsl_const.CGSM.GRAM_FORCE = 9.80665e2 /* cm g / s^2 */\ngsl_const.CGSM.POUND_FORCE = 4.44822161526e5 /* cm g / s^2 */\ngsl_const.CGSM.KILOPOUND_FORCE = 4.44822161526e8 /* cm g / s^2 */\ngsl_const.CGSM.POUNDAL = 1.38255e4 /* cm g / s^2 */\ngsl_const.CGSM.CALORIE = 4.1868e7 /* g cm^2 / s^2 */\ngsl_const.CGSM.BTU = 1.05505585262e10; /* g cm^2 / s^2 */\ngsl_const.CGSM.THERM = 1.05506e15 /* g cm^2 / s^2 */\ngsl_const.CGSM.HORSEPOWER = 7.457e9 /* g cm^2 / s^3 */\ngsl_const.CGSM.BAR = 1e6 /* g / cm s^2 */\ngsl_const.CGSM.STD_ATMOSPHERE = 1.01325e6 /* g / cm s^2 */\ngsl_const.CGSM.TORR = 1.33322368421e3 /* g / cm s^2 */\ngsl_const.CGSM.METER_OF_MERCURY = 1.33322368421e6 /* g / cm s^2 */\ngsl_const.CGSM.INCH_OF_MERCURY = 3.38638815789e4 /* g / cm s^2 */\ngsl_const.CGSM.INCH_OF_WATER = 2.490889e3 /* g / cm s^2 */\ngsl_const.CGSM.PSI = 6.89475729317e4 /* g / cm s^2 */\ngsl_const.CGSM.POISE = 1e0 /* g / cm s */\ngsl_const.CGSM.STOKES = 1e0 /* cm^2 / s */\ngsl_const.CGSM.STILB = 1e0 /* cd / cm^2 */\ngsl_const.CGSM.LUMEN = 1e0 /* cd sr */\ngsl_const.CGSM.LUX = 1e-4 /* cd sr / cm^2 */\ngsl_const.CGSM.PHOT = 1e0 /* cd sr / cm^2 */\ngsl_const.CGSM.FOOTCANDLE = 1.076e-3 /* cd sr / cm^2 */\ngsl_const.CGSM.LAMBERT = 1e0 /* cd sr / cm^2 */\ngsl_const.CGSM.FOOTLAMBERT = 1.07639104e-3 /* cd sr / cm^2 */\ngsl_const.CGSM.CURIE = 3.7e10; /* 1 / s */\ngsl_const.CGSM.ROENTGEN = 2.58e-8 /* abamp s / g */\ngsl_const.CGSM.RAD = 1e2 /* cm^2 / s^2 */\ngsl_const.CGSM.SOLAR_MASS = 1.98892e33 /* g */\ngsl_const.CGSM.BOHR_RADIUS = 5.291772083e-9 /* cm */\ngsl_const.CGSM.NEWTON = 1e5 /* cm g / s^2 */\ngsl_const.CGSM.DYNE = 1e0 /* cm g / s^2 */\ngsl_const.CGSM.JOULE = 1e7 /* g cm^2 / s^2 */\ngsl_const.CGSM.ERG = 1e0 /* g cm^2 / s^2 */\ngsl_const.CGSM.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-5 /* g / K^4 s^3 */\ngsl_const.CGSM.THOMSON_CROSS_SECTION = 6.65245893699e-25 /* cm^2 */\ngsl_const.CGSM.BOHR_MAGNETON = 9.27400899e-21 /* abamp cm^2 */\ngsl_const.CGSM.NUCLEAR_MAGNETON = 5.05078317e-24 /* abamp cm^2 */\ngsl_const.CGSM.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-21 /* abamp cm^2 */\ngsl_const.CGSM.PROTON_MAGNETIC_MOMENT = 1.410606633e-23 /* abamp cm^2 */\ngsl_const.CGSM.FARADAY = 9.64853429775e3 /* abamp s / mol */\ngsl_const.CGSM.ELECTRON_CHARGE = 1.602176487e-20 /* abamp s */\n\n\ngsl_const.MKS = {};\ngsl_const.MKS.SPEED_OF_LIGHT = 2.99792458e8 /* m / s */\ngsl_const.MKS.GRAVITATIONAL_CONSTANT = 6.673e-11 /* m^3 / kg s^2 */\ngsl_const.MKS.PLANCKS_CONSTANT_H = 6.62606896e-34 /* kg m^2 / s */\ngsl_const.MKS.PLANCKS_CONSTANT_HBAR = 1.05457162825e-34 /* kg m^2 / s */\ngsl_const.MKS.ASTRONOMICAL_UNIT = 1.49597870691e11 /* m */\ngsl_const.MKS.LIGHT_YEAR = 9.46053620707e15 /* m */\ngsl_const.MKS.PARSEC = 3.08567758135e16 /* m */\ngsl_const.MKS.GRAV_ACCEL = 9.80665e0 /* m / s^2 */\ngsl_const.MKS.ELECTRON_VOLT = 1.602176487e-19 /* kg m^2 / s^2 */\ngsl_const.MKS.MASS_ELECTRON = 9.10938188e-31 /* kg */\ngsl_const.MKS.MASS_MUON = 1.88353109e-28 /* kg */\ngsl_const.MKS.MASS_PROTON = 1.67262158e-27 /* kg */\ngsl_const.MKS.MASS_NEUTRON = 1.67492716e-27 /* kg */\ngsl_const.MKS.RYDBERG = 2.17987196968e-18 /* kg m^2 / s^2 */\ngsl_const.MKS.BOLTZMANN = 1.3806504e-23 /* kg m^2 / K s^2 */\ngsl_const.MKS.MOLAR_GAS = 8.314472e0 /* kg m^2 / K mol s^2 */\ngsl_const.MKS.STANDARD_GAS_VOLUME = 2.2710981e-2 /* m^3 / mol */\ngsl_const.MKS.MINUTE = 6e1 /* s */\ngsl_const.MKS.HOUR = 3.6e3 /* s */\ngsl_const.MKS.DAY = 8.64e4 /* s */\ngsl_const.MKS.WEEK = 6.048e5 /* s */\ngsl_const.MKS.INCH = 2.54e-2 /* m */\ngsl_const.MKS.FOOT = 3.048e-1 /* m */\ngsl_const.MKS.YARD = 9.144e-1 /* m */\ngsl_const.MKS.MILE = 1.609344e3 /* m */\ngsl_const.MKS.NAUTICAL_MILE = 1.852e3 /* m */\ngsl_const.MKS.FATHOM = 1.8288e0 /* m */\ngsl_const.MKS.MIL = 2.54e-5 /* m */\ngsl_const.MKS.POINT = 3.52777777778e-4 /* m */\ngsl_const.MKS.TEXPOINT = 3.51459803515e-4 /* m */\ngsl_const.MKS.MICRON = 1e-6 /* m */\ngsl_const.MKS.ANGSTROM = 1e-10 /* m */\ngsl_const.MKS.HECTARE = 1e4 /* m^2 */\ngsl_const.MKS.ACRE = 4.04685642241e3 /* m^2 */\ngsl_const.MKS.BARN = 1e-28 /* m^2 */\ngsl_const.MKS.LITER = 1e-3 /* m^3 */\ngsl_const.MKS.US_GALLON = 3.78541178402e-3 /* m^3 */\ngsl_const.MKS.QUART = 9.46352946004e-4 /* m^3 */\ngsl_const.MKS.PINT = 4.73176473002e-4 /* m^3 */\ngsl_const.MKS.CUP = 2.36588236501e-4 /* m^3 */\ngsl_const.MKS.FLUID_OUNCE = 2.95735295626e-5 /* m^3 */\ngsl_const.MKS.TABLESPOON = 1.47867647813e-5 /* m^3 */\ngsl_const.MKS.TEASPOON = 4.92892159375e-6 /* m^3 */\ngsl_const.MKS.CANADIAN_GALLON = 4.54609e-3 /* m^3 */\ngsl_const.MKS.UK_GALLON = 4.546092e-3 /* m^3 */\ngsl_const.MKS.MILES_PER_HOUR = 4.4704e-1 /* m / s */\ngsl_const.MKS.KILOMETERS_PER_HOUR = 2.77777777778e-1 /* m / s */\ngsl_const.MKS.KNOT = 5.14444444444e-1 /* m / s */\ngsl_const.MKS.POUND_MASS = 4.5359237e-1 /* kg */\ngsl_const.MKS.OUNCE_MASS = 2.8349523125e-2 /* kg */\ngsl_const.MKS.TON = 9.0718474e2 /* kg */\ngsl_const.MKS.METRIC_TON = 1e3 /* kg */\ngsl_const.MKS.UK_TON = 1.0160469088e3 /* kg */\ngsl_const.MKS.TROY_OUNCE = 3.1103475e-2 /* kg */\ngsl_const.MKS.CARAT = 2e-4 /* kg */\ngsl_const.MKS.UNIFIED_ATOMIC_MASS = 1.660538782e-27 /* kg */\ngsl_const.MKS.GRAM_FORCE = 9.80665e-3 /* kg m / s^2 */\ngsl_const.MKS.POUND_FORCE = 4.44822161526e0 /* kg m / s^2 */\ngsl_const.MKS.KILOPOUND_FORCE = 4.44822161526e3 /* kg m / s^2 */\ngsl_const.MKS.POUNDAL = 1.38255e-1 /* kg m / s^2 */\ngsl_const.MKS.CALORIE = 4.1868e0 /* kg m^2 / s^2 */\ngsl_const.MKS.BTU = 1.05505585262e3 /* kg m^2 / s^2 */\ngsl_const.MKS.THERM = 1.05506e8 /* kg m^2 / s^2 */\ngsl_const.MKS.HORSEPOWER = 7.457e2 /* kg m^2 / s^3 */\ngsl_const.MKS.BAR = 1e5 /* kg / m s^2 */\ngsl_const.MKS.STD_ATMOSPHERE = 1.01325e5 /* kg / m s^2 */\ngsl_const.MKS.TORR = 1.33322368421e2 /* kg / m s^2 */\ngsl_const.MKS.METER_OF_MERCURY = 1.33322368421e5 /* kg / m s^2 */\ngsl_const.MKS.INCH_OF_MERCURY = 3.38638815789e3 /* kg / m s^2 */\ngsl_const.MKS.INCH_OF_WATER = 2.490889e2 /* kg / m s^2 */\ngsl_const.MKS.PSI = 6.89475729317e3 /* kg / m s^2 */\ngsl_const.MKS.POISE = 1e-1 /* kg m^-1 s^-1 */\ngsl_const.MKS.STOKES = 1e-4 /* m^2 / s */\ngsl_const.MKS.STILB = 1e4 /* cd / m^2 */\ngsl_const.MKS.LUMEN = 1e0 /* cd sr */\ngsl_const.MKS.LUX = 1e0 /* cd sr / m^2 */\ngsl_const.MKS.PHOT = 1e4 /* cd sr / m^2 */\ngsl_const.MKS.FOOTCANDLE = 1.076e1 /* cd sr / m^2 */\ngsl_const.MKS.LAMBERT = 1e4 /* cd sr / m^2 */\ngsl_const.MKS.FOOTLAMBERT = 1.07639104e1 /* cd sr / m^2 */\ngsl_const.MKS.CURIE = 3.7e10 /* 1 / s */\ngsl_const.MKS.ROENTGEN = 2.58e-4 /* A s / kg */\ngsl_const.MKS.RAD = 1e-2 /* m^2 / s^2 */\ngsl_const.MKS.SOLAR_MASS = 1.98892e30 /* kg */\ngsl_const.MKS.BOHR_RADIUS = 5.291772083e-11 /* m */\ngsl_const.MKS.NEWTON = 1e0 /* kg m / s^2 */\ngsl_const.MKS.DYNE = 1e-5 /* kg m / s^2 */\ngsl_const.MKS.JOULE = 1e0 /* kg m^2 / s^2 */\ngsl_const.MKS.ERG = 1e-7 /* kg m^2 / s^2 */\ngsl_const.MKS.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-8 /* kg / K^4 s^3 */\ngsl_const.MKS.THOMSON_CROSS_SECTION = 6.65245893699e-29 /* m^2 */\ngsl_const.MKS.BOHR_MAGNETON = 9.27400899e-24 /* A m^2 */\ngsl_const.MKS.NUCLEAR_MAGNETON = 5.05078317e-27 /* A m^2 */\ngsl_const.MKS.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-24 /* A m^2 */\ngsl_const.MKS.PROTON_MAGNETIC_MOMENT = 1.410606633e-26 /* A m^2 */\ngsl_const.MKS.FARADAY = 9.64853429775e4 /* A s / mol */\ngsl_const.MKS.ELECTRON_CHARGE = 1.602176487e-19 /* A s */\ngsl_const.MKS.VACUUM_PERMITTIVITY = 8.854187817e-12 /* A^2 s^4 / kg m^3 */\ngsl_const.MKS.VACUUM_PERMEABILITY = 1.25663706144e-6 /* kg m / A^2 s^2 */\ngsl_const.MKS.DEBYE = 3.33564095198e-30 /* A s^2 / m^2 */\ngsl_const.MKS.GAUSS = 1e-4 /* kg / A s^2 */\n\ngsl_const.MKSA = {};\ngsl_const.MKSA.SPEED_OF_LIGHT = 2.99792458e8 /* m / s */\ngsl_const.MKSA.GRAVITATIONAL_CONSTANT = 6.673e-11 /* m^3 / kg s^2 */\ngsl_const.MKSA.PLANCKS_CONSTANT_H = 6.62606896e-34 /* kg m^2 / s */\ngsl_const.MKSA.PLANCKS_CONSTANT_HBAR = 1.05457162825e-34 /* kg m^2 / s */\ngsl_const.MKSA.ASTRONOMICAL_UNIT = 1.49597870691e11 /* m */\ngsl_const.MKSA.LIGHT_YEAR = 9.46053620707e15 /* m */\ngsl_const.MKSA.PARSEC = 3.08567758135e16 /* m */\ngsl_const.MKSA.GRAV_ACCEL = 9.80665e0 /* m / s^2 */\ngsl_const.MKSA.ELECTRON_VOLT = 1.602176487e-19 /* kg m^2 / s^2 */\ngsl_const.MKSA.MASS_ELECTRON = 9.10938188e-31 /* kg */\ngsl_const.MKSA.MASS_MUON = 1.88353109e-28 /* kg */\ngsl_const.MKSA.MASS_PROTON = 1.67262158e-27 /* kg */\ngsl_const.MKSA.MASS_NEUTRON = 1.67492716e-27 /* kg */\ngsl_const.MKSA.RYDBERG = 2.17987196968e-18 /* kg m^2 / s^2 */\ngsl_const.MKSA.BOLTZMANN = 1.3806504e-23 /* kg m^2 / K s^2 */\ngsl_const.MKSA.MOLAR_GAS = 8.314472e0 /* kg m^2 / K mol s^2 */\ngsl_const.MKSA.STANDARD_GAS_VOLUME = 2.2710981e-2 /* m^3 / mol */\ngsl_const.MKSA.MINUTE = 6e1 /* s */\ngsl_const.MKSA.HOUR = 3.6e3 /* s */\ngsl_const.MKSA.DAY = 8.64e4 /* s */\ngsl_const.MKSA.WEEK = 6.048e5 /* s */\ngsl_const.MKSA.INCH = 2.54e-2 /* m */\ngsl_const.MKSA.FOOT = 3.048e-1 /* m */\ngsl_const.MKSA.YARD = 9.144e-1 /* m */\ngsl_const.MKSA.MILE = 1.609344e3 /* m */\ngsl_const.MKSA.NAUTICAL_MILE = 1.852e3 /* m */\ngsl_const.MKSA.FATHOM = 1.8288e0 /* m */\ngsl_const.MKSA.MIL = 2.54e-5 /* m */\ngsl_const.MKSA.POINT = 3.52777777778e-4 /* m */\ngsl_const.MKSA.TEXPOINT = 3.51459803515e-4 /* m */\ngsl_const.MKSA.MICRON = 1e-6 /* m */\ngsl_const.MKSA.ANGSTROM = 1e-10 /* m */\ngsl_const.MKSA.HECTARE = 1e4 /* m^2 */\ngsl_const.MKSA.ACRE = 4.04685642241e3 /* m^2 */\ngsl_const.MKSA.BARN = 1e-28 /* m^2 */\ngsl_const.MKSA.LITER = 1e-3 /* m^3 */\ngsl_const.MKSA.US_GALLON = 3.78541178402e-3 /* m^3 */\ngsl_const.MKSA.QUART = 9.46352946004e-4 /* m^3 */\ngsl_const.MKSA.PINT = 4.73176473002e-4 /* m^3 */\ngsl_const.MKSA.CUP = 2.36588236501e-4 /* m^3 */\ngsl_const.MKSA.FLUID_OUNCE = 2.95735295626e-5 /* m^3 */\ngsl_const.MKSA.TABLESPOON = 1.47867647813e-5 /* m^3 */\ngsl_const.MKSA.TEASPOON = 4.92892159375e-6 /* m^3 */\ngsl_const.MKSA.CANADIAN_GALLON = 4.54609e-3 /* m^3 */\ngsl_const.MKSA.UK_GALLON = 4.546092e-3 /* m^3 */\ngsl_const.MKSA.MILES_PER_HOUR = 4.4704e-1 /* m / s */\ngsl_const.MKSA.KILOMETERS_PER_HOUR = 2.77777777778e-1 /* m / s */\ngsl_const.MKSA.KNOT = 5.14444444444e-1 /* m / s */\ngsl_const.MKSA.POUND_MASS = 4.5359237e-1 /* kg */\ngsl_const.MKSA.OUNCE_MASS = 2.8349523125e-2 /* kg */\ngsl_const.MKSA.TON = 9.0718474e2 /* kg */\ngsl_const.MKSA.METRIC_TON = 1e3 /* kg */\ngsl_const.MKSA.UK_TON = 1.0160469088e3 /* kg */\ngsl_const.MKSA.TROY_OUNCE = 3.1103475e-2 /* kg */\ngsl_const.MKSA.CARAT = 2e-4 /* kg */\ngsl_const.MKSA.UNIFIED_ATOMIC_MASS = 1.660538782e-27 /* kg */\ngsl_const.MKSA.GRAM_FORCE = 9.80665e-3 /* kg m / s^2 */\ngsl_const.MKSA.POUND_FORCE = 4.44822161526e0 /* kg m / s^2 */\ngsl_const.MKSA.KILOPOUND_FORCE = 4.44822161526e3 /* kg m / s^2 */\ngsl_const.MKSA.POUNDAL = 1.38255e-1 /* kg m / s^2 */\ngsl_const.MKSA.CALORIE = 4.1868e0 /* kg m^2 / s^2 */\ngsl_const.MKSA.BTU = 1.05505585262e3 /* kg m^2 / s^2 */\ngsl_const.MKSA.THERM = 1.05506e8 /* kg m^2 / s^2 */\ngsl_const.MKSA.HORSEPOWER = 7.457e2 /* kg m^2 / s^3 */\ngsl_const.MKSA.BAR = 1e5 /* kg / m s^2 */\ngsl_const.MKSA.STD_ATMOSPHERE = 1.01325e5 /* kg / m s^2 */\ngsl_const.MKSA.TORR = 1.33322368421e2 /* kg / m s^2 */\ngsl_const.MKSA.METER_OF_MERCURY = 1.33322368421e5 /* kg / m s^2 */\ngsl_const.MKSA.INCH_OF_MERCURY = 3.38638815789e3 /* kg / m s^2 */\ngsl_const.MKSA.INCH_OF_WATER = 2.490889e2 /* kg / m s^2 */\ngsl_const.MKSA.PSI = 6.89475729317e3 /* kg / m s^2 */\ngsl_const.MKSA.POISE = 1e-1 /* kg m^-1 s^-1 */\ngsl_const.MKSA.STOKES = 1e-4 /* m^2 / s */\ngsl_const.MKSA.STILB = 1e4 /* cd / m^2 */\ngsl_const.MKSA.LUMEN = 1e0 /* cd sr */\ngsl_const.MKSA.LUX = 1e0 /* cd sr / m^2 */\ngsl_const.MKSA.PHOT = 1e4 /* cd sr / m^2 */\ngsl_const.MKSA.FOOTCANDLE = 1.076e1 /* cd sr / m^2 */\ngsl_const.MKSA.LAMBERT = 1e4 /* cd sr / m^2 */\ngsl_const.MKSA.FOOTLAMBERT = 1.07639104e1 /* cd sr / m^2 */\ngsl_const.MKSA.CURIE = 3.7e10 /* 1 / s */\ngsl_const.MKSA.ROENTGEN = 2.58e-4 /* A s / kg */\ngsl_const.MKSA.RAD = 1e-2 /* m^2 / s^2 */\ngsl_const.MKSA.SOLAR_MASS = 1.98892e30 /* kg */\ngsl_const.MKSA.BOHR_RADIUS = 5.291772083e-11 /* m */\ngsl_const.MKSA.NEWTON = 1e0 /* kg m / s^2 */\ngsl_const.MKSA.DYNE = 1e-5 /* kg m / s^2 */\ngsl_const.MKSA.JOULE = 1e0 /* kg m^2 / s^2 */\ngsl_const.MKSA.ERG = 1e-7 /* kg m^2 / s^2 */\ngsl_const.MKSA.STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-8 /* kg / K^4 s^3 */\ngsl_const.MKSA.THOMSON_CROSS_SECTION = 6.65245893699e-29 /* m^2 */\ngsl_const.MKSA.BOHR_MAGNETON = 9.27400899e-24 /* A m^2 */\ngsl_const.MKSA.NUCLEAR_MAGNETON = 5.05078317e-27 /* A m^2 */\ngsl_const.MKSA.ELECTRON_MAGNETIC_MOMENT = 9.28476362e-24 /* A m^2 */\ngsl_const.MKSA.PROTON_MAGNETIC_MOMENT = 1.410606633e-26 /* A m^2 */\ngsl_const.MKSA.FARADAY = 9.64853429775e4 /* A s / mol */\ngsl_const.MKSA.ELECTRON_CHARGE = 1.602176487e-19 /* A s */\ngsl_const.MKSA.VACUUM_PERMITTIVITY = 8.854187817e-12 /* A^2 s^4 / kg m^3 */\ngsl_const.MKSA.VACUUM_PERMEABILITY = 1.25663706144e-6 /* kg m / A^2 s^2 */\ngsl_const.MKSA.DEBYE = 3.33564095198e-30 /* A s^2 / m^2 */\ngsl_const.MKSA.GAUSS = 1e-4 /* kg / A s^2 */\n\ngsl_const.NUM = {};\ngsl_const.NUM.FINE_STRUCTURE = 7.297352533e-3 /* 1 */\ngsl_const.NUM.AVOGADRO = 6.02214199e23 /* 1 / mol */\ngsl_const.NUM.YOTTA = 1e24 /* 1 */\ngsl_const.NUM.ZETTA = 1e21 /* 1 */\ngsl_const.NUM.EXA = 1e18 /* 1 */\ngsl_const.NUM.PETA = 1e15 /* 1 */\ngsl_const.NUM.TERA = 1e12 /* 1 */\ngsl_const.NUM.GIGA = 1e9 /* 1 */\ngsl_const.NUM.MEGA = 1e6 /* 1 */\ngsl_const.NUM.KILO = 1e3 /* 1 */\ngsl_const.NUM.MILLI = 1e-3 /* 1 */\ngsl_const.NUM.MICRO = 1e-6 /* 1 */\ngsl_const.NUM.NANO = 1e-9 /* 1 */\ngsl_const.NUM.PICO = 1e-12 /* 1 */\ngsl_const.NUM.FEMTO = 1e-15 /* 1 */\ngsl_const.NUM.ATTO = 1e-18 /* 1 */\ngsl_const.NUM.ZEPTO = 1e-21 /* 1 */\ngsl_const.NUM.YOCTO = 1e-24 /* 1 */\n\nmodule.exports = gsl_const;\n","/**\n * Simple time-stepping - frame, real-time, constant-step - via any API.\n */\n\nexport const steps = {\n    diff: '-', dt: '-', '⏳': '-',\n    pause: 0, '⏸': 0,\n    add: '+', '⏭': '+'\n};\n\nexport const stepDef = steps.diff;\nexport const startDef = 0;\nexport const nowDef = { [steps.diff]: Date.now, [steps.add]: 1e3/60 };\n\n/**\n * Sets up properties needed to track time, starts/steps time in various ways:\n * - Time-difference or time-advance stepping.\n * - Step forwards or backwards in time or pause it.\n * - Current time can be a number or function; or the object's fixed time-step.\n * - Override property, pass the result to new objects.\n *\n * @example\n *     // Initial call sets up properties.\n *     const diff0 = timer({ step: '-' }, 200);\n *     // => { step: '-', time: 200, dt: 200 };\n *     const add0 = timer({ step: 200 });\n *     // => { step: 200, time: 200, dt: 200 };\n *\n *     // Subsequent calls advance time and track difference.\n *\n *     // No time difference here.\n *     timer(diff0, 200); // => { step: '-', time: 200, dt: 0 };\n *     timer(add0, 0); // => { step: 200, time: 200, dt: 0 };\n *\n *     // Time-difference here with a change or step, into a new result target.\n *     const diff1 = timer(diff0, 300, {});\n *     // => { step: '-', time: 300, dt: 100 };\n *     const add1 = timer(add0, null, {});\n *     // => { step: 200, time: 400, dt: 200 };\n *\n *     diff1.time-diff0.time === diff1.dt; // => true;\n *     add1.time-add0.time === add1.dt; // => true;\n *\n * @param {object} state The state being tracked.\n * @param {number} [state.time=startDef] The initial time.\n * @param {string|number} [state.step=stepDef] How time advances:\n *     - Difference since last `time`: `'diff'`/`'dt'`/`'-'`/`'⏳'`.\n *     - Pause: `'pause'`/`'⏸'`, or number zero (`0`).\n *     - Add `time` step: `'add'`/`'+'`/`'⏭'`, or non-zero number (step size).\n * @param {number|function} [now] The time now (clock/frame/step/etc), or a\n *     function giving it; if not given, uses `state.step` if numeric or\n *     `nowDef[state.step]` otherwise.\n * @param {object|false} [out=state] The state to set up; modifies `state` if\n *     not given.\n *\n * @returns {object|number} The given `out` set up with its initial `time`; or\n *     if `out` is falsey, returns the relevant calculated unknown value:\n *     - The difference since last `time` for `diff` step.\n *     - The updated `time` for `add` or `pause` step.\n */\nexport function timer(state, now, out = state) {\n    // Get the initial time and step-step.\n    const { time: t0 = startDef, step = stepDef, now: n } = state;\n    // Get the step mode - from a key into `steps` or a numerical value.\n    const s = (steps[step] ?? step);\n    const diff = (s === steps.diff);\n    const t = (now ?? n ?? nowDef[s] ?? s);\n\n    // Step by `s`:\n    // - `0` or falsey to `pause`\n    // - `steps.diff` for difference since last `time`\n    // - `steps.add` or a number to add a `time` step\n    const t1 = ((!s)? t0 : ((diff)? 0 : t0)+((isNaN(t))? t() : t));\n    const dt = t1-t0;\n\n    // If only returning a value, return the relevant calculated unknown.\n    if(!out) { return ((diff)? dt : t1); }\n\n    out.time = t1;\n    out.dt = dt;\n    out.step = step;\n\n    return out;\n}\n\nexport default timer;\n","const r = Array.prototype.reduce;\n\n/**\n * Reduce an array-like list.\n * Similar to native, but with iteratee-first arguments.\n * Supports the native single-argument behaviour.\n *\n * @see Array.prototype.reduce\n *\n * @param {function} f Iteratee function, called as `Array`'s `reduce` does.\n * @param {array|*} a List to reduce over, array or array-like.\n * @param {*} [to] The initial accumulator, if any; handled like `Array`'s\n *     `reduce` does, given or not.\n *\n * @returns {*} The result of running the reducer iteratee function over all\n *     elements of the list.\n */\nexport const reduce = (f, a, to) =>\n    // Needs separate `call` because native detects even `undefined` parameter.\n    ((to === undefined)? r.call(a, f) : r.call(a, f, to));\n\nexport default reduce;\n","import { reduce } from './reduce';\n\n/**\n * Map an array-like list.\n * Similar to native, but with iteratee-first arguments; and allows the object\n * into which properties will be mapped to be defined (a new array, by default),\n * avoiding always creating new arrays.\n *\n * @see Array.prototype.map\n * @see [reduce]{@link ./reduce.js}\n *\n * @param {function} f The iteratee function, given standard `Array.map`\n *     arguments, and any given `to`.\n * @param {array|*} a The list to map over, array or array-like.\n * @param {false|*} [to=[]] The initial accumulator, if given; `a` if falsey; or\n *     a new array if not given.\n *\n * @returns {*} The result of mapping `to` through the iteratee function over\n *     the `a` list.\n */\nexport const map = (f, a, to = []) => reduce((to, v, i) => {\n        to[i] = f(v, i, a, to);\n\n        return to;\n    },\n    a, (to || a));\n\nexport default map;\n","const e = Array.prototype.forEach;\n\n/**\n * Iterates a function over every element of a list, returning the list.\n *\n * @see Array.prototype.forEach\n *\n * @param {function} f The iteratee function.\n * @param {array|*} a List to iterate over, array or array-like.\n *\n * @returns {array|*} The given list.\n */\nexport const each = (f, a) => {\n    e.call(a, f);\n\n    return a;\n}\n\nexport default each;\n","const { fill } = Array.prototype;\nconst { isFinite } = Number;\nconst { floor } = Math;\n\n/**\n * Fills list with the given items filled via `Array`'s `fill`.\n *\n * @see Array.constructor\n * @see Array.prototype.fill\n * @see Number.isFinite\n *\n * @param {number|array|*} [l=0] How many items to create, or existing list.\n * @param {*} [value] A value to fill the array with; for `Array`'s `fill`.\n * @param {number} [start] Start index, inclusive; for `Array`'s `fill`.\n * @param {number} [end] End index, exclusive; for `Array`'s `fill`.\n *\n * @returns {array|*} List with items filled as given.\n */\nexport const range = (l = 0, value, start, end) =>\n    fill.call(((isFinite(l))? Array(floor(l)) : l), value, start, end);\n\nexport default range;\n","/**\n * Wraps an index over a given length, so that indexes greater than the length\n * loop back past `0`, and indexes less than `0` loop backward from the length.\n * Similar to the indexing behaviour of `Array`'s `slice`.\n * Indexing is the equivalent of a true _modulo_ operator, where JavaScript's\n * `%` operator is actually a _remainder_ operator.\n *\n * @see Array.prototpye.slice\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\n *\n * @param {number} i Index to wrap.\n * @param {number} l Length to wrap the index over.\n *\n * @returns {number} The index wrapped over the length.\n */\nexport const wrapIndex = (i, l) => ((i%l)+l)%l;\n\nexport default wrapIndex;\n","import wrapIndex from './wrap-index';\n\n/**\n * Gives an index wrapped over a given length, or the entry at the wrapped\n * index in a given list; wrapped backwards, forwards, never exceeding bounds.\n *\n * @see [wrapIndex]{@link ./wrap-index.js}\n *\n * @param {number} i The index to wrap.\n * @param {number|array|*} l List to index, array or array-like; or numeric\n *     length for a numeric `wrapIndex` result instead.\n * @param {number} [end=l.length] Length to wrap the index over; allows wrapping\n *     over a sub-range of a list; if not given, tries the list's length.\n *\n * @returns {number|*} The index wrapped over the given length by `wrapIndex`;\n *     or the list entry at the wrapped index, if given a list.\n */\nexport const wrap = (i, l, end = l.length) =>\n    ((end || (end === 0))? l[wrapIndex(i, end)] : wrapIndex(i, l));\n\nexport default wrap;\n","/**\n * The 3 vertices of a 2D triangle covering the viewport in NDC coordinates ([-1, 1]).\n *\n * @export\n * @type {array.<array.<number>>}\n */\nexport const vertices = [[-1, -1], [-1, 4], [4, -1]];\n\nexport const count = vertices.length;\nexport const dim = 2;\n\n/**\n * The flat array of the above triangle, to be bound as a WebGL attribute buffer for\n * rendering the triangle in the vertex shader.\n * These positions will result in clipped NDC coordinates ([-1, 1]) over the\n * viewport's width and height.\n *\n * @export\n * @type {array.<number>}\n */\nexport const positions = vertices.flat();\n\nexport default positions;\n","/**\n * Default properties for `gpgpu` and `GL` capabilities and resources.\n *\n * @module\n * @category JS\n */\nimport { positions, count } from '@epok.tech/gl-screen-triangle';\n\nimport vertGLSL from './index.vert.glsl';\n\n/** Default vertex shader `GLSL` code. */\nexport const vertDef = vertGLSL;\n\n/**\n * Default vertex positions `attribute`; 3 points of a large flat triangle.\n *\n * @see {@link step.toStep}\n */\nexport const positionsDef = positions;\n\n/**\n * Default vertex `count`; 3 points of a large flat triangle.\n *\n * @see {@link step.toStep}\n */\nexport const countDef = count;\n\n// The required and optional `GL` extensions for a `gpgpu` state.\n\n/** Default required `GL` extensions; none. */\nexport const extensions = [];\n\n/** Default required `GL` extensions to render to `float` buffers. */\nexport const extensionsFloat =\n  ['oes_texture_float', 'webgl_color_buffer_float'];\n\n/** Default required `GL` extensions to render to `half float` buffers. */\nexport const extensionsHalfFloat =\n  ['oes_texture_half_float', 'ext_color_buffer_half_float'];\n\n/** Default optional `GL` extensions; update more data in one render pass. */\nexport const optionalExtensions = ['webgl_draw_buffers'];\n\n/**\n * Prefix namespace to avoid naming clashes; recommended.\n *\n * @see {@link index.vert.glsl}\n */\nexport const preDef = 'gpgpu_';\n\n/**\n * Default minimum allowable channels for `framebuffer` attachments.\n * This avoids `RGB32F` `framebuffer` attachments, which errors on Firefox.\n *\n * @see {@link state.framebuffer}\n * @see [Firefox `RGB32F` bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1448632)\n */\nexport const channelsMinDef = 4;\n\n/**\n * Default maximum allowable channels for `framebuffer` attachments.\n * This avoids `RGB32F` `framebuffer` attachments, which errors on Firefox.\n *\n * @see {@link state.framebuffer}\n * @see [Firefox `RGB32F` bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1448632)\n */\nexport const channelsMaxDef = 4;\n\n/**\n * Default maximum `texture`s that may be bound as buffer outputs per-pass.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const buffersMaxDef = 1;\n\n/**\n * Default how many steps are bound as outputs, unavailable as input; for\n * platforms forbidding read/write of same buffer.\n */\nexport const boundDef = 1;\n\n/**\n * Default length of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to this power.\n */\nexport const scaleDef = 9;\n\n/**\n * Default width of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to the default scale.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const widthDef = 2**scaleDef;\n\n/**\n * Default height of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to the default scale.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const heightDef = 2**scaleDef;\n\n/** Default number steps of state to track. */\nexport const stepsDef = 2;\n/** Default values to track; gives 1 set of `texture` channels. */\nexport const valuesDef = [channelsMaxDef];\n\n// `GL` resource format defaults.\n\n/**\n * Default `texture` data type.\n *\n * @see {@link state.texture}\n */\nexport const typeDef = 'float';\n\n/**\n * Default `texture` minification filter.\n *\n * @see {@link state.texture}\n */\nexport const minDef = 'nearest';\n\n/**\n * Default `texture` magnification filter.\n *\n * @see {@link state.texture}\n */\nexport const magDef = 'nearest';\n\n/**\n * Default `texture` wrap mode, avoid `WebGL1` needing power-of-2 `texture`.\n *\n * @see {@link state.texture}\n */\nexport const wrapDef = 'clamp';\n\n/**\n * Default `framebuffer` depth attachment.\n *\n * @see {@link state.framebuffer}\n */\nexport const depthDef = false;\n\n/**\n * Default `framebuffer` stencil attachment.\n *\n * @see {@link state.framebuffer}\n */\nexport const stencilDef = false;\n\n/**\n * A `RegExp` to find the `GLSL` version `number` in a `GL` parameter\n * `SHADING_LANGUAGE_VERSION` formatted `string`.\n */\nexport const glslRx = /[0-9\\.]+/;\n\n/**\n * Set a maximum to guard against number overflow.\n *\n * @todo Should be `(2**15)-1` for `mediump`, but seems to fail above `2**13`.\n * @see [SO](https://stackoverflow.com/a/67791670/716898)\n */\nexport const stepMaxDef = 2**13;\n\n/**\n * Default clear settings to clear each pass's `framebuffer`.\n *\n * @see {@link step.toStep}\n * @see {@link api.clear}\n * @see {@link api.framebuffer}\n *\n * @type {{color:[0,0,0,0],depth:1,stencil:0,framebuffer?:framebuffer}}\n * @prop {framebuffer} [framebuffer] Any `framebuffer` to clear, set upon each\n *   pass.\n */\nexport const clearPassDef = { color: [0, 0, 0, 0], depth: 1, stencil: 0 };\n\n/**\n * Default `getFramebuffer` options, to bind a given `color` to it.\n *\n * @see {@link step.updateMerge}\n * @see {@link api.framebuffer}\n * @see {@link api.getFramebuffer}\n *\n * @prop {texture|null} color Any `texture` to bind as a `framebuffer` output.\n */\nexport const copyFrameDef = { color: null };\n\n/**\n * Default `texture.subimage` options, to bind a given `color`.\n *\n * @see {@link step.updateMerge}\n * @see {@link api.texture}\n * @see {@link api.subimage}\n *\n * @prop {true} copy Indicates `texture.subimage` should copy data from the\n *   currently-bound `framebuffer`.\n */\nexport const copyImageDef = { copy: true };\n","/**\n * Default `gpgpu` vertex shader.\n *\n * @see [@epok.tech/gl-screen-triangle/uv-texture.vert.glsl](https://github.com/keeffEoghan/gl-screen-triangle/tree/master/uv-texture.vert.glsl)\n */\n\nprecision highp float;\n\n/**\n * Uses the default prefix namespace; replaced with any given prefix if this\n * shader's used during `toStep`.\n *\n * @see {@link const.preDef}\n * @see {@link step.toStep}\n */\nattribute vec2 gpgpu_position;\n\nvarying vec2 uv;\n\nvoid main() {\n  // Texture coordinates, range `[0, 1]`, y-axis points upwards.\n  uv = (gpgpu_position*0.5)+0.5;\n  gl_Position = vec4(gpgpu_position, 0, 1);\n}\n","/**\n * The `gpgpu` maps of data for optimal inputs/outputs on a platform.\n *\n * These maps show how to make optimal use of a platform's supported features,\n * how to pack/unpack their data from `framebuffer`s/`texture`s, perform minimal\n * needed samples to retrieve any past values they must derive from, etc.\n *\n * Shaders may declare values they output, values they derive from, groupings of\n * in/dependent values - without handling how these concerns map to the\n * particular platform resources they're using.\n *\n * Platform limits/features/extensions are accounted for, to produce the most\n * efficient mappings available with the least I/O when it comes to drawing\n * (draw passes, `texture` samples, etc).\n *\n * @module\n * @category JS\n *\n * @todo Allow passes within/across `texture`s; separate data/`texture` shapes.\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport each from '@epok.tech/fn-lists/each';\n\nimport { valuesDef, channelsMaxDef, buffersMaxDef } from './const';\n\nconst { isInteger } = Number;\nconst { isArray } = Array;\n\n/**\n * Determines whether a given value is valid and can be stored within the\n * channels available.\n *\n * @param {number} value A value to validate.\n * @param {number} [channelsMax] The maximum channels available to store values.\n *\n * @returns {boolean} Whether the given `value` is valid.\n */\nexport const validValue = (value, channelsMax = channelsMaxDef) =>\n  ((1 <= value) || (value <= channelsMax) ||\n    !!console.error(`\\`gl-gpgpu\\`: the given value (${value}) exceeds the `+\n      `range of channels available, \\`[1, ${channelsMax}]\\` inclusive.`,\n      value, channelsMax));\n\n/**\n * Whether to use buffers to output state `values` in passes per-step, or no\n * output buffers in one pass as a side-effect not updating state `values`.\n *\n * @param {number|false} buffersMax Maximum `texture`s that may be bound as\n *   buffer outputs per-pass.\n *\n * @returns {boolean} Whether to use output buffers in passes, or no output\n *   buffers in one pass.\n */\nexport const useBuffers = (buffersMax) =>\n  isInteger(buffersMax) && (0 < buffersMax) && (buffersMax < Infinity);\n\n/**\n * Minimise resource usage, order `values` to pack into blocks of `channelsMax`;\n * interpreted as indexes into the given `values`.\n *\n * @see {@link mapGroups}\n *\n * @example ```\n *   packValues([1, 2, 3], 4, []); // =>\n *   [2, 0, 1];\n *\n *   packValues([3, 2, 1], 4, []); // =>\n *   [0, 2, 1];\n *\n *   packValues([4, 3, 2], 4, []); // =>\n *   [0, 1, 2];\n *\n *   packValues([1, 1, 4, 2], 4, []); // =>\n *   [2, 3, 0, 1];\n * ```\n *\n * @param {array.<number>} values Each entry is how many interdependent channels\n *   are grouped into one texture in one pass, separate entries may be across\n *   one or more textures/passes. See `mapGroups`.\n * @param {number} [channelsMax=channelsMaxDef] The maximum number of channels\n *   per texture. See `mapGroups`.\n * @param {array} [to=[]] An `array` to store the result; a new `array` if not\n *   given.\n *\n * @returns {array.<number>} `to` The indexes of the given `values`, reordered\n *   to pack into the fewest buckets of `channelsMax` size or less; stored in\n *   the given `to` array.\n */\nexport function packValues(values, channelsMax = channelsMaxDef, to = []) {\n  // Fill `to` with indexes of `values`, and ensure it's the same length.\n  map((_, i) => i, values, to).length = values.length;\n\n  /** Counts the number of empty channels in the current group. */\n  let channels = channelsMax;\n  /** How many values have already been packed. */\n  let packed = 0;\n  /** Tracks the value that best fits the free channels (fills it tightest). */\n  let fitIndex = 0;\n  let fitSize = Infinity;\n\n  for(let i = 0; packed < values.length;) {\n    const v = packed+i;\n    const value = values[to[v]];\n\n    if(!validValue(value, channelsMax)) { return to; }\n\n    // Check how value fits the channels - valid is >= 0, perfect is 0.\n    const fit = channels-value;\n\n    if((fit >= 0) && (fit < fitSize)) {\n      fitSize = fit;\n      fitIndex = v;\n    }\n\n    // Not a perfect fit and can keep searching for better fits - continue.\n    if((fitSize !== 0) && (v < values.length-1)) { ++i; }\n    else {\n      // Got a perfect fit or the search ended - swap in best fit value.\n      const pack = to[fitIndex];\n\n      to[fitIndex] = to[packed];\n      to[packed] = pack;\n\n      // Reduce the free channels by the best value, reset if needed.\n      ((channels -= values[pack]) > 0) || (channels = channelsMax);\n      // Start the search again over the remaining unpacked entries.\n      fitIndex = ++packed;\n      fitSize = Infinity;\n      i = 0;\n    }\n  }\n\n  return to;\n}\n\n/**\n * Groups the `values` of `gpgpu` data across draw passes and data textures.\n *\n * @see {@link packValues}\n * @see {@link data.toData}\n *\n * @example ```\n *   const x = 2;\n *   const y = 4;\n *   const z = 1;\n *   const maps = { values: [x, y, z], channelsMax: 4 };\n *\n *   // No optimisations - values not packed, single texture output per pass.\n *   mapGroups({ ...maps, buffersMax: 1, packed: false }); // =>\n *   {\n *     ...maps, packed: false,\n *     textures: [[0], [1], [2]], // length === 3\n *     passes: [[0], [1], [2]], // length === 3\n *     valueToTexture: [0, 1, 2], valueToPass: [0, 1, 2],\n *     textureToPass: [0, 1, 2]\n *   };\n *\n *   // Automatically packed values - values across fewer textures/passes.\n *   mapGroups({ ...maps, buffersMax: 1 }); // =>\n *   {\n *     ...maps, packed: [1, 0, 2],\n *     textures: [[1], [0, 2]], // length === 2\n *     passes: [[0], [1]], // length === 2\n *     valueToTexture: [1, 0, 1], valueToPass: [1, 0, 1],\n *     textureToPass: [0, 1]\n *   };\n *\n *   // Can bind more texture outputs per pass - values across fewer passes.\n *   mapGroups({ ...maps, buffersMax: 4 }); // =>\n *   {\n *     ...maps, packed: [1, 0, 2],\n *     textures: [[1], [0, 2]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [1, 0, 1], valueToPass: [0, 0, 0],\n *     textureToPass: [0, 0]\n *   };\n *\n *   // Custom packed values - fuller control.\n *   mapGroups({ ...maps, buffersMax: 4, packed: [0, 2, 1] }); // =>\n *   {\n *     ...maps, packed: [0, 2, 1],\n *     textures: [[0, 2], [1]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [0, 1, 0], valueToPass: [0, 0, 0],\n *     textureToPass: [0, 0]\n *   };\n *\n *   // Merge dependent values - fuller control, but no map for merged values.\n *   mapGroups({ ...maps, values: [x+z, y], buffersMax: 4 }); // =>\n *   {\n *     ...maps, packed: [1, 0],\n *     textures: [[1], [0]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [1, 0], valueToPass: [0, 0],\n *     textureToPass: [0, 0]\n *   };\n * ```\n *\n * @param {object} [maps=\\{\\}] Initial maps settings; new `object` if not given.\n *\n * @param {array.<number>} [maps.values=valuesDef()] An `array` where each\n *   `number` denotes how many value channels are grouped into one data-texture\n *   in one draw pass (where any value map logic isn't handled here); each\n *   separate number may be computed across one or more data-textures/passes.\n *\n *   Each value denotes the number of dependent channels to compute together;\n *   separate values denote channels that are independent, and may be drawn in\n *   the same or separate passes, depending on settings/support.\n *\n *   The order may affect the number of textures/passes needed; can maintain\n *   order as-is, or use a more efficient `packed` order. See `packValues`.\n *\n * @param {number} [maps.channelsMax=channelsMaxDef] Maximum channels\n *   per-`texture`.\n * @param {number|false} [maps.buffersMax=buffersMaxDef] Maximum `texture`s that\n *   may be bound as buffer outputs per-pass. Maps multiple passes per-step to\n *   output all `values` if they're spread across more `textures` than this\n *   `number`. Uses one pass and binds no output if given `false`y; useful for\n *   side-effects with no state outputs, like rendering. See `toData`.\n * @param {array.<number>} [maps.packed] An `array` of indexes into `values`\n *   packed into an order that best fits into blocks of `channelsMax` to\n *   minimise resources; or `false`y to use `values` in their given order; uses\n *   `packValues` if not given.\n * @param {object} [to=maps] An `object` to contain the results; modifies `maps`\n *   if not given.\n *\n * @returns {object} `to` The given `to` `object`; how `values` are grouped\n *   per-texture per-pass per-step, meta information, and given parameters.\n * @returns {array.<array.<number>>} `to.passes` Textures grouped into passes,\n *   as `arrays` corresponding to `framebuffer`s in separate draw passes; whose\n *   values are indexes into `to.textures`.\n * @returns {array.<array.<number>>} `to.textures` Values grouped into\n *   textures, as `array`s corresponding to `framebuffer` attachments, into\n *   which `values` are drawn; whose values are indexes into `to.values`.\n * @returns {array.<number>} `to.values` The `values`, as given.\n * @returns {number} `to.buffersMax` Maximum `texture`s that may be bound as\n *   buffer outputs per-pass, as given.\n * @returns {number} `to.channelsMax` Maximum channels per-`texture`, as given.\n * @returns {array.<number>} `to.valueToTexture` Inverse map from each index of\n *   `to.values` to the index of the data-texture containing it.\n * @returns {array.<number>} `to.valueToPass` Inverse map from each index of\n *   `to.values` to the index of the pass containing it.\n * @returns {array.<number>} `to.textureToPass` Inverse map from each index of\n *   `to.textures` to the index of the pass containing it.\n */\nexport function mapGroups(maps = {}, to = maps) {\n  const {\n      values = valuesDef(),\n      buffersMax = buffersMaxDef, channelsMax = channelsMaxDef,\n      // Pack `values` into blocks of `channelsMax` to minimise resources.\n      packed = packValues(values, channelsMax)\n    } = maps;\n\n  // Ensure any properties changed are included.\n  to.values = values;\n  to.buffersMax = buffersMax;\n  to.channelsMax = channelsMax;\n  to.packed = packed;\n\n  const passes = to.passes = [[]];\n  const textures = to.textures = [[]];\n  const valueToTexture = to.valueToTexture = [];\n  const valueToPass = to.valueToPass = [];\n  const textureToPass = to.textureToPass = [];\n\n  /** Whether to use output buffers in passes, or no buffers in one pass. */\n  const output = !!buffersMax;\n  /** Counts the number of channels written in a single draw pass. */\n  let channels = 0;\n  /** Get the index, via any `packed`, from `values`. */\n  const getIndex = ((packed)? ((i) => packed[i]) : ((i) => i));\n  /** Get the value, via any `packed`, from `values`. */\n  const getValue = ((packed)? ((_, i) => values[i]) : ((v) => v));\n\n  return reduce((to, v, i) => {\n      const index = getIndex(i);\n      const value = getValue(v, index);\n\n      if(!validValue(value, channelsMax)) { return to; }\n\n      let p = passes.length-1;\n      let pass = passes[p];\n      let t = textures.length-1;\n      let texture = textures[t];\n\n      if((channels += value) > channelsMax) {\n        channels = value;\n        t = textures.push(texture = [])-1;\n        output && (pass.length >= buffersMax) && (p = passes.push(pass = [])-1);\n        pass.push(t);\n        textureToPass.push(p);\n      }\n      else if(pass.length === 0) {\n        pass.push(t);\n        textureToPass.push(p);\n      }\n\n      texture.push(index);\n      valueToTexture[index] = t;\n      valueToPass[index] = p;\n\n      return to;\n    },\n    values, to);\n}\n\n/**\n * Maps the minimal set of texture reads to derive the next state of values from\n * a past state of values they depend upon.\n *\n * @see {@link mapGroups}\n *\n * @example ```\n *   const maps = mapGroups({\n *     // See `mapGroups` examples for resulting maps.\n *     values: [2, 4, 1], channelsMax: 4, buffersMax: 1, packed: false,\n *     // Derived step/value indexes, per-value; sample entries include:\n *     derives: [\n *       // Single...\n *       2,\n *       // Empty...\n *       ,\n *       // Multiple...\n *       [\n *         // Defined step...\n *         { value: 1, step: 0 },\n *         // All values at any given level/step...\n *         true\n *       ]\n *     ]\n *   });\n *\n *   mapSamples(maps); // =>\n *   {\n *     ...maps,\n *     // Minimum texture samples for values; nested per-pass, per-value.\n *     // Deepest arrays are step/texture index pairs into `maps.textures`.\n *     samples: [\n *       [[0, 2]],\n *       null,\n *       [[1, 0], [0, 0], [0, 1], [0, 2]]\n *     ],\n *     // Value indexes into `to.samples`; nested per-pass, per-value.\n *     // Map from a value index to data it needs in the minimal samples.\n *     reads: [\n *       [[0]],\n *       null,\n *       [null, null, [0, 1, 2, 3]]\n *     ]\n *   };\n * ```\n *\n * @param {object} maps How values are grouped per-`texture` per-pass per-step.\n *   See `mapGroups`.\n *\n * @param {derives} [maps.derives] How the next output state `values` derive\n *   from any past input `values`. If given no `derives`, or a\n *   `false`y-non-integer, no samples are mapped, `to` is returned unchanged.\n *\n * @param {array.<array.<number>>} maps.passes Textures grouped into passes. See\n *   `mapGroups`.\n * @param {array.<array.<number>>} maps.textures Values grouped into textures. See\n *   `mapGroups`.\n * @param {array.<number>} maps.valueToTexture Inverse map from each value index\n *   to the data texture index containing it.\n * @param {object} [to=maps] The object to store the result in; `maps` if not\n *   given.\n *\n * @returns {object} `to` The given `to` object, with resulting maps added for\n *   any given `maps.derives`.\n * @returns {array.<array.<array.<number>>>} `[to.samples]` Map of the minimum\n *   set of indexes into `maps.textures` that need to be sampled per-pass,\n *   to get all `derives` needed for each value of `maps.values` of each\n *   pass of `maps.passes`.\n * @returns {array.<array.<array.<number>>>} `[to.reads]` Sparse map from\n *   each value of `derives` to its step and texture indexes in `to.samples`.\n * @returns {derives} `[to.derives]` How new values derive from past values, as\n *   given.\n */\nexport function mapSamples(maps = {}, to = maps) {\n  const { derives, passes, textures, valueToTexture } = maps;\n\n  if(!derives && (derives !== 0)) { return to; }\n\n  const reads = to.reads = [];\n  const cache = {};\n\n  const allStepSamples = (step) =>\n    cache[step] ??= map((t, value) => ({ step, value }), valueToTexture);\n\n  const getAddSample = (pass, valueNext) => function add(set, derive, d) {\n    /** The past step to derive from. */\n    let step = 0;\n    /** The past value to derive from. */\n    let dp = derive;\n\n    // Derive from any specified `value` and `step` nested properties.\n    (derives !== true) && !isInteger(derives) &&\n      ({ value: dp = dp, step = step } = derive);\n\n    // Derive from all samples at the given or most recent step if given `true`.\n    if(dp === true) { return reduce(add, allStepSamples(step), set); }\n\n    // Derive from the given sample.\n    const texture = valueToTexture[dp];\n\n    if(!(isInteger(step) && isInteger(texture))) {\n      return console.error('`mapSamples`: invalid map for sample',\n        derives, maps, pass, valueNext, derive, d, step, texture, dp);\n    }\n\n    // Create the set if not already created.\n    const to = (set || []);\n    // Check for any existing matching step/texture read in the set.\n    const i = to.findIndex(([s, t]) => (s === step) && (t === texture));\n\n    // Add the read for this next value in this pass; creating any needed maps.\n    ((reads[pass] ??= [])[valueNext] ??= [])\n      // A new read as needed, or any existing matching read.\n      .push((i < 0)? to.push([step, texture])-1 : i);\n\n    return to;\n  };\n\n  const getAddSamples = (pass) => (set, valueNext) => {\n    /** Derive next output value from any given past input values. */\n    const dn = ((isArray(derives))? derives[valueNext] : derives);\n\n    return (((!dn && (dn !== 0))? set\n      : (((dn !== derives) && isArray(dn))?\n        reduce(getAddSample(pass, valueNext), dn, set)\n      : getAddSample(pass, valueNext)(set, dn))));\n  }\n\n  to.samples = map((pass, p) => reduce((set, texture) =>\n        reduce(getAddSamples(p), textures[texture], set),\n      pass, null),\n    passes, []);\n\n  return to;\n}\n\n/**\n * Maps a full step, creates maps grouping given values per-`texture` per-pass\n * per-step, and minimal samples and reads if new values derive from past ones.\n *\n * @see {@link mapGroups}\n * @see {@link mapSamples}\n *\n * @param {object} [maps] Input value maps and settings.\n * @param {object} [to=maps] An `object` to contain the results; modifies `maps`\n *   if not given.\n *\n * @returns {object} `to` The given `to` object; how `values` are grouped\n *   per-`texture` per-pass per-step, meta information, and given parameters;\n *   and minimal samples and reads for any given `maps.derives`.\n */\nexport const mapStep = (maps, to = maps) => mapSamples(mapGroups(maps, to), to);\n\n/**\n * @typedef {derive|array.<derive|array.<derive>>>} derives\n * Denotes how next output `values` derive from any past input `values`.\n *\n * A nested hierarchy of the form\n * `all-next-from-past[any-next-from-past[any-next-from-any-past]]`; each\n * nesting level denotes how to derive:\n * 0. `all-next-from-past`: to all next `values`, from one/all past `value`/s.\n * 1. `any-next-from-past`: to any given next `values` (by sparse `array`\n *   indexes in `values` order), from one/all past `value`/s.\n * 2. `any-next-from-any-past`: to any given next `values` (by its `array` index\n *   in parent level 1), from any past `value`/s in this level 2 `array`.\n *\n * The `array`s are sparse, with empty or `false`y-non-integer entries ignored.\n *\n * See `derive` for how to denote past input `values`.\n *\n * **See**\n *\n * - {@link derive}\n */\n\n/**\n * @typedef {true|number|{value:true|number,step?:number}} derive\n * Denotes any past input `values` (and optional past `step`), that next output\n * `values` derive from.\n *\n * A nested hierarchy of the form `any-value-past[any-value-step-past]`,\n * indexing `values`, each nesting level denotes how to derive from:\n * 0. `any-value-past`: any/all past input `value`/s, at 1st `step` past.\n * 1. `any-value-step-past`: any/all past input `value`/s, at any given `step`\n *   past.\n *\n * The `value`/s to derive from may be given as:\n * - `true`: derives from all `values`.\n * - `number`: derives from the given `values` index.\n *\n * If given a `true` or `number` (denoting `value`/s but no `step`), the next\n * output `value` derives from the given `values` at the 1st `step` past.\n *\n * To specify a different `step`, pass an `object` denoting both the `value` (as\n * above) along with a `step`; in the form `{value:true|number,step?:number}`,\n * to derive from the `value` at any given `step` past (or the 1st `step` past\n * if not given).\n *\n * Any omitted `values` are ignored.\n *\n * See `derives` for more on how these are derived by the next output `values`.\n *\n * **See**\n *\n * - {@link derives}\n */\n\nexport default mapStep;\n","/**\n * @module\n * @category JS\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport range from '@epok.tech/fn-lists/range';\n\nconst { isFinite, isInteger } = Number;\n\n/**\n * Returns the given width, for various properties in order of precedence.\n *\n * @see {@link data.toData}\n *\n * @param {object} value Size (width) `number`, or an `object` containing it.\n * @param {number} [value.width] Width; supersedes further aliases.\n * @param {number} [value.w] Alias of `width`; supersedes further aliases.\n * @param {number} [value.x] Alias of `width`; supersedes further aliases.\n * @param {object} [value.shape] Shape (width) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {object} [value.size] Size (width) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {number} [value.side] Width and height; supersedes further aliases.\n * @param {number} [value.ʼ0ʼ] Alias of `width`; supersedes `value` itself.\n *\n * @returns {number} The width as given in one of the expected properties, or\n *   any given `value` number, or `null`ish if no width could be resolved.\n */\nexport function getWidth(value) {\n  const { width, w, x, shape, size, side, 0: v0 } = value;\n\n  return width ?? w ?? x ??\n    (shape && getWidth(shape)) ?? (size && getWidth(size)) ??\n    side ?? v0 ?? ((isFinite(value))? value : null);\n}\n\n/**\n * Returns the given height, for various properties in order of precedence.\n *\n * @see {@link data.toData}\n *\n * @param {object} value Size (height) `number`, or an `object` containing it.\n * @param {number} [value.height] Height; supersedes further aliases.\n * @param {number} [value.h] Alias of `height`; supersedes further aliases.\n * @param {number} [value.y] Alias of `height`; supersedes further aliases.\n * @param {object} [value.shape] Shape (height) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {object} [value.size] Size (height) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {number} [value.side] Width and height; supersedes further aliases.\n * @param {number} [value.ʼ1ʼ] Alias of `height`; supersedes `value` itself.\n *\n * @returns {number} The height as given in one of the expected properties, or\n *   any given `value` number, or `null`ish if no height could be resolved.\n */\nexport function getHeight(value) {\n  const { height, h, y, shape, size, side, 1: v1 } = value;\n\n  return height ?? h ?? y ??\n    (shape && getHeight(shape)) ?? (size && getHeight(size)) ??\n    side ?? v1 ?? ((isFinite(value))? value : null);\n}\n\n/**\n * Gives the number of entries to draw a full state, for various parameters.\n * Effectively equivalent to `gl_VertexID` in `WebGL2`.\n *\n * @see {@link getWidth}\n * @see {@link getHeight}\n * @see {@link data.toData}\n *\n * @param {object} [size=1] Size `number` of data resources, or an `object`\n *   containing it; width if `height` is given as a second parameter.\n *   See `getWidth` and `getHeight`.\n * @param {number} [size.entries] The `number` of entries of data resources.\n * @param {object} [height=1] Height `number` of data resources, or an `object`\n *   containing it.\n *\n * @returns {number} The number of entries needed to draw a full state; each\n *   entry of a data-texture (its area, equivalent to `state.size.entries`).\n */\nexport const countDrawEntries = (size = 1, height = 1) =>\n  size?.entries ?? (getWidth(size) ?? 1)*(getHeight(height) ?? 1);\n\n/**\n * Gives the `array` of indexes needed to draw a full state.\n *\n * @param {object} size The `number` of entries in each data-`texture`; or an\n *   `object` of size/type of data resources.\n *\n * @returns {array.<number>} An `array` of indexes for drawing all\n *   data-`texture` entries, numbered `0` to `size-1`.\n */\nexport const getDrawIndexes = (size) =>\n  map((_, i) => i, range(isInteger(size)? size : countDrawEntries(size)), 0);\n\n/**\n * 2 raised to the given numeric power, or `null` if not given.\n *\n * @param {number} [scale] The power to raise 2 to.\n *\n * @returns 2 raised to the given numeric power, or `null` if not given.\n */\nexport const getScaled = (scale) => ((isFinite(scale))? 2**scale : null);\n","/**\n * The `gpgpu` state and `GL` data resources.\n *\n * Handles `framebuffer`s, `texture`s; and the main meta info.\n *\n * @module\n * @category JS\n *\n * @todo Allow passes into or across `texture`s; separate shapes of data and\n *   `texture`s.\n * @todo In-place updates of complex resources and meta info.\n */\n\nimport range from '@epok.tech/fn-lists/range';\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\n\nimport { getWidth, getHeight, getScaled } from './size';\n\nimport {\n    widthDef, heightDef, stepsDef, valuesDef, channelsMinDef, buffersMaxDef,\n    typeDef, minDef, magDef, wrapDef, depthDef, stencilDef\n  } from './const';\n\nconst { isInteger } = Number;\n\n/**\n * Whether all states merge into one data-`texture` or remain separate by\n * default, according to the number of `steps` and `textures` to be tracked.\n *\n * Uses separate data-`texture`s when the `steps` and `textures` are few enough\n * to allow it without issue on all platforms; otherwise merges data-`texture`s.\n *\n * @param {number} [steps] How many `steps` of state to track.\n * @param {number} [textures] How many data-`textures` to track per-step.\n *\n * @returns {boolean} Whether to merge states to one data-`texture` by default.\n */\nconst mergeDef = (steps, textures) => ((steps > 2) && (textures > 1));\n\n/**\n * Set up the `gpgpu` resources and meta info for a state of a number data.\n *\n * @example ```\n *   const api = {\n *     framebuffer: ({ depth, stencil, width, height, color }) => null,\n *     texture: ({ type, min, mag, wrap, width, height, channels }) => null\n *   };\n *\n *   // Example with `webgl_draw_buffers` extension support, for 4 buffers.\n *   let maps = mapGroups({ values: [1, 2, 3], buffersMax: 4, packed: 0 });\n *   let state = { steps: 2, side: 10, maps };\n *\n *   const s0 = toData(api, state, {}); // =>\n *   {\n *     ...state,\n *     size: {\n *       steps: 2, passes: 2, textures: 4,\n *       width: 10, height: 10, shape: [10, 10], entries: 100\n *     },\n *     steps: [[s0.passes[0][0].framebuffer], [s0.passes[1][0].framebuffer]],\n *     // This setup results in fewer passes, as more buffers can be bound.\n *     passes: [\n *       [\n *         {\n *           framebuffer: api.framebuffer(s0.passes[0][0]),\n *           color: [s0.textures[0][0].texture, s0.textures[0][1].texture],\n *           map: [0, 1], // maps.passes[0]\n *           entry: 0, index: 0, step: 0,\n *           depth: false, stencil: false, width: 10, height: 10\n *         }\n *       ],\n *       [\n *         {\n *           framebuffer: api.framebuffer(s0.passes[1][0]),\n *           color: [s0.textures[1][0].texture, s0.textures[1][1].texture],\n *           map: [0, 1], // maps.passes[0]\n *           entry: 1, index: 0, step: 1,\n *           depth: false, stencil: false, width: 10, height: 10\n *         }\n *       ]\n *     ],\n *     textures: [\n *       [\n *         {\n *           texture: api.texture(s0.textures[0][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 0, index: 0, step: 0, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s0.textures[0][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 1, index: 1, step: 0, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ],\n *       [\n *         {\n *           texture: api.texture(s0.textures[1][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 2, index: 0, step: 1, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s0.textures[1][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 3, index: 1, step: 1, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ]\n *     ]\n *   };\n *\n *   // Example with no `webgl_draw_buffers` extension support, only 1 buffer.\n *   maps = mapGroups({ values: [1, 2, 3], buffersMax: 1, packed: 0 });\n *   state = { type: 'uint8', steps: 2, scale: 5, maps };\n *\n *   const s1 = toData(api, state, {}); // =>\n *   {\n *     ...state,\n *     size: {\n *       steps: 2, passes: 4, textures: 4,\n *       width: 32, height: 32, shape: [32, 32], entries: 1024\n *     },\n *     steps: [\n *       [s1.passes[0][0].framebuffer, s1.passes[0][1].framebuffer],\n *       [s1.passes[1][0].framebuffer, s1.passes[1][1].framebuffer]\n *     ],\n *     // This setup results in more passes, as fewer buffers can be bound.\n *     passes: [\n *       [\n *         {\n *           framebuffer: api.framebuffer(s1.passes[0][0]),\n *           color: [s1.textures[0][0].texture],\n *           map: [0], // maps.passes[0]\n *           entry: 0, index: 0, step: 0,\n *           depth: false, stencil: false, width: 32, height: 32\n *         },\n *         {\n *           framebuffer: api.framebuffer(s1.passes[0][1]),\n *           color: [s1.textures[0][1].texture],\n *           map: [1], // maps.passes[1]\n *           entry: 1, index: 1, step: 0,\n *           depth: false, stencil: false, width: 32, height: 32\n *         }\n *       ],\n *       [\n *         {\n *           framebuffer: api.framebuffer(s1.passes[1][0]),\n *           color: [s1.textures[1][0].texture],\n *           map: [0], // maps.passes[0]\n *           entry: 2, index: 0, step: 1,\n *           depth: false, stencil: false, width: 32, height: 32\n *         },\n *         {\n *           framebuffer: api.framebuffer(s1.passes[1][1]),\n *           color: [s1.textures[1][1].texture],\n *           map: [1], // maps.passes[1]\n *           entry: 3, index: 1, step: 1,\n *           depth: false, stencil: false, width: 32, height: 32\n *         }\n *       ]\n *     ],\n *     textures: [\n *       [\n *         {\n *           texture: api.texture(s1.textures[0][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 0, index: 0, step: 0, pass: 0,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s1.textures[0][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 1, index: 1, step: 0, pass: 1,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ],\n *       [\n *         {\n *           texture: api.texture(s1.textures[1][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 2, index: 0, step: 1, pass: 0,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s1.textures[1][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 3, index: 1, step: 1, pass: 1,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ]\n *     ]\n *   };\n * ```\n *\n * @todo Example using `merge`.\n *\n * @see {@link api.texture}\n * @see {@link api.framebuffer}\n * @see {@link maps.mapGroups}\n * @see {@link maps.mapSamples}\n * @see {@link maps.useBuffers}\n * @see {@link step.toStep}\n * @see {@link macros.macroSamples}\n * @see {@link macros.macroTaps}\n * @see {@link macros.macroPass}\n * @see {@link size.getWidth}\n * @see {@link size.getHeight}\n * @see {@link size.getScaled}\n *\n * @see [`sampler array index must be a literal expression`](https://stackoverflow.com/a/60110986/716898)\n * @see [`sampler2DArray`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_2d_array.html)\n * @see [`sampler3D`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html)\n *\n * @param {object} api The API for `GL` resources.\n * @param {texture} [api.texture] Function creating `GL` `texture`s.\n * @param {framebuffer} [api.framebuffer] Function creating `GL` `framebuffer`s.\n * @param {object} [state=\\{\\}] The state parameters.\n *\n * @param {number} [state.width=widthDef] Data width, aliases follow in order\n *   of precedence. See `getWidth`.\n * @param {number} [state.w] Alias of `state.width`. See `getWidth`.\n * @param {number} [state.x] Alias of `state.width`. See `getWidth`.\n * @param {number} [state.ʼ0ʼ] Alias of `state.width`. See `getWidth`.\n *\n * @param {number} [state.height=heightDef] Data height, aliases follow in order\n *   of precedence. See `getHeight`.\n * @param {number} [state.h] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.y] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.ʼ1ʼ] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.shape] Data size. See `getWidth` and `getHeight`.\n * @param {number} [state.size] Data size. See `getWidth` and `getHeight`.\n * @param {number} [state.side] Data size of width/height.\n *   See `getWidth` and `getHeight`.\n * @param {number} [state.scale=scaleDef] Data size of width/height as a square\n *   power-of-two size, 2 raised to this power. See `getScaled`.\n *\n * @param {number|array} [state.steps=stepsDef] How many steps of state to\n *   track, or the list of states if already set up.\n * @param {object} [state.maps] How `state.maps.values` are grouped\n *   per-`texture` per-pass per-step. See `mapGroups`.\n * @param {array.<number>} [state.maps.values=valuesDef()] How `values` of each\n *   data item may be grouped into `texture`s across passes; set up here if not\n *   given. See `mapGroups`.\n * @param {number} [state.maps.channelsMin=channelsMinDef] The minimum allowed\n *   channels for `framebuffer` attachments; allocates unused channels as needed\n *   to reach this limit.\n * @param {number|false} [maps.buffersMax=buffersMaxDef] Maximum `texture`s that\n *   may be bound as buffer outputs per-pass. Binds no output `framebuffer`s if\n *   given `false`y; useful for side-effects with no state outputs, like\n *   rendering. See `mapGroups`.\n * @param {number} [state.maps.textures] How `values` are grouped into\n *   data-`texture`s. See `mapGroups`.\n * @param {number} [state.maps.passes] How data-`textures` are grouped into\n *   separate `framebuffer` passes. See `mapGroups`.\n *\n * @param {string} [state.type=typeDef] Any `texture` data type value.\n * @param {string} [state.min=minDef] Any `texture` minification filter value.\n * @param {string} [state.mag=magDef] Any `texture` magnification filter value.\n * @param {string} [state.wrap=wrapDef] Any `texture` wrap mode value.\n * @param {object} [state.depth=depthDef] Any `framebuffer` depth attachment, or\n *   a flag for whether it should be created.\n * @param {object} [state.stencil=stencilDef] Any `framebuffer` stencil\n *   attachment, or a flag for whether it should be created.\n *\n * @param {object} [state.merge=mergeDef(state.maps)] Whether to merge states\n *   into one data-`texture`; `true`y handles merging here, with any given\n *   properties used as-is (the merged data-`texture` already set up); `false`y\n *   uses un-merged `array`s of `texture`s.\n *\n *   Merging allows shaders to access past steps by non-constant lookups; e.g:\n *   attributes cause `\"sampler array index must be a literal expression\"` on\n *   `GLSL3` spec and some platforms (e.g: `D3D`); but takes more work to copy\n *   the last pass's bound `texture`/s to merge into the past `texture`, so\n *   should be used to variably access past steps or avoid limits of `array`s of\n *   `texture`s.\n *   Only this merged past `texture` and those bound in an active pass are\n *   created, as upon each pass the output will be copied to the past `texture`,\n *   and bound `texture`s reused in the next pass.\n *   If not merging, all state is as output by its pass in its own one of the\n *   `array`s of `texture`s.\n *\n *   The default merged `texture` is laid out as `[texture, step]` on the\n *   `[x, y]` axes, respectively; if other layouts are needed, the merge\n *   `texture` can be given here to be used as-is, and the merging/copying and\n *   lookup logic in their respective hooks. See `toStep` and `macroTaps`.\n *   If a merge `texture` is given, size information is interpreted in a similar\n *   way and precedence as it is from `state`. See `getWidth` and `getHeight`.\n *\n * @param {number} [state.merge.width] Merged data width, aliases follow in\n *   order of precedence. See `state`.\n * @param {number} [state.merge.w] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.x] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.ʼ0ʼ] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.height] Merged data height, aliases follow in\n *   order of precedence. See `state`.\n * @param {number} [state.merge.h] Alias of `state.merge.height`. See `state`.\n * @param {number} [state.merge.y] Alias of `state.merge.height`. See `state`.\n *   See `state`.\n * @param {number} [state.merge.ʼ1ʼ] Alias of `state.merge.height`. See `state`.\n * @param {number} [state.merge.shape] Merged data size. See `state`.\n * @param {number} [state.merge.size] Merged data size. See `state`.\n * @param {number} [state.merge.side] Merged data size of width/height.\n * @param {number} [state.merge.scale] Merged data size of width/height as a\n *   square power-of-two size, 2 raised to this power. See `state`.\n *\n * @param {object} [to=state] The state object to set up. Modifies the given\n *   `state` object by default.\n *\n * @returns {object} `to` The state object, set up with the data resources and\n *   meta information, for use with `toStep` and drawing:\n * @returns {object.<number,array.<number,array.<number>>>} `to.maps` Any given\n *   `state.maps`. See `mapGroups`.\n * @returns {array.<array.<object.<texture,string,number,array.<number>>>>}\n *   `to.textures` The `texture`s per-step, as `array`s of objects of `texture`s\n *   and meta info. See `to.maps.textures`.\n * @returns {array.<array.<object.<framebuffer,number,array.<number>>>>}\n *   `to.passes` Passes per step, as `array`s of objects of `framebuffer`s,\n *   referencing `to.textures`, and meta info. See `to.maps.passes`.\n * @returns {array.<framebuffer<array.<texture>>>} `to.steps`\n *   Hierarchy of steps of state, as an `array` of `framebuffer`s from\n *   `to.passes`, with `array`s of `texture`s from `to.textures`, and meta\n *   information; set up here, or the given `state.steps` if it's an `array`.\n *   State data may be drawn into the `framebuffer`s accordingly.\n *   See `mapGroups` and `toStep`.\n * @returns {object|undefined} `[to.merge]` If merging, a given or new merged\n *   `texture` and copier `framebuffer`, with meta info. See `toStep` and\n *   `macroTaps`.\n * @returns {object.<texture,string,number>|undefined} `[to.merge.all]` Any\n *   given `state.merge.all`, or newly-created merged `texture` and meta info.\n * @returns {object.<framebuffer,string,number>|undefined} `[to.merge.next]` Any\n *   given `state.merge.next`, or newly-created `framebuffer` and meta info; for\n *   copying each pass's data into the `merge`d `texture`.\n * @returns {object} `to.size` Size/type information of the created resources.\n * @returns {string} `to.size.type` Data type of `framebuffer`s and `texture`s.\n * @returns {boolean} `to.size.depth` Whether `framebuffer`s attach depth.\n * @returns {boolean} `to.size.stencil` Whether `framebuffer`s attach stencil.\n * @returns {number} `to.size.channelsMin` Minimum channels in any `texture`.\n * @returns {number} `to.size.steps` Number of `to.steps` in the main flow.\n * @returns {number} `to.size.passes` Number of `to.passes` in `to.steps`.\n * @returns {number} `to.size.framebuffers` Number of `framebuffer`s created.\n * @returns {number} `to.size.textures` Number of `to.textures` in `to.passes`.\n * @returns {number} `to.size.colors` Number of `texture`s created.\n * @returns {number} `to.size.width` Width of `framebuffer`s and `texture`s.\n * @returns {number} `to.size.height` Height of `framebuffer`s and `texture`s.\n * @returns {array.<number>} `to.size.shape` Shape of `framebuffer`s and\n *   `texture`s, as `[to.size.width, to.size.height]`.\n * @returns {number} `to.size.entries` Number of entries in each `texture`.\n * @returns {object.<number,string,array.<number>>|undefined} `[to.size.merge]`\n *   Any size/type information about any created or given `merge`d `texture`.\n */\nexport function toData({ texture, framebuffer }, state = {}, to = state) {\n  const {\n      maps, scale, steps = stepsDef,\n      // Resource format settings.\n      type = typeDef, min = minDef, mag = magDef, wrap = wrapDef,\n      depth = depthDef, stencil = stencilDef\n    } = state;\n\n  const scaled = getScaled(scale);\n  const width = Math.floor(getWidth(state) ?? scaled ?? widthDef);\n  const height = Math.floor(getHeight(state) ?? scaled ?? heightDef);\n\n  const {\n      values = (maps.values = valuesDef),\n      channelsMin = (maps.channelsMin = channelsMinDef),\n      buffersMax = (maps.buffersMax = buffersMaxDef),\n      textures: texturesMap, passes: passesMap\n    } = maps;\n\n  const stepsL = steps.length ?? steps;\n  const { merge = mergeDef(stepsL, texturesMap.length) } = state;\n\n  // Ensure any properties changed are included.\n  to.steps = steps;\n  to.merge = merge;\n  to.type = type;\n  to.min = min;\n  to.mag = mag;\n  to.wrap = wrap;\n  to.depth = depth;\n  to.stencil = stencil;\n  to.width = width;\n  to.height = height;\n\n  /** Whether to use output buffers in passes, or no buffers in one pass. */\n  const output = buffersMax || null;\n\n  /**\n   * All `framebuffer` attachments need the same number of channels; enough to\n   * hold all values a pass holds, or all passes hold if merging and reusing.\n   */\n  const passChannels = (pass, min) =>\n    reduce((min, t) =>\n        Math.max(min, reduce((sum, v) => sum+values[v], texturesMap[t], 0)),\n      pass, min);\n\n  /**\n   * If merging past `texture`s and reusing `texture` attachments in each pass's\n   * `framebuffer`, pre-compute the minimum channels for a reusable pool of\n   * `texture` attachments that can hold any pass's values; since all a\n   * `framebuffer`'s attachments also need the same number of channels, this is\n   * also the same number of channels across all passes.\n   */\n  const mergeChannels = ((!merge)? null\n    : reduce((min, p) => passChannels(p, min), passesMap, channelsMin));\n\n  /** Size of the created resources. */\n  const size = to.size = {\n    type, depth, stencil, channelsMin: mergeChannels ?? channelsMin,\n    steps: stepsL, passes: 0, framebuffers: 0, textures: 0, colors: 0,\n    width, height, shape: [width, height], entries: width*height\n  };\n\n  /** The `texture`s created for the `step`/`pass` render flow. */\n  const textures = to.textures = [];\n  /** The passes created for the `step`/`pass` render flow. */\n  const passes = to.passes = [];\n  /** The `texture`s bound to the next pass; reused if merging. */\n  let colorPool;\n\n  /**\n   * Add a `texture` attachment and meta info to `texture`s if applicable; to\n   * return its new `texture` or a reused one to bind to a pass in `passes`.\n   */\n  const addTexture = (channels, w, h, step, pass) => (index, c, _, color) => {\n    /** Properties passed for `texture` creation, then meta info. */\n    const to = { channels, width: w, height: h, type, min, mag, wrap };\n\n    // Resources.\n\n    /**\n     * Add/reuse `texture` color attachments as needed; add minimal `texture`s.\n     * If merging, passes may reuse any pass's existing `texture` attachments;\n     * otherwise, each pass has its own dedicated `texture` attachments.\n     */\n    let entry = c;\n    let t = color?.[entry];\n\n    // Only create new `texture`s if existing ones can't be reused.\n    if(!t) {\n      t = texture?.(to);\n      entry = size.textures++;\n    }\n\n    // Add meta info.\n\n    /** Check if this is bound to a pass. */\n    const s = isInteger(step);\n    const p = isInteger(pass);\n    const i = isInteger(index);\n\n    /** Denotes attached `texture`; if merging, `texture`s are reused. */\n    to.texture = t;\n    /** Denotes attached `texture` entry; if merging, `texture`s are reused. */\n    to.entry = entry;\n\n    s && (to.step = step);\n\n    if(p) {\n      /** Denotes `framebuffer` attachments; may reuse underlying `texture`s. */\n      to.color = size.colors++;\n      to.pass = pass;\n    }\n\n    i && (to.map = texturesMap[to.index = index]);\n\n    // Check whether this `texture` is part of the `step`/`pass` render flow.\n    // If so, add to `textures`, return its `texture` to bind to a pass.\n    // If not, return the entire object.\n    return ((s && p && i)? ((textures[step] ??= [])[index] = to).texture : to);\n  };\n\n  /**\n   * Add a pass to `passes`, with its `texture`s bound; to return its\n   * `framebuffer` to one of `steps`.\n   */\n  const addPass = (step, color) => (pass, index) => {\n    /**\n     * All a `framebuffer`'s attachments need the same number of channels;\n     * superseded by any given `color`'s value.\n     */\n    const channels = color ?? mergeChannels ??\n      ((pass)? passChannels(pass, channelsMin) : channelsMin);\n\n    // Resources.\n\n    /** Properties passed for `framebuffer` creation, then meta info. */\n    const to = {\n      depth, stencil, width, height,\n      /** Map the pass's `texture` color attachments and their meta info. */\n      color: color ??\n        map(addTexture(channels, width, height, step, index), pass,\n          // Reuse any existing color attachments if merging; otherwise make\n          // dedicated color attachments for each pass.\n          ((merge)? (colorPool ??= []) : []))\n    };\n\n    /**\n     * The `framebuffer` for this pass; don't create or bind if `buffersMax`\n     * is `false`y.\n     */\n    to.framebuffer = output && framebuffer?.(to);\n\n    // Add meta info.\n\n    /** Denotes any attached `framebuffer` entry. */\n    to.entry = output && size.framebuffers++;\n\n    if(pass) {\n      to.map = pass;\n      to.pass = size.passes++;\n    }\n\n    const s = isInteger(step);\n    const i = isInteger(index);\n\n    s && (to.step = step);\n    i && (to.index = index);\n\n    // Check whether this pass is part of the `step`/`pass` render flow.\n    // If so, add to `passes`, return its `framebuffer` for its step.\n    return ((pass && s && i)? ((passes[step] ??= [])[index] = to).framebuffer\n        // If not, return the entire object.\n      : to);\n  };\n\n  /**\n   * Set up resources needed to store data per-`texture` per-pass per-step.\n   * Use any given steps/passes or create new ones.\n   */\n  to.steps = map((passes, step) => passes || map(addPass(step), passesMap),\n    ((isInteger(steps))? range(steps) : steps), 0);\n\n  // Finish here if merge is disabled.\n  if(!merge) { return to; }\n\n  // Set up the `texture` for states to be merged into.\n\n  const { scale: mScale, all: mAll, next: mNext } = merge;\n  /** Use any size info given in `merge`, as with `state` above. */\n  const mScaled = getScaled(mScale);\n  /** Use any given size info, or merge along `[texture, step]` axes. */\n  const mw = getWidth(merge) ?? mScaled ?? texturesMap.length*width;\n  const mh = getHeight(merge) ?? mScaled ?? stepsL*height;\n\n  to.merge = {\n    /** New merge `texture` and info, or use any given merge `texture`. */\n    all: mAll ?? addTexture(mergeChannels, mw, mh)(),\n    /** Empty `framebuffer`, to copy data from each `texture` of each pass. */\n    next: mNext ?? addPass(null, false)()\n  };\n\n  size.merge = { width: mw, height: mh, shape: [mw, mh], entries: mw*mh };\n\n  return to;\n}\n\nexport default toData;\n","/**\n * The `gpgpu` inputs for `GL` `uniform`s.\n *\n * @module\n * @category JS\n */\n\nimport { setC2, setC4 } from '@thi.ng/vectors/setc';\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap';\n\nimport { boundDef, preDef } from './const';\n\n/**\n * Sets up `GL` `uniform` inputs for `gpgpu` calls, such as in `toStep`.\n *\n * The `uniform`s are defined as callback hooks to be called on each render pass\n * with global context and local state `object`s, allowing the use of different\n * `GL` APIs or author-defined hooks.\n *\n * Handles inputs of states as `array`s of data-`texture`s, or merged into one\n * data-`texture`; for `array`s of `texture`s, this arranges them on each step\n * so `GLSL` can dynamically sample the flattened `array` of `texture`s by a\n * constant step index; otherwise the single merged `texture` is bound once, and\n * `GLSL` can use a dynamic step index to sample states.\n *\n * @example ```javascript\n * const state = { pre: '', steps: 2, maps: mapStep({ values: [1, 2, 3] }) };\n * const api = {};\n *\n * toUniforms(toData(api, { ...state, merge: false }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Separate state data-`texture`s in an `array` (e.g: `sampler2D[]`).\n *   // State data-`texture`s for the 1st step ago, not bound as outputs.\n *   'states[0]': (context, state) => {},\n *   'states[1]': (context, state) => {},\n *   // Merged `texture` not used.\n *   states: (context, state) => null\n * };\n *\n * toUniforms(toData(api, { ...state, steps: 3, merge: false }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Separate state data-`texture`s in an `array` (e.g: `sampler2D[]`).\n *   // State data-`texture`s for the 1st step ago, not bound as outputs.\n *   'states[0]': (context, state) => {},\n *   'states[1]': (context, state) => {}\n *   // State data-`texture`s for the 2nd step ago, not bound as outputs.\n *   'states[2]': (context, state) => {},\n *   'states[3]': (context, state) => {},\n *   // Merged `texture` not used.\n *   states: (context, state) => null\n * };\n *\n * toUniforms(toData(api, { ...state, merge: true }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Merged states in one data-`texture` upon every pass (e.g: `sampler2D`,\n *   // or `sampler3D`/`sampler2DArray` where supported).\n *   states: (context, state) => {},\n *   // Separate data-`texture`s not used.\n *   'states[0]': (context, state) => null,\n *   'states[1]': (context, state) => null\n * };\n * ```\n *\n * @see {@link step.toStep}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroSamples}\n * @see {@link macros.macroTaps}\n *\n * @param {object} state The `gpgpu` state. See `toData` and `mapGroups`.\n * @param {array|number} state.steps The `array` of steps, or number of steps.\n *   See `toData`.\n * @param {{textures?:number[][]}} state.maps How values are grouped into\n *   data-`texture`s (per-pass per-step). See `mapGroups`.\n * @param {string} [state.pre=preDef] Namespace prefix; `preDef` if not given.\n * @param {{all?:{texture?:object}}} [state.merge] Any merged state `texture`;\n *   uses separate state data-`texture`s if not given. See `toData`.\n *\n * @param {{shape?:number[],merge?:{shape?:number[]}}} [state.size] Any size of\n *   `state` data-`texture`s (as `vec2(width, height)`); with:\n *   - `shape`: Any `state` shape.\n *   - `merge.shape`: Any merged `states` shape, otherwise `state` shape.\n *\n *   See `toData`.\n *\n * @param {number} [state.bound=boundDef] Number of steps bound for output, not\n *   used for input; for platforms preventing read/write of the same `texture`.\n * @param {uniforms|object} [state.uniforms] Any `object` to merge the new\n *   `uniforms` into. See `to`.\n * @param {uniforms|object} [to=state.uniforms] Any `object` to contain the\n *   `uniform` hooks; modifies any `state.uniforms`, or a new `object` if not\n *   given. See `state.uniforms` and `uniforms`.\n *\n * @returns {{\n *     stepNow:(c,state:{stepNow:number})=>number,\n *     stateShape:(c,state:{size:{number}})=>[number,number,number,number],\n *     viewShape:(\n *       context:{drawingBufferWidth:number,drawingBufferHeight:number},s?\n *     )=>[number,number],\n *     states:()=>([])\n *   }}\n *\n * @param {{\n *     stepNow?:number,\n *     bound?:number,\n *     merge?:{texture:object},\n *     textures:{texture:object}[][]\n *   }} state Local properties (the `gpgpu` `state`); with:\n *   - `stepNow`: The current step of the `gpgpu` `state`.\n *   - `bound`: Number of steps bound to output; can't be bound as inputs.\n *   - `merge`: Any `object` containing merged data-`texture`.\n *     - `texture`: Any merged data-`texture`.\n *   - `textures`: Textures per-step, as `array`s of `object`s with a `texture`\n *     property. See `toData`.\n *\n *   The `to` set up with `uniform` callback hooks for the given `state`, to\n *   be called on each render pass for the latest `uniform` values; with:\n *   - `stepNow`: Gives any current step. See `toStep`.\n *   - `stateShape`: Gives any shape of any data-`texture`s; as\n *     `vec4(vec2(width, height), vec2(width, height))`; channels are `null`ish\n *     if there's no valid shape; with:\n *     - Any `state` shape; in `xy` channels.\n *     - Any merged `states` shape, otherwise `state` shape; in `zw` channels.\n *   - `viewShape`: Gives the `GL` viewport shape; as `vec2(width, height)`;\n *     given a `context` parameter with:\n *     - `drawingBufferWidth`: Current `GL` viewport width in pixels.\n *     - `drawingBufferHeight`: Current `GL` viewport height in pixels.\n *   - `states`: Gives the past steps data-`texture`s; as either:\n *     - Any merged data-`texture` as a single `GLSL` `sampler` (e.g: `2D`/\n *       `2DArray`/`3D`; up to to the `GL` API for `texture`); otherwise `null`.\n *     - Any separate data-`texture`s as a `GLSL` `array` of `sampler`s (e.g:\n *       `sampler2D[]`), each part/all of a `gpgpu` step's data and accessible\n *       by constant index (steps ago); otherwise `null`.\n *\n *   These property names may be prefixed with any given `state.pre`.\n *   See `toData` and `toStep`.\n */\nexport function toUniforms(state = {}, to = state.uniforms ??= {}) {\n  const { steps, maps, pre: n = preDef, bound = boundDef } = state;\n  const { textures } = maps;\n  const stepsL = steps.length ?? steps;\n  const texturesL = textures.length;\n  // Local caches.\n  const stateShape = [];\n  const viewShape = [];\n\n  /** Gives any current step. */\n  to[n+'stepNow'] = (_, s) => s.stepNow;\n\n  /** Gives any shape of `state` and any merged `states` data-`texture`s. */\n  to[n+'stateShape'] = (_, { size: { shape: s, merge: m } }) =>\n    ((s)? setC4(stateShape, ...s, ...(m?.shape ?? s)) : setC4(stateShape));\n\n  /** Gives the shape of the `GL` viewport. */\n  to[n+'viewShape'] = ({ drawingBufferWidth: w, drawingBufferHeight: h }) =>\n    setC2(viewShape, w, h);\n\n  /**\n   * Gives all `states` merged in one `texture`, if using `merge`;\n   * otherwise gives `null`.\n   */\n  to[n+'states'] = (_, s) => s.merge?.all?.texture ?? null;\n\n  /**\n   * Past steps, each some steps `ago`, from the current active step at `0`, as\n   * `[0,... stepsL-1-bound]`.\n   */\n  const addTextures = (ago) =>\n    /**\n     * Hooks to pull a given `texture` by the active pass `state`; lets `GLSL`\n     * access the `array` of `texture`s by constant index (steps ago).\n     * Only returns a value if not using a `merge`d `texture`; otherwise `null`.\n     */\n    each((_, t) => to[n+`states[${(ago*texturesL)+t}]`] =\n        (_, { merge: m, stepNow: s, bound: b = bound, textures: ts }) =>\n          ((m)? null : wrap(s-b-ago, ts)?.[t]?.texture),\n      textures);\n\n  /** Flatten all input `texture`s, as `uniform`s are kept in flat `array`s. */\n  for(let ago = 0, pl = stepsL-bound; ago < pl; ++ago) { addTextures(ago); }\n\n  return to;\n}\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback getUniform\n * A `function` hook to update a `GL` `uniform` value for a render pass.\n *\n * **See**\n * - {@link toUniforms}\n * - {@link data.toData}\n * - {@link api.texture}\n *\n * **Returns**\n * A `GL` uniform to be bound via a `GL` API.\n *\n * @param {{\n *     drawingBufferWidth:number,\n *     drawingBufferHeight:number\n *   }} context General or global properties; with:\n *   - `drawingBufferWidth`: Current `GL` viewport width in pixels.\n *   - `drawingBufferHeight`: Current `GL` viewport height in pixels.\n *\n * @param {{\n *     stepNow?:number,\n *     bound?:number,\n *     merge?:{texture:object},\n *     textures:{texture:object}[][]\n *   }} state Local properties (the `gpgpu` state); with:\n *   - `stepNow`: The current step of the `gpgpu` state.\n *   - `bound`: Number of steps bound to output; can't be bound as inputs.\n *   - `merge`: Any `object` containing merged data-`texture`.\n *     - `texture`: Any merged data-`texture`.\n *   - `textures`: Textures per-step, as `array`s of `object`s with a `texture`\n *     property. See `toData`.\n *\n * @returns {number|number[]|texture|object}\n */\n","const [{ length: start}, { length: end }] = '[object {type}]'.split('{type}');\n\n/**\n * Gives the type of a given input.\n *\n * @see https://stackoverflow.com/a/17772086/716898\n *\n * @param {*} x Any input to test.\n *\n * @returns {string} The type of `x`.\n */\nexport const type = (x) => toString.call(x).slice(start, -end);\n\nexport default type;\n","/**\n * The `GLSL` preprocessor macros for working with the `gpgpu` state and maps.\n *\n * Each set of different macros will result in new shader compilations - for\n * optimal performance, the fewest macros possible should be created, one per\n * each given set of inputs, ideally; caches here can be used for efficiency.\n *\n * @module\n * @category JS\n *\n * @todo Redo examples, especially `macroTaps` and `macroPass`.\n * @todo Ensure the `output_N` in `macroOutput` can work with `WebGL2`; look at\n *   using `layout(location=attach_N) out data_N`, not `gl_FragData[attach_N]`.\n *   - [SO: Multiple output textures from the same program](https://stackoverflow.com/questions/51793336/multiple-output-textures-from-the-same-program)\n *   - [SO: GL FragData must be constant zero](https://stackoverflow.com/questions/46740817/gl-fragdata-must-be-constant-zero)\n *   - [SO: How are layout qualifiers better than getAttribLocation in WebGL2](https://stackoverflow.com/questions/50258822/how-are-layout-qualifiers-better-than-getattriblocation-in-webgl2)\n */\n\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport { type } from '@epok.tech/is-type/type';\n\nimport { preDef, boundDef } from './const';\n\n/** Escaped line-feed for easier reading. */\nexport const lineFeed = ' \\\\\\n';\nconst lf = lineFeed;\n\n/** The channels denoted for texture input/output. */\nexport const rgba = 'rgba';\n/** Simple shared cache for temporary or reusable objects. */\nexport const cacheDef = {};\n/** Gives cache keys from simple plain `object` inputs. */\nconst id = JSON.stringify;\n\n/** Names for each part of the macro handling process available to hooks. */\nexport const hooks = {\n  /** The full set of macros. */\n  macroPass: '',\n  /** Each part of the set of macros. */\n  macroValues: 'values', macroOutput: 'output',\n  macroSamples: 'samples', macroTaps: 'taps'\n};\n\n/**\n * Whether handling macros here; or the result of a given hook to handle it.\n *\n * Allows macros of the given key to be handled by external named hooks, to\n * replace any part of the functionality here in overall or granular ways.\n *\n * The macro names checked in this module are found in `hooks`.\n *\n * @example ```javascript\n * // Macros to be handled here, the default.\n * [hasMacros(), hasMacros({}), hasMacros({ macros: true })]]\n *   .every((m) => m == null);\n *\n * // Macros to be handled here, with prefix `'pre_'` instead of `'preDef'`.\n * hasMacros({ pre: 'pre_' }) == null;\n *\n * // Macros not created.\n * [hasMacros({ macros: false }), hasMacros({ macros: 0 })]\n *   .every((m) => m === '');\n *\n * // Macros for `'a'` handled by external `string` hook, not here.\n * hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'a') === '//A\\n';\n * // Macros for `'b'` handled by external `function` hook, not here.\n * hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'b') === '//B\\n';\n * // Macros specified `on` a `'frag'` not created.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, '', 'frag') === '';\n * // Macros specified `on` a `'vert'` handled here.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, '', 'vert') == null;\n * // Macros of `'values'`/`hooks.values` handled here.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, 'values', '') == null;\n * // Macros of `'values'`/`hooks.values` specified `on` a `'vert'` not created.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, 'values', 'vert') === '';\n * ```\n *\n * @see hooks\n *\n * @param {object} [state] Any `object` whose properties may handle macros.\n * @param {string} [key] Any name to check granularly within `macros`. See `hooks`.\n * @param {string} [on=''] Any further macro name specifier; if given, `key`\n *   itself and with this specifier are checked (i.e: `key` then `key+'_'+on`).\n *\n * @param {false|string|((...)=>string|null)|{}} [macros=state.macros] How\n *   macros should be handled, according to their type, in order of precedence:\n *   - `null`ish: macros to be handled here, `null`ish returned.\n *   - `true`: macros to be handled here, `null`ish returned.\n *   - `false`y: no macros to be handled here, empty `''` `string` returned.\n *   - `string`: no macros to be handled here, this hook value's used instead.\n *   - `function`: external `hasMacros`-like `function` hook, called with\n *     `macros(state, key, on, macros)`, the returned value used as shown here.\n *   - `object`: recurses with any value at the given `key`, with\n *     `hasMacros(state, key, on, macros[key])`.\n *   - Otherwise, macros to be handled here, `null`ish returned.\n *\n * @returns {null|string} Either the result of the macros handled elsewhere,\n *   or `null`ish if macros should be handled here.\n */\nexport function hasMacros(state, key, on = '', macros = state?.macros) {\n  if((macros ?? true) === true) { return null; }\n  else if(!macros) { return ''; }\n\n  const t = type(macros);\n\n  return ((t === 'String')? macros\n    : ((t === 'Function')?\n      hasMacros(state, key, on, macros(state, key, on, macros))\n    : (((macros instanceof Object) && (key in macros))?\n      hasMacros(state, key, on, macros[key])\n    : ((on)? hasMacros(state, ((key)? key+'_'+on : on), '', macros)\n    : null))));\n}\n\n/**\n * Generates an `array`-like declaration, as a `GLSL` syntax `string` compatible\n * with versions 1-3.\n *\n * Works around the lack of `const` `array`s in `GLSL` < 3. Used as the base for\n * the other `GLSL` version list types, ensuring a common standard while\n * offering further language features where available.\n *\n * @example ```javascript\n * getGLSLListBase('float', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = float(0);'+lf+\n * 'const int list_1 = float(1);'+lf+\n * 'const int list_2 = float(2);';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,number[]>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array-like declaration string.\n */\nexport const getGLSLListBase = (type, name, a, qualify = '', init = type) =>\n  `const int ${name}_l = ${a.length};`+\n  reduce((s, v, i) =>\n      s+lf+(qualify && qualify+' ')+type+\n        ` ${name}_${i} = ${init}(${v.join?.(', ') ?? v});`,\n    a, '');\n\n/**\n * Generates an array-like declaration, as a `GLSL1` syntax string.\n *\n * Workaround for lack of `const` arrays in `GLSL` < 3. Adds a lookup macro\n * function; slow here, but standard.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL1ListLike('float', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = float(0);'+lf+\n * 'const int list_1 = float(1);'+lf+\n * 'const int list_2 = float(2);\\n'+\n * '// Index macro `list_i` (e.g: `list_i(0)`) may be slow, `+\n *   'use name (e.g: `list_0`) if possible.\\n'+\n * '#define list_i(i) ((i == 2)? list_2 : ((i == 1)? list_1 : list_0))\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array-like declaration string.\n */\nexport const getGLSL1ListLike = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+'\\n'+\n  // @todo Would ideally use the concatenation macro, but can't in GLSL 1.\n  // `#define ${name}_i(i) ${name}_##i`;\n  `// Index macro \\`${name}_i\\` (e.g: \\`${name}_i(0)\\`) may be slow, `+\n    `use name (e.g: \\`${name}_0\\`) if possible.\\n`+\n  `#define ${name}_i(i) ${reduce((s, v, i) =>\n      ((i)? `((i == ${i})? ${name}_${i} : ${s})` : `${name}_${i}`),\n    a, '')}\\n`;\n\n/**\n * Generates an array declaration, as a `GLSL1` syntax string.\n *\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL1ListArray('vec3', 'list', [[1, 0, 0], [0, 2, 0], [0, 0, 3]]); // =>\n * 'const int list_l = 3;'+lf+\n * 'vec3 list_0 = vec3(1, 0, 0);'+lf+\n * 'vec3 list_1 = vec3(0, 2, 0);'+lf+\n * 'vec3 list_2 = vec3(0, 0, 3);'+lf+\n * 'vec3 list[list_l];'+lf+\n * 'list[0] = list_0;'+lf+\n * 'list[1] = list_1;'+lf+\n * 'list[2] = list_2;\\n'+\n * '#define list_i(i) list[i]\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array declaration string.\n */\nexport const getGLSL1ListArray = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+lf+\n  (qualify && qualify+' ')+type+` ${name}[${name}_l];`+\n  reduce((s, _, i) => s+lf+name+`[${i}] = ${name}_${i};`, a, '')+'\\n'+\n  `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Generates an array declaration, as a `GLSL3` syntax string.\n *\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL3List('int', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = int(0);'+lf+\n * 'const int list_1 = int(1);'+lf+\n * 'const int list_2 = int(2);'+lf+\n * 'const int list[list_l] = int[list_l](list_0, list_1, list_2);\\n'+\n * '#define list_i(i) list[i]\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL3` array declaration string.\n */\nexport const getGLSL3List = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+lf+\n  (qualify && qualify+' ')+type+` ${name}[${name}_l] = ${init}[${name}_l](${\n    reduce((s, _, i) => (s && s+', ')+name+'_'+i, a, '')});\\n`+\n  `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Creates a `GLSL` definition of an array, and initialises it with the given\n * values, type, and variable name.\n *\n * The initialisation is valid `GLSL1` or greater syntax; but is written with\n * escaped new-lines so it may be used in a single-line (e.g: for preprocessor\n * macros).\n *\n * For a `qualify` of `const` on any `GLSL` < 3, falls back to using non-array\n * variables with the index appended to `name`, since `const` arrays aren't\n * supported before `GLSL3`.\n *\n * @see {@link getGLSL3List}\n * @see {@link getGLSL1ListLike}\n * @see {@link getGLSL1ListArray}\n *\n * @example ```javascript\n * getGLSLList('int', 'test', [0, 1]); // =>\n * 'const int test_l = 2;'+lf+\n * 'int test_0 = int(0);'+lf+\n * 'int test_1 = int(1);'+lf+\n * 'int test[test_l];'+lf+\n * 'test[0] = test_0;'+lf+\n * 'test[1] = test_1;\\n'+\n * '#define test_i(i) test[i]\\n';\n *\n * getGLSLList('ivec2', 'vecs', [[1, 0], [0, 1]], 'const', 3); // =>\n * 'const int vecs_l = 2;'+lf+\n * 'ivec2 vecs_0 = ivec2(1, 0);'+lf+\n * 'ivec2 vecs_1 = ivec2(0, 1);'+lf+\n * 'const ivec2 vecs[vecs_l] = ivec2[vecs_l](vecs_0, vecs_1);\\n'+\n * '#define vecs_i(i) vecs[i]\\n';\n *\n * getGLSLList('int', 'listLike', [0, 1], 'const', 1); // =>\n * 'const int listLike_l = 2;'+lf+\n * 'const int listLike_0 = int(0);'+lf+\n * 'const int listLike_1 = int(1);\\n'+\n * '// Index macro `listLike_i` (e.g: `listLike_i(0)`) may be slow, `+\n *   'use name (e.g: `listLike_0`) if possible.\\n'+\n * '#define listLike_i(i) ((i == 1)? listLike_1 : listLike_0)\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed (e.g: `const`).\n * @param {number} [glsl=1] The `GLSL` version to target, if specified.\n * @param {string} [init] A data-type initialiser.\n *\n * @returns {string} The `GLSL` (1 or 3) array or array-like declaration string.\n */\nexport const getGLSLList = (type, name, a, qualify = '', glsl = 1, init) =>\n  ((glsl >= 3)? getGLSL3List\n  : ((qualify.trim() === 'const')? getGLSL1ListLike : getGLSL1ListArray))\n    (type, name, a, qualify, init);\n\n/**\n * Defines the values within textures per-step, as `GLSL` preprocessor macros.\n *\n * These macros define mappings from values to their textures and channels.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link maps.mapGroups}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const state = { pre: '', steps: 2 };\n * const maps = { values: [2, 4, 1], channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * state.maps = mapGroups({ ...maps, buffersMax: 1, packed: 0 });\n * macroValues(state); // =>\n * '#define texture_0 0\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_1 1\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_2 2\\n'+\n * '#define channels_2 r\\n'+\n * '\\n'+\n * '#define textures 3\\n'+\n * '#define passes 3\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 1 });\n * state.size = { entries: 2**5 };\n * macroValues(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 2\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n *\n * // Can bind more texture outputs per pass - values across fewer passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * macroValues(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 1\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled\n *   or prefixed. See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {object} state.maps How values are grouped per-`texture` per-pass\n *   per-step.\n * @param {array.<number>} state.maps.values How values of each data item are\n *   grouped into `texture`s. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.textures The groupings of values\n *   into `texture`s. See `mapGroups`.\n * @param {array} state.maps.passes Passes drawn per-step. See `mapGroups`.\n * @param {array|number} state.steps States drawn across frames. See `toData`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *   unavailable as inputs.\n * @param {object} [state.size] Any size information about the GL resources.\n * @param {number} [state.size.entries] The number of data entries per state,\n *   if given. See `toData`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} The `GLSL` preprocessor macros defining the maps from\n *   values to `texture`s and channels.\n */\nexport function macroValues(state, on) {\n  const key = hooks.macroValues;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      maps, steps, bound = boundDef, size, pre: n = preDef,\n      cache = cacheDef\n    } = state;\n\n  const { values, textures, passes: { length: passesL } } = maps;\n  const stepsL = steps.length ?? steps;\n  const entries = size?.entries;\n\n  const c = cache &&\n    `macro@${key}@${n\n      }|${bound}|${id(values)}|${id(textures)}|${stepsL}|${passesL}|${entries}`;\n\n  to = cache?.[c] ??\n    reduce((s, texture, t, _, i = 0) => reduce((s, v) =>\n          s+`#define ${n}texture_${v} ${t}\\n`+\n          `#define ${n}channels_${v} ${rgba.slice(i, i += values[v])}\\n\\n`,\n        texture, s),\n      textures, '')+\n    ((entries)? `#define ${n}entries ${entries}\\n` : '')+\n    `#define ${n}textures ${textures.length}\\n`+\n    `#define ${n}passes ${passesL}\\n`+\n    `#define ${n}stepsPast ${stepsL-bound}\\n`+\n    `#define ${n}steps ${stepsL}\\n`+\n    `#define ${n}bound ${bound}\\n\\n`;\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the outputs being drawn to per-pass, as `GLSL` preprocessor macros.\n *\n * These macros define mappings from values to their outputs, if bound.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link maps.mapGroups}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const maps = { values: [2, 4, 1], channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state = {\n *   pre: '', passNow: 0,\n *   maps: mapGroups({ ...maps, buffersMax: 1, packed: 0 })\n * };\n *\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_0 0\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 1 });\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_1 0\\n'+\n * '#define attach_1 0\\n'+\n * '#define output_1 gl_FragData[attach_1].rgba\\n'+\n * '\\n';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroOutput(state); // =>\n * '#define passNow 1\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 0\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n';\n *\n * // Can bind more texture outputs per pass - values across fewer passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_1 0\\n'+\n * '#define attach_1 0\\n'+\n * '#define output_1 gl_FragData[attach_1].rgba\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 1\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 1\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties for generating the macros. See `toData`:\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `pre` if not given.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<number>} state.maps.values How values of each data item may be\n *   grouped into textures across passes. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.textures The groupings of values\n *   into textures. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.passes The groupings of textures\n *   into passes. See `mapGroups`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} `GLSL` preprocessor macros for the pass's bound outputs.\n */\nexport function macroOutput(state, on) {\n  const key = hooks.macroOutput;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const { passNow: p, maps, pre: n = preDef, cache = cacheDef } = state;\n  const { values, textures, passes } = maps;\n  const pass = passes[p];\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(values)}|${id(textures)}|${id(passes)}`;\n\n  to = cache?.[c] ??\n    `#define ${n}passNow ${p}\\n`+\n    reduce((s, texture, bound, _, i = 0) => reduce((s, v) =>\n          s+'\\n'+\n          `#define ${n}bound_${v} ${texture}\\n`+\n          `#define ${n}attach_${v} ${bound}\\n`+\n          `#define ${n}output_${v} gl_FragData[${n}attach_${v}].${\n            rgba.slice(i, i += values[v])}\\n`,\n        textures[texture], s),\n      pass, '')+'\\n';\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the texture samples/reads per-pass, as `GLSL` preprocessor macros.\n *\n * The macros define the mapping between the values and those they derive from,\n * as step/texture locations in a `samples` list, and indexes to read values\n * from sampled data in a `reads` list (once sampled into a `data` list, as in\n * `macroTaps` or similar).\n *\n * They're set up as function-like macros that may be called from the shader to\n * initialise the mappings arrays with a given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link macroTaps}\n * @see {@link hasMacros}\n * @see {@link getGLSLList}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n * const maps = { values, derives, channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state =\n *   { pre: '', maps: mapStep({ ...maps, buffersMax: 1, packed: 0 }) };\n *\n * // Uses the first pass by default.\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 1;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 2);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) samples_0\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n';\n *\n * // Next pass in this step - no derives, no samples nor reads.\n * state.passNow = 1;\n * macroSamples(state); // =>\n * '';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 4;'+lf+\n *   'const ivec2 samples_0 = ivec2(1, 0);'+lf+\n *   'const ivec2 samples_1 = ivec2(0, 0);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_3 = ivec2(0, 2);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) ((i == 3)? samples_3 : ((i == 2)? samples_2 '+\n *   ': ((i == 1)? samples_1 : samples_0)))\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(0);'+lf+\n *   'const int reads_2_1 = int(1);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(3);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * // Can bind more texture outputs per pass - values across fewer passes.\n * // Also fewer samples where values share derives or textures.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 3;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_1 = ivec2(1, 1);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) '+\n *   '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(1);'+lf+\n *   'const int reads_2_1 = int(0);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(0);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both the\n *   hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {number} [state.passNow=0] The index of the currently active pass;\n *   uses the first pass if not given.\n * @param {object} state.maps  How `values` are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<array.<array.<number>>>} [state.maps.samples] The minimal set\n *   of texture samples to use. See `mapSamples`.\n * @param {array.<array.<array.<number>>>} [state.maps.reads] The mappings from\n *   values to the corresponding `state.samples`. See `mapSamples`.\n * @param {number} [state.glsl=1] The `GLSL` language version.\n *   See `getGLSLList`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} `GLSL` preprocessor macros defining the mappings for\n *   samples and reads, for each value.\n */\nexport function macroSamples(state, on) {\n  const key = hooks.macroSamples;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      passNow: p = 0, maps, glsl, pre: n = preDef, cache = cacheDef\n    } = state;\n\n  const { samples, reads } = maps;\n  const passSamples = samples?.[p];\n  const passReads = reads?.[p];\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(passSamples)}|${id(passReads)}|${glsl}`;\n\n  to = cache?.[c] ??\n    ((!passSamples)? ''\n    : `#define ${n}useSamples${lf+\n        getGLSLList('ivec2', n+'samples', passSamples, 'const', glsl)}\\n`)+\n    ((!passReads)? ''\n    : reduce((s, reads, v) =>\n          `${s}#define ${n}useReads_${v}${lf+\n            getGLSLList('int', n+'reads_'+v, reads, 'const', glsl)}\\n`,\n        passReads, ''));\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the samples of textures per-pass, as `GLSL` preprocessor macros.\n *\n * The macros define the minimal sampling of textures for the data the active\n * pass's values derive from; creates a `data` list containing the samples; the\n * `samples` list variable names are required as created by `macroSamples`.\n *\n * Handles sampling states in a flat array of textures, or merged in one texture\n * (in both `sampler2D`, and `sampler3D`/`sampler2DArray` where supported).\n * Merging allows shaders to access past steps by non-constant lookups; e.g:\n * attributes cause `sampler array index must be a literal expression` on\n * `GLSL3` spec and other platforms (e.g: `D3D`); note these need texture repeat\n * wrapping.\n *\n * They're set up as function-like macros that may be called from the shader to\n * initialise the mappings arrays with a given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see [`sampler array index must be a literal expression`](https://stackoverflow.com/a/60110986/716898)\n * @see [`sampler2DArray`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_2d_array.html)\n * @see [`sampler3D`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html)\n *\n * @see {@link macroSamples}\n * @see {@link hasMacros}\n * @see {@link getGLSLList}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n * @see {@link inputs.toUniforms}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n * const maps = { values, derives, channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state =\n *   { pre: '', maps: mapStep({ ...maps, buffersMax: 1, packed: 0 }) };\n *\n * // Uses the first pass by default.\n * macroTaps(state); // =>\n * '@todo';\n *\n * // Next pass in this step - no derives, no samples nor reads.\n * state.passNow = 1;\n * macroTaps(state); // =>\n * '';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroTaps(state); // =>\n * '@todo';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * // Can bind more texture outputs per pass - values across fewer passes.\n * // Also fewer samples where values share derives or textures.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroTaps(state); // =>\n * '@todo';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {number} [state.passNow=0] The index of the currently active pass;\n *   uses the first pass if not given.\n * @param {object} state.maps  How `values` are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<array.<array.<number>>>} [state.maps.samples] The minimal set\n *   of texture samples to use. See `mapSamples`.\n * @param {object} [state.merge] Any merged state texture; uses separate state\n *   textures if not given. See `toData`.\n * @param {number} [state.glsl=1] The `GLSL` language version.\n *   See `getGLSLList`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} The `GLSL` preprocessor macros defining the minimal\n *   sampling of textures, to suit how states are stored (array of textures, or\n *   all merged into one texture) and supported `GLSL` language features.\n */\nexport function macroTaps(state, on) {\n  const key = hooks.macroTaps;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      passNow: p = 0, maps, merge, glsl, pre: n = preDef,\n      cache = cacheDef\n    } = state;\n\n  const passSamples = maps.samples?.[p];\n  const index = !merge;\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(passSamples)}|${index}|${glsl}`;\n\n  if((to = cache?.[c]) != null) { return to; }\n\n  const glsl3 = (glsl >= 3);\n  /** Which texture sampling function is available. */\n  const texture = 'texture'+((glsl3)? '' : '2D');\n  /** Short and common names for functions and parameters. */\n  const f = n+'tapState';\n  const tap = '#define '+f;\n  /** Common parameters, passed as `(..., stepBy, textureBy)` */\n  const by = `stepBy, textureBy`;\n  /** Aliases default names for brevity, main functions offer more control. */\n  const aka = `#define ${f}(uv)`+lf+f;\n  const akaBy = `#define ${f}By(uv, ${by})`+lf+f;\n  /** The current `sample`, as `[step, texture]`. */\n  const st = n+'samples_';\n  /** Prefix for private temporary variables. */\n  const t = '_'+n;\n  /** A temporary `array` to pass to `getGLSLList`. */\n  const tapsSamples = cache[key+':tapsSamples'] ??= [];\n  const tapsL = tapsSamples.length = passSamples?.length ?? 0;\n\n  /** The main `texture`-sampling logic. */\n  to = ((index)? '' : `#define ${n}mergedStates\\n\\n`)+\n    ((!tapsL)? ''\n    : ((index)?\n      /** Separate un-merged `texture`s accessed by constant index. */\n      '// States in a `sampler2D[]`; looks up 1D index and 2D `uv`; '+lf+\n        'past steps go later in the list.\\n'+\n      `// Pass constant array index values; \\`textures\\`.\\n`+\n      `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      tap+`s(uv, states, textures)`+lf+\n        // Compute before the loop for lighter work.\n        `const int ${t}tlI = int(textures);`+lf+\n        `vec2 ${t}uvI = vec2(uv);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          map((_, i) => texture+\n              // Offset step, `texture`.\n              `(states[(int(${st+i}.s)*${t}tlI)+int(${st+i}.t)], ${t}uvI)`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      '// States may also be sampled by shifted step/texture.\\n'+\n      `// Pass constant array index values; \\`textures, ${by}\\`.\\n`+\n      `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      tap+`sBy(uv, states, textures, ${by})`+lf+\n        // Compute before the loop for lighter work.\n        `const int ${t}tlIB = int(textures);`+lf+\n        `ivec2 ${t}byIB = ivec2(${by});`+lf+\n        `vec2 ${t}uvIB = vec2(uv);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          map((_, i) =>\n              texture+'(states['+\n                  // Offset step.\n                  `((int(${st+i}.s)+${t}byIB.s)*${t}tlIB)+`+\n                  // Offset `texture`.\n                  `int(${st+i}.t)+${t}byIB.t`+\n                `], ${t}uvIB)`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      '// Preferred aliases: index suits states array constant access.\\n'+\n      aka+`s(uv, ${n}states, ${n}textures)\\n`+\n      akaBy+`sBy(uv, ${n}states, ${n}textures, ${by})\\n`\n    : /** Merged 2D `texture`. */\n      '// States merged to a `sampler2D`, scales 2D `uv` over '+\n        '`[textures, steps]`.\\n'+\n      '// Step from now into the past going upwards in the texture.\\n'+\n      `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      tap+`2(uv, states, stepNow, steps, textures)`+lf+\n        // Compute before the loop for lighter work.\n        `vec2 ${t}l2 = vec2(textures, steps);`+lf+\n        `vec2 ${t}uv2 = vec2(uv)/${t}l2;`+lf+\n        // Steps advance in reverse, top-to-bottom.\n        `vec2 ${t}s2 = vec2(1, -1)/${t}l2;`+lf+\n        // Offset `texture`, step.\n        // Each step stored in `texture` top downward at `-stepNow`.\n        // Most recent step to look up is at `-stepNow+1`.\n        `vec2 ${t}i2 = vec2(0, 1)-vec2(0, stepNow);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          // Would repeat wrap; but `WebGL1` needs power-of-2.\n          map((_, i) =>\n              texture+`(states, `+\n                // Offset `texture`, step.\n                `fract(${t}uv2+fract((vec2(${st+i}).ts+${t}i2)*${t}s2)))`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      '// States may also be sampled by shifted step/texture.\\n'+\n      `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      tap+`2By(uv, states, stepNow, steps, textures, ${by})`+lf+\n        // Compute before the loop for lighter work.\n        `vec2 ${t}l2B = vec2(textures, steps);`+lf+\n        `vec2 ${t}uv2B = vec2(uv)/${t}l2B;`+lf+\n        // Steps advance in reverse, top-to-bottom.\n        `vec2 ${t}s2B = vec2(1, -1)/${t}l2B;`+lf+\n        // Offset `texture`, step.\n        // Each step stored in `texture` top downward at `-stepNow`.\n        // Most recent step to look up is at `-stepNow+1`.\n        `vec2 ${t}i2B = vec2(${by}).ts+vec2(0, 1)-vec2(0, stepNow);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          // Would repeat wrap; but `WebGL1` needs power-of-2.\n          map((_, i) =>\n              texture+`(states, `+\n                // Offset `texture`, step.\n                `fract(${t}uv2B+fract((vec2(${st+i}).ts+${t}i2B)*${t}s2B)))`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      ((!glsl3)?\n        '// Preferred aliases: 2D suits merged texture in GLSL < 1.\\n'+\n        aka+`2(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures)\\n`+\n        akaBy+\n          `2By(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures, ${by})\\n`\n      : /**\n         * Merged 3D `texture` types, supported from `GLSL3`.\n         * @todo Check and finish this.\n         */\n        '// States merged to `sampler3D` or `sampler2DArray`; 2D `uv` '+\n          'to 3D; scales `x` over `textures`, `z` over `steps` as:\\n'+\n        '// - `sampler3D`: the number of steps; depth, `[0, 1]`.\\n'+\n        '// - `sampler2DArray`: `1` or less; layer, `[0, steps-1]`.\\n'+\n        `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n        tap+`3(uv, states, stepNow, steps, textures)`+lf+\n          /** @see `...2()` above. */\n          // Compute before the loop for lighter work.\n          `vec2 ${t}l3 = vec2(textures, steps);`+lf+\n          `vec2 ${t}uv3 = vec2(uv)/${t}l3;`+lf+\n          // Offset `texture`.\n          `float ${t}sx3 = 1.0/${t}l3.x;`+lf+\n          // Offset step.\n          `float ${t}s3 = -float(stepNow);`+lf+\n          `float ${t}sz3 = -1.0/${t}l3;`+lf+\n          // Sample into the `data` output list.\n          getGLSLList('vec4', n+'data',\n            // Would repeat wrap; but `sampler2DArray` layer can't.\n            map((_, i) =>\n                texture+'(states, fract(vec3('+\n                  // Offset `texture`.\n                  `${t}uv3.x+(float(${st+i}.t)*${t}sx3), ${t}uv3.y, `+\n                  // Offset step: `sampler3D` depth, `[0, 1]`;\n                  // `sampler2DArray` layer, `[0, steps-1]`.\n                  `(float(${st+i}.s)+${t}s3)*${t}sz3)))`,\n              passSamples, tapsSamples),\n            '', glsl)+'\\n'+\n        '// States may also be sampled by shifted step/`texture`.\\n'+\n        `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n        tap+`3By(uv, states, stepNow, steps, textures, ${by})`+lf+\n          /** @see `...2By()` above. */\n          // Compute before the loop for lighter work.\n          `vec2 ${t}l3B = vec2(textures, steps);`+lf+\n          `vec2 ${t}uv3B = (vec2(uv)+vec2(textureBy, 0))/${t}l3B;`+lf+\n          // Offset `texture`.\n          `float ${t}sx3B = 1.0/${t}l3B.x;`+lf+\n          // Offset step.\n          `float ${t}s3B = float(stepBy)-float(stepNow);`+lf+\n          `float ${t}sz3B = -1.0/${t}l3B;`+lf+\n          // Sample into the `data` output list.\n          getGLSLList('vec4', n+'data',\n            // Would repeat wrap; but `sampler2DArray` layer can't.\n            map((_, i) =>\n                texture+'(states, fract(vec3('+\n                  // Offset `texture`.\n                  `${t}uv3B.x+(float(${st+i}.t)*${t}sx3B), ${t}uv3B.y, `+\n                  // Offset step: `sampler3D` depth, `[0, 1]`;\n                  // `sampler2DArray` layer, `[0, steps-1]`.\n                  `(float(${st+i}.s)+${t}s3B)*${t}sz3B)))`,\n              passSamples, tapsSamples),\n            '', glsl)+'\\n'+\n        '// Preferred aliases: 3D suits merged texture in `GLSL` 3+.\\n'+\n        aka+`3(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures)\\n`+\n        akaBy+\n          `3By(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures, ${by})\\n`\n      ))+'\\n');\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines all `GLSL` preprocessor macro values, `texture` samples, and outputs\n * for the active pass.\n *\n * The macros define the mapping between the active values, their `texture`s and\n * channels, bound outputs, and other macros useful for a draw pass.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link macroValues}\n * @see {@link macroOutput}\n * @see {@link macroTaps}\n * @see {@link macroSamples}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n *\n * // Automatically packed values - values across fewer `texture`s/passes.\n * // Only a single `texture` output per pass - values across more passes.\n * const state = {\n *   passNow: 0, steps: 2, size: { entries: 2**5 },\n *   maps: mapStep({ values, derives, channelsMax: 4, buffersMax: 1 })\n * };\n *\n * macroPass(state); // =>\n * '#define gpgpu_texture_1 0\\n'+\n * '#define gpgpu_channels_1 rgba\\n'+\n * '\\n'+\n * '#define gpgpu_texture_0 1\\n'+\n * '#define gpgpu_channels_0 rg\\n'+\n * '\\n'+\n * '#define gpgpu_texture_2 1\\n'+\n * '#define gpgpu_channels_2 b\\n'+\n * '\\n'+\n * '#define gpgpu_entries 32\\n'+\n * '#define gpgpu_textures 2\\n'+\n * '#define gpgpu_passes 2\\n'+\n * '#define gpgpu_stepsPast 1\\n'+\n * '#define gpgpu_steps 2\\n'+\n * '\\n'+\n * '#define gpgpu_passNow 0\\n'+\n * '\\n'+\n * '#define gpgpu_bound_1 0\\n'+\n * '#define gpgpu_attach_1 0\\n'+\n * '#define gpgpu_output_1 gl_FragData[gpgpu_attach_1].rgba\\n'+\n * '\\n';\n *\n * // Next pass and extra step.\n * ++state.steps;\n * ++state.passNow;\n * state.pre = '';\n * macroPass(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 2\\n'+\n * '#define stepsPast 2\\n'+\n * '#define steps 3\\n'+\n * '\\n'+\n * '#define passNow 1\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 0\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n'+\n * '#define useSamples'+lf+\n *   'const int samples_l = 3;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_1 = ivec2(1, 1);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i)'+lf+\n *   '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(1);'+lf+\n *   'const int reads_2_1 = int(0);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(0);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n'+\n * '// States in a `sampler2D[]`; looks up 1D index and 2D `uv`.\\n'+\n * '@todo';\n * ```\n *\n * @param {object} state Properties for generating the macros. See `toData`\n *   and `mapGroups`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n *\n * @returns {string} The `GLSL` preprocessor macros defining the mappings for\n *   values, `texture`s, channels, bound outputs of the active pass, etc. See\n *   `macroValues`, `macroOutput`, and `macroSamples`.\n */\nexport const macroPass = (state, on) =>\n  hasMacros(state, hooks.macroPass, on) ??\n    macroValues(state, on)+macroOutput(state, on)+macroSamples(state, on)+\n    macroTaps(state, on);\n\nexport default macroPass;\n","/**\n * The `gpgpu` update step.\n *\n * Connects inputs to the `GL` state and renders an update step.\n *\n * @module\n * @category JS\n *\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n */\n\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap';\n\nimport { macroPass } from './macros';\n\nimport {\n    vertDef, preDef, positionsDef, countDef, stepMaxDef,\n    clearPassDef, copyFrameDef, copyImageDef\n  } from './const';\n\nconst { call } = Function;\n\n/**\n * Convenience to get the currently active `framebuffer`.\n *\n * @see {@link toStep}\n * @see {@link data.toData}\n *\n * @param {object} state The `gpgpu` state.\n * @param {object[][]} state.passes Passes per step. See `toData`.\n * @param {number} [state.stepNow] Any active state step index. See `toStep`.\n * @param {number} [state.passNow] Any active draw pass index. See `toStep`.\n *\n * @returns {object} Any active step's active pass object, of the given `state`.\n */\nexport const getPass = ({ passes: ps, stepNow: s, passNow: p }) =>\n  wrap(s, ps)?.[p];\n\n/**\n * Resolve a shader given as either a `string` or `function`.\n *\n * @param {string|(*,*)=>string} shader A shader `string`, or a `function` that\n *   returns one when given the `context` and `state` arguments.\n * @param {*} [context] A `context` passed to `shader` if it's a `function`.\n * @param {*} [state] A `state` passed to `shader` if it's a `function`.\n *\n * @returns {string} The given `shader` if it's a `string`; otherwise if it's a\n *   `function` the `string` returned by calling it with `context` and `state`.\n */\nexport const toShader = (shader, context, state) =>\n  ((shader.call === call)? shader(context, state) : shader);\n\n/**\n * Merged `texture` update, called upon each pass.\n *\n * Copies the active pass's output into the merged `texture`, from each of its\n * `framebuffer` attachments one by one (to support multiple draw buffers).\n * Matches the lookup logic defined in `macroTaps`.\n *\n * @todo Update docs.\n *\n * @see [SO reading from multiple `framebuffer`s](https://stackoverflow.com/a/34160982/716898)\n * @see {@link getPass}\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroTaps}\n *\n * @param {object} state A `gpgpu` state of the active pass.\n * @param {{color:texture[],map:number[]}[][]} state.passes Passes per\n *   step; any active one's found via `getPass`, with:\n *   - `color`: `array` of data-`texture`s.\n *   - `map`: `array` of `number`s, showing how the `texture`s are grouped\n *     per-pass. See `getPass`, `toData`, and `mapGroups`.\n * @param {merge} state.merge The merged `texture` to update.\n * @param {number} [state.stepNow] The currently active state step, if any.\n *\n * @returns {texture} The merged `texture`, updated by the active pass's output;\n *   matches the lookup logic defined in `macroTaps`.\n */\nexport function updateMerge(state) {\n  const {\n      merge, stepNow: s, size,\n      copyFrame: cf = copyFrameDef, copyImage: ci = copyImageDef\n    } = state;\n\n  const { color, map: pass } = getPass(state);\n  const { all: { texture }, next: { framebuffer } } = merge;\n  const to = texture?.subimage;\n  let f = framebuffer;\n\n  // Silent exit if there's not enough info ready now to perform the update.\n  if(!(to && f && color && pass && (s || (s === 0)))) { return texture; }\n\n  /** Handle `object`s or `regl`-like extended `function`s. */\n  (f.call !== Function.call) && (f = f.call);\n\n  const { steps: sl, width: w, height: h } = size;\n  /** Start at the top of the `texture`, move down row-per-step and wrap. */\n  const y = (s%sl)*h;\n\n  /**\n   * Reusable `framebuffer` binds and copies each of the pass `texture`s along\n   * the merged `texture`.\n   */\n  each((c, i) =>\n      (cf.color = c) &&\n        f.call(f, cf).use.call(f, () => to.call(texture, ci, pass[i]*w, y)),\n    color);\n\n  return texture;\n}\n\n/**\n * Creates a `gpgpu` update step function, for use with a `gpgpu` state object.\n *\n * @todo Make this fully and consistently extensible; improve `pipeline`.\n * @todo Example.\n *\n * @see {@link buffer}\n * @see {@link command}\n * @see {@link subimage}\n * @see {@link onStep}\n * @see {@link onPass}\n * @see {@link getPass}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroPass}\n * @see {@link inputs.toUniforms}\n *\n * @param {object} api An API for `GL` resources.\n * @param {buffer} [api.buffer] Function to set up a `GL` buffer.\n * @param {clear} [api.clear] Function to clear `GL` view or `framebuffer`.\n * @param {command} [api.command=api] Function to create a `GL` render pass,\n *   given options, to be called later with options; `api` if not given.\n * @param {object} state The `gpgpu` state to use. See `toData` and `mapGroups`.\n * @param {object} state.maps How values are grouped per-`texture` per-pass\n *   per-step. See `mapGroups`.\n * @param {number[][]} state.maps.passes How textures are grouped into passes.\n *   See `mapGroups`.\n * @param {object} [state.merge] Any merged state `texture`; uses separate state\n *   textures if not given.\n * @param {object} [state.merge.texture] Any `GL` `texture` of `state.merge`.\n * @param {subimage} [state.merge.texture.subimage] A function to update part of\n *   the merge `GL` `texture` object data. See `subimage`.\n * @param {function} [state.merge.update] Hook to update, if any; if not given,\n *   `state.merge.texture` is updated here with active states upon each pass.\n *\n *   The default merged `texture` is laid out as `[texture, step]` on the\n *   `[x, y]` axes, respectively; if other layouts are needed, this merge update\n *   hook can be given to use as-is, and the setup and lookup logic in their\n *   respective hooks.\n *\n *   See `toData` and `macroTaps`.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n * @param {string} [state.vert=vertDef] The step vertex shader `GLSL`; a\n *   simple flat screen shader if not given.\n * @param {string} state.frag The step fragment shader `GLSL`.\n * @param {object} [state.uniforms=toUniforms(state)] The step uniforms;\n *   modifies any given. See `toUniforms`.\n * @param {number[]|buffer} [state.positions=positionsDef()] The step position\n *   `attribute`s; 3 points of a large flat triangle if not given.\n * @param {number} [state.count=state.positions.length*0.5] The `number` of\n *   elements/`attribute`s to draw.\n * @param {object} [state.pipeline] Any `GL` command properties to mix in\n *   overriding those ones added here; all passed to `api.command`.\n * @param {string} [state.vert=vertDef] Vertex `GLSL` code to prepend `macro`s.\n * @param {string[]} [state.verts] Preprocesses and caches vertex `GLSL`\n *   code per-pass if given, otherwise processes just-in-time before each pass.\n * @param {string} [state.frag] Fragment `GLSL` to prepend `macro`s.\n * @param {string[]} [state.frags] Preprocesses and caches fragment `GLSL`\n *   code per-pass, otherwise processes just-in-time before each pass.\n * @param {onStep} [onStep] Callback upon each step.\n * @param {onPass} [onPass] Callback upon each pass.\n * @param {object} [to=state] The `object` to set up. Modifies the given `state`\n *   `object` by default.\n *\n * @returns {object} `to` The given `to` `object`; set up with a `gpgpu` step\n *   `function` and related properties, to use with the `gpgpu` state.\n * @returns {string} `to.vert` The given/new `state.vert` vertex shader `GLSL`.\n * @returns {string} `to.frag` The given `state.frag` fragment shader `GLSL`.\n * @returns {string[]} `[to.verts]` Any cached pre-processed vertex shaders\n *   `GLSL`, if `state.verts` was given.\n * @returns {string[]} `[to.frags]` Any cached pre-processed fragment shaders\n *   `GLSL`, if `state.verts` was given.\n * @returns {object} `to.uniforms` The given `state.uniforms`.\n * @returns {number} `to.count` The given or new `state.count`.\n * @returns {buffer} `to.positions` The given or new `state.positions`; via\n *   `api.buffer`.\n * @returns {command} `to.pass` A `GL` command `function` to draw a given pass;\n *   via `api`/`api.command`.\n * @returns {function} `to.step` The main `function` to perform all the draw\n *   pass `GL` commands for a given state step.\n */\nexport function toStep(api, state = {}, to = state) {\n  /** Handle `object`s or `regl`-like extended `function`s, for `command`. */\n  const { buffer, clear, command = api } = api;\n\n  const {\n      merge, pipeline, verts, frag, frags, uniforms, attributes, maps,\n      // Update any default vertex `shader` to use the given `pre`.\n      pre: n = preDef, vert = vertDef.replaceAll(preDef, n || ''),\n      // Any vertex `count`, and `positions` to be passed to `buffer`.\n      count = countDef, positions = positionsDef\n    } = state;\n\n  // Ensure any properties changed are included.\n  to.pre = n;\n  to.vert = vert;\n  to.count = count;\n  to.positions = buffer(positions);\n\n  // May pre-process and keep the `shader`s for all passes in advance.\n  if(verts || frags) {\n    // Keep the current pass.\n    const { passNow } = state;\n\n    verts && (to.verts = verts);\n    frags && (to.frags = frags);\n\n    each((pass, p) => {\n        // Create `macro`s for this pass in advance.\n        state.passNow = p;\n\n        // Specify a `'vert'` type `shader` for any per-`shader` `macro` hooks.\n        verts &&\n          (verts[p] ??= macroPass(state, 'vert')+toShader(vert, null, state));\n\n        // Specify a `'frag'` type `shader` for any per-`shader` `macro` hooks.\n        frags &&\n          (frags[p] ??= macroPass(state, 'frag')+toShader(frag, null, state));\n      },\n      maps.passes);\n\n    // Set the pass back to what it was.\n    state.passNow = passNow;\n  }\n\n  /** A `command` to render `pass` updates via a `GL` `pipeline` description. */\n  to.pass = command(to.pipeline = {\n    // Uses the full-screen vertex `shader` state by default.\n    vert(c, s) {\n      const { passNow: p, step: { vert: v = vert, verts: vs = verts } } = state;\n\n      // Specify a `'vert'` type `shader` for any per-`shader` `macro` hooks.\n      return vs?.[p] ?? macroPass(s, 'vert')+toShader(v, c, s);\n    },\n    frag(c, s) {\n      const { passNow: p, step: { frag: f = frag, frags: fs = frags } } = state;\n\n      // Specify a `'frag'` type `shader` for any per-`shader` `macro` hooks.\n      return fs?.[p] ?? macroPass(s, 'frag')+toShader(f, c, s);\n    },\n    /** Need an active `pass` with `framebuffer`, or may draw to the screen. */\n    framebuffer: (_, s) => getPass(s)?.framebuffer,\n    count, uniforms,\n    attributes: {\n      [n+'position']: (_, s) => s.positions,\n      ...attributes\n    },\n    depth: { enable: false },\n    /** Any `pipeline` properties shallow-override others of the same name. */\n    ...pipeline\n  });\n\n  /** Any merged `texture`'s update, set up if not already given. */\n  merge && ((to.merge = merge).update ??= updateMerge);\n\n  /** Executes the next step and all its passes. */\n  to.step = (state = to) => {\n    const {\n        steps, merge, pass, onPass, onStep,\n        stepMax = stepMaxDef, clearPass = clearPassDef\n      } = state;\n\n    let { stepNow = 0 } = state;\n\n    /** Guard for number overflow; set to 0 to ignore or handle in `GLSL`. */\n    stepNow = state.stepNow = (stepNow+1)%(stepMax || Infinity);\n\n    const mergeUpdate = merge?.update;\n    const stepProps = onStep?.(state, wrap(stepNow, steps)) ?? state;\n\n    each((p, i) => {\n        stepProps.passNow = i;\n\n        const passProps = onPass?.(stepProps, p) ?? stepProps;\n\n        /** @todo Remove `clear` call if unnecessary? */\n        ((clearPass.framebuffer = getPass(passProps)?.framebuffer) &&\n          clear(clearPass));\n\n        pass(passProps);\n        // Update any merged `texture` upon each pass.\n        mergeUpdate?.(passProps);\n      },\n      stepProps.maps.passes);\n\n    delete clearPass.framebuffer;\n\n    return state;\n  };\n\n  return to;\n}\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback onStep\n * Callback upon each step.\n *\n * **See**\n * - {@link toStep}\n * - {@link data.toData}\n * - {@link state.framebuffer}\n *\n * **Returns**\n * - A `stepProps` object to use for each of the step's next passes; or\n *   `null`ish to use the given `props`.\n *\n * @param {object} [props] The `props` passed to `run`.\n * @param {framebuffer[]} step The `framebuffer`s for `props.stepNow` from\n *   `props.steps`, where the next state step will be drawn. See `toData`.\n *\n * @returns {object}\n */\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback onPass\n * Callback upon each pass.\n *\n * **See**\n * - {@link toStep}\n * - {@link maps.mapGroups}\n *\n * **Returns**\n * - A `passProps` object to use for the render `command` call; or `null`ish to\n *   use the given `stepProps`.\n *\n * @param {object} [stepProps] The `props` passed to `run` via any `onStep`.\n * @param {number[]} pass The maps for the next pass. See `mapGroups`.\n *\n * @returns {object}\n */\n\n/** A wrapper around `updateMerge`, handy for testing. */\nfunction updateMergeTest(state, update = updateMerge, after = 2) {\n  const { color, map: pass } = getPass(state);\n  const { merge: { all, next }, stepNow: s, passNow: p, size, maps } = state;\n  const { channels } = all;\n  const { steps: sl, shape: [w, h], merge: { shape: [wl, hl] } } = size;\n  const tl = maps.textures.length;\n  const y = (s%sl)*h;\n  const lc = y*tl*w;\n  const to = update(state);\n  let f = next?.framebuffer;\n\n  /** Handle `object`s or `regl`-like extended `function`s. */\n  (f.call !== call) && (f = f?.call);\n\n  console.warn(s, p, pass, ':');\n  console.warn('- l', 0, 'r', tl*w, 'w', w, 'wl', wl);\n  console.warn('- t', y, 'b', y+h, 'h', h, 'hl', hl);\n  console.warn('- c', channels, 'lc', lc*channels, 'rc', (lc+(w*h))*channels,\n    'sc', w*h*channels, 'slc', wl*hl*channels);\n\n  f.call(f, { color: to }).use.call(f, () =>\n    console.warn(Array.prototype.reduce.call(regl.read(), (o, v, i) =>\n        o+((i)? ',\\t' : '')+\n        ((!i)? ''\n        : ((i%(tl*w*h*channels) === 0)?\n            `\\n${'='.repeat(100)}step${'='.repeat(100)}\\n`\n        : ((i%(tl*w*channels) === 0)? '\\n'\n        : ((i%(w*channels) === 0)? ' || \\t'\n        : ((i%channels === 0)? ' / \\t' : '')))))+\n        (i*1e-3).toFixed(3).slice(2)+': '+((v)? v.toFixed(2) : '___'),\n      '\\n')));\n\n  if(s && after && s%(sl*after) === 0) { debugger; }\n\n  return to;\n}\n\nexport default toStep;\n","/**\n * **Main `index.js` - see [`readme`](..)**\n *\n * [![`gl-gpgpu` particles demo](media://demo-particles-regl-frames.png)](..)\n *\n * [GPGPU](https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units)\n * state-stepping - declaratively maps optimal draw passes, shaders, `GL`\n * resources, inputs, outputs - lets you focus on your logic, BYO-renderer.\n *\n * Decouples logic from rendering approach/engine.\n * Each module and hook may be used as given, or piecemeal, or overridden.\n *\n * @module (root)\n * @category Root\n * @category JS\n */\n\nimport './api';\nimport { glslRx } from './const';\nimport { mapStep } from './maps';\nimport { toData } from './data';\nimport { toUniforms } from './uniforms';\nimport { toStep } from './step';\n\nconst { isFinite } = Number;\n\n/**\n * Parse a `GLSL` version into a `number`.\n *\n * @see {@link const.glslRx}\n *\n * @param {string|number} version A `GLSL` version `string`, expected in a `GL`\n *   parameter `SHADING_LANGUAGE_VERSION` format to parse into a `number`, from\n *   any first found version number or the full given `string` otherwise; or a\n *   `number`, to use as-is.\n *\n * @returns {number} A `GLSL` version `number`, parsed from the given `version`.\n */\nexport const getGLSL = (version) =>\n  ((isFinite(version))? version\n  : parseFloat(version?.match?.(glslRx)?.[0] ?? version, 10));\n\n/**\n * Sets up all the maps, data, inputs, and commands for a `gpgpu` process.\n *\n * Hooks up each main part in order into the complete process. Each part may\n * also be used individually for more custom behaviour; see their documentation.\n *\n * @see {@link maps.mapStep}\n * @see {@link maps.mapGroups}\n * @see {@link maps.mapSamples}\n * @see {@link maps.useBuffers}\n * @see {@link data.toData}\n * @see {@link uniforms.toUniforms}\n * @see {@link step.toStep}\n * @see {@link macros.macroPass}\n *\n * @param {object} api An API for `GL` resources. See `toData` and `toStep`.\n * @param {object} [api.limits=api] A map of `GL` resource limits.\n * @param {number} [api.limits.maxDrawbuffers] The maximum number of `GL`\n *   `texture`s a `framebuffer` can bind in a single draw call.\n * @param {object} [state=\\{\\}] State properties to set up; a new `object` by\n *   default. See `toData`, `toUniforms`, and `toStep`.\n * @param {object} [state.maps] How values are grouped per-`texture` per-pass\n *   per-step. Sets up new maps if not given or missing its mapped properties.\n *   See `mapStep`.\n * @param {number|false} [state.maps.buffersMax=api.limits.maxDrawbuffers]\n *   Maximum `texture`s that may be bound as buffer outputs per-pass. Multiple\n *   passes per-step are needed to output all `values` if they're spread across\n *   more `textures` than this `number`. Uses one pass and binds no output if\n *   given `false`y; useful for side-effects with no state outputs, like\n *   rendering. See `useBuffers`, `mapGroups`, and `toData`.\n * @param {object} [to=state] The `object` to set up. Modifies the given `state`\n *   object by default.\n *\n * @returns {object} The given `to` data `object`; set up with data resources\n *   for a `gpgpu` process. See `mapStep`, `toData`, `toUniforms`, `toStep`.\n */\nexport function gpgpu(api, state = {}, to = state) {\n  const { maxDrawbuffers, glsl: apiGLSL } = api.limits ?? api;\n  const { maps = {}, glsl = apiGLSL } = state;\n  const { buffersMax } = maps;\n\n  /** The parsed `GLSL` version. */\n  to.glsl = getGLSL(glsl);\n\n  /**\n   * Temporary updates to set up `maps` then `state`.\n   * Any `maps.buffersMax` supersedes any `maxDrawbuffers` from the `api`.\n   */\n  maps.buffersMax ??= maxDrawbuffers;\n  state.maps = mapStep(maps, to.maps ??= {});\n\n  toData(api, state, to);\n  toUniforms(state, to.uniforms ??= {});\n  toStep(api, state, to);\n\n  // Undo any temporary changes made above to the given `maps` and `state`.\n  /** @todo Improve, this is awkward. */\n  (state.maps = maps).buffersMax = buffersMax;\n\n  return to;\n}\n\nexport default gpgpu;\n","/**\n * How many vertexes for a given form to cover each entry's steps of state:\n * - If 2 states or form are given, gives a setup of pairs for a line segment\n *   between each entry's steps of state using `gl.LINES`.\n * - If fewer than 2 states or form are given, gives a setup for a point at each\n *   entry's steps of state using `gl.POINTS`.\n *\n * Possibly useful for other forms too.\n *\n * Corresponds to the indexing logic in the `indexForms` `GLSL` function.\n *\n * @module\n * @category JS\n *\n * @see {@link index-forms/index-states.glsl!}\n * @see {@link index-forms/index-entries.glsl!}\n * @see [`gl.LINES`](https://webglfundamentals.org/webgl/lessons/webgl-points-lines-triangles.html)\n *\n * @param {number} [states=1] How many steps of state each entry has.\n * @param {number} [form=2] How many steps of state each form covers.\n * @param {number} [count=1] How many entries, if any; result to be multiplied\n *   externally if not given.\n *\n * @returns {number} The number of vertexes needed for the given `form` to cover\n *   all steps of `states`; over all `count` if given, to be multiplied\n *   externally if not given.\n *\n * @remarks [[include:src/index-forms/readme.md]]\n */\nexport const indexForms = (states = 1, form = 2, count = 1) =>\n  Math.max(1, (states-form)+1)*form*count;\n\nexport default indexForms;\n","import { EPS, HALF_PI, PI } from \"./api.js\";\n/**\n * Linear interpolation without clamping. Computes `a + (b - a) * t`\n *\n * @param a - start value\n * @param b - end value\n * @param t - interpolation factor [0..1]\n */\nexport const mix = (a, b, t) => a + (b - a) * t;\n/**\n * Bilinear interpolation of given values (`a`,`b`,`c`,`d`).\n *\n * @example\n * ```ts\n * c    d\n * +----+\n * |    |\n * +----+\n * a    b\n * ```\n *\n * @param a - BL value\n * @param b - BR value\n * @param c - TL value\n * @param d - TR value\n * @param u - 1st interpolation factor\n * @param v - 2nd interpolation factor\n */\nexport const mixBilinear = (a, b, c, d, u, v) => {\n    const iu = 1 - u;\n    const iv = 1 - v;\n    return a * iu * iv + b * u * iv + c * iu * v + d * u * v;\n};\n/**\n * Computes quadratic bezier interpolation for normalized value `t`.\n *\n * @param a\n * @param b\n * @param c\n * @param t\n */\nexport const mixQuadratic = (a, b, c, t) => {\n    const s = 1 - t;\n    return a * s * s + b * 2 * s * t + c * t * t;\n};\n/**\n * Computes cubic bezier interpolation for normalized value `t`.\n *\n * @param a\n * @param b\n * @param c\n * @param d\n * @param t\n */\nexport const mixCubic = (a, b, c, d, t) => {\n    const t2 = t * t;\n    const s = 1 - t;\n    const s2 = s * s;\n    return a * s2 * s + b * 3 * s2 * t + c * 3 * t2 * s + d * t2 * t;\n};\n/**\n * Returns hermite interpolation of `a, b, c, d` at normalized position `t`,\n * where `a` and `d` are used as predecessor/successor of `b` / `c` and only\n * inform the tangent of the interpolation curve. The interpolated result is\n * that of `b` and `c`.\n *\n * Assumes all inputs are uniformly spaced. If that's not the case, use\n * {@link mixCubicHermite} with one of the tangent generators supporting\n * non-uniform spacing of points.\n *\n * See: https://www.desmos.com/calculator/j4gf8g9vkr\n *\n * Source:\n * https://www.musicdsp.org/en/latest/Other/93-hermite-interpollation.html\n *\n * - {@link mixCubicHermite}\n * - {@link tangentCardinal}\n * - {@link tangentDiff3}\n *\n * @param a -\n * @param b -\n * @param c -\n * @param d -\n * @param t -\n */\nexport const mixHermite = (a, b, c, d, t) => {\n    const y1 = 0.5 * (c - a);\n    const y2 = 1.5 * (b - c) + 0.5 * (d - a);\n    return ((y2 * t + a - b + y1 - y2) * t + y1) * t + b;\n};\n/**\n * Computes cubic-hermite interpolation between `a` / `b` at normalized\n * time `t` and using respective tangents `ta` / `tb`.\n *\n * https://en.wikipedia.org/wiki/Cubic_Hermite_spline\n *\n * - {@link mixHermite}\n * - {@link tangentCardinal}\n * - {@link tangentDiff3}\n *\n * @param a -\n * @param ta -\n * @param b -\n * @param tb -\n * @param t -\n */\nexport const mixCubicHermite = (a, ta, b, tb, t) => {\n    const s = t - 1;\n    const t2 = t * t;\n    const s2 = s * s;\n    const h00 = (1 + 2 * t) * s2;\n    const h10 = t * s2;\n    const h01 = t2 * (3 - 2 * t);\n    const h11 = t2 * s;\n    return h00 * a + h10 * ta + h01 * b + h11 * tb;\n};\n/**\n * Similar to {@link mixCubicHermite}, but takes 4 control values (uniformly\n * spaced) and computes tangents automatically. Returns `b` iff `t=0` and `c`\n * iff `t=1.0`.\n *\n * @param a -\n * @param b -\n * @param c -\n * @param d -\n * @param t -\n */\nexport const mixCubicHermiteFromPoints = (a, b, c, d, t) => {\n    d *= 0.5;\n    const aa = -0.5 * a + 1.5 * b - 1.5 * c + d;\n    const bb = a - 2.5 * b + 2 * c - d;\n    const cc = -0.5 * a + 0.5 * c;\n    const dd = b;\n    const t2 = t * t;\n    return t * t2 * aa + t2 * bb + t * cc + dd;\n};\n/**\n * Bicubic interpolation of given 4x4 sample values (in row major order, i.e.\n * `s00..s03` = 1st row).\n *\n * @remarks\n * Result will not be clamped and might fall outside the total range of the\n * input samples.\n *\n * @param s00 -\n * @param s01 -\n * @param s02 -\n * @param s03 -\n * @param s10 -\n * @param s11 -\n * @param s12 -\n * @param s13 -\n * @param s20 -\n * @param s21 -\n * @param s22 -\n * @param s23 -\n * @param s30 -\n * @param s31 -\n * @param s32 -\n * @param s33 -\n * @param u -\n * @param v -\n */\nexport const mixBicubic = (s00, s01, s02, s03, s10, s11, s12, s13, s20, s21, s22, s23, s30, s31, s32, s33, u, v) => mixCubicHermiteFromPoints(mixCubicHermiteFromPoints(s00, s01, s02, s03, u), mixCubicHermiteFromPoints(s10, s11, s12, s13, u), mixCubicHermiteFromPoints(s20, s21, s22, s23, u), mixCubicHermiteFromPoints(s30, s31, s32, s33, u), v);\n/**\n * Helper function for {@link mixCubicHermite}. Computes cardinal tangents based\n * on point neighbors of a point B (not given), i.e. `a` (predecessor) and `c`\n * (successor) and their times (defaults to uniformly spaced). The optional\n * `tension` parameter can be used to scale the tangent where 0.0 produces a\n * Cardinal spline tangent and 1.0 a Catmull-Rom (opposite to the Wikipedia\n * ref).\n *\n * https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline\n *\n * @param prev -\n * @param next -\n * @param scale -\n * @param ta -\n * @param tc -\n */\nexport const tangentCardinal = (prev, next, scale = 0.5, ta = 0, tc = 2) => scale * ((next - prev) / (tc - ta));\n/**\n * Helper function for {@link mixCubicHermite}. Computes tangent for `curr`,\n * based on 3-point finite difference, where `prev` & `next` are `curr`'s\n * neighbors and the `tX` the three points' respective time values. The latter\n * are equally spaced by default (each 1.0 apart).\n *\n * Using this function with equal spacing of 1.0 and together with\n * {@link mixCubicHermite} will produce same results as the somewhat optimized\n * variant {@link mixHermite}.\n *\n * https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Finite_difference\n *\n * @param prev -\n * @param curr -\n * @param next -\n * @param ta -\n * @param tb -\n * @param tc -\n */\nexport const tangentDiff3 = (prev, curr, next, ta = 0, tb = 1, tc = 2) => 0.5 * ((next - curr) / (tc - tb) + (curr - prev) / (tb - ta));\n/**\n * HOF interpolator. Takes a timing function `f` and interval `[from,to]`.\n * Returns function which takes normalized time (in [0,1] range) as single arg\n * and returns interpolated value.\n *\n * @param f -\n * @param from -\n * @param to -\n */\nexport const tween = (f, from, to) => (t) => mix(from, to, f(t));\n/**\n * Circular interpolation (ease out): `sqrt(1 - (1 - t)^2)`\n *\n * @remarks\n * Reference: https://www.desmos.com/calculator/tisoiazdrw\n *\n * @param t - interpolation factor [0..1]\n */\nexport const circular = (t) => {\n    t = 1 - t;\n    return Math.sqrt(1 - t * t);\n};\n/**\n * Inverse/flipped version of {@link circular} (ease in).\n *\n * @remarks\n * Reference: https://www.desmos.com/calculator/tisoiazdrw\n *\n * @param t - interpolation factor [0..1]\n */\nexport const invCircular = (t) => 1 - circular(1 - t);\n/**\n * Zoomlens interpolation with customizable lens position, behavior and\n * strength.\n *\n * @remarks\n * Lens position must be given in (0..1) interval. Lens strength must be in\n * [-1,1] range. If negative, the lens will be bundling values near `pos`, if\n * positive the lens has dilating characteristics and will spread values near\n * `pos` towards the edges.\n *\n * Also see {@link schlick} for an alternative approach.\n *\n * @example\n * ```ts\n * // interpolated position in [100..400] interval for given `t`\n * y = mix(100, 400, lens(0.5, 1, t));\n *\n * // or build tween function via `tween()`\n * f = tween(partial(lens, 0.5, 1), 100, 400);\n *\n * f(t)\n * ```\n *\n * @param pos - lens pos\n * @param strength - lens strength\n * @param t - interpolation factor [0..1]\n */\nexport const lens = (pos, strength, t) => {\n    const impl = strength > 0 ? invCircular : circular;\n    const tp = 1 - pos;\n    const tl = t <= pos ? impl(t / pos) * pos : 1 - impl((1 - t) / tp) * tp;\n    return mix(t, tl, Math.abs(strength));\n};\nexport const cosine = (t) => 1 - (Math.cos(t * PI) * 0.5 + 0.5);\nexport const decimated = (n, t) => Math.floor(t * n) / n;\nexport const bounce = (k, amp, t) => {\n    const tk = t * k;\n    return 1 - ((amp * Math.sin(tk)) / tk) * Math.cos(t * HALF_PI);\n};\n/**\n * Exponential easing.\n *\n * - `ease = 1` -> linear\n * - `ease > 1` -> ease in\n * - `ease < 1` -> ease out\n *\n * @param ease - easing behavior [0.0 .. ∞]\n * @param t -\n */\nexport const ease = (ease, t) => Math.pow(t, ease);\n/**\n * Impulse generator. Peaks at `t = 1/k`\n *\n * @param k - impulse width (higher values => shorter impulse)\n */\nexport const impulse = (k, t) => {\n    const h = k * t;\n    return h * Math.exp(1 - h);\n};\nexport const gain = (k, t) => t < 0.5 ? 0.5 * Math.pow(2 * t, k) : 1 - 0.5 * Math.pow(2 - 2 * t, k);\nexport const parabola = (k, t) => Math.pow(4.0 * t * (1.0 - t), k);\nexport const cubicPulse = (w, c, t) => {\n    t = Math.abs(t - c);\n    return t > w ? 0 : ((t /= w), 1 - t * t * (3 - 2 * t));\n};\n/**\n * Unnormalized Sinc function: sin(x)/x. Returns 1 for t=0.\n *\n * @remarks\n * https://en.wikipedia.org/wiki/Sinc_function\n *\n * @param k -\n * @param t -\n */\nexport const sinc = (t) => (t !== 0 ? Math.sin(t) / t : 1);\n/**\n * Normalized Sinc function, returns sinc(π*k*t).\n *\n * @remarks\n * https://en.wikipedia.org/wiki/Sinc_function\n *\n * @see {@link sinc}\n *\n * @param k -\n * @param t -\n */\nexport const sincNormalized = (k, t) => sinc(PI * k * t);\n/**\n * Lanczos filter. Returns `sinc(πt)sinc(πt/a)` iff `t` in (-a,a) interval, else\n * returns 0.\n *\n * @remarks\n * Interactive graph: https://www.desmos.com/calculator/pmypqgefle\n *\n * @param a -\n * @param t -\n */\nexport const lanczos = (a, t) => t !== 0 ? (-a < t && t < a ? sinc(PI * t) * sinc((PI * t) / a) : 0) : 1;\n/**\n * Sigmoid function for inputs arounds center bias.\n *\n * @remarks\n * Updated in v3.0.0 to add bias value to satisfy more use cases. Use\n * {@link sigmoid01} for old behavior.\n *\n * @param bias - center value (for which result = 0.5)\n * @param k - steepness\n * @param t - input value\n */\nexport const sigmoid = (bias, k, t) => t != bias ? 1 / (1 + Math.exp(-k * (t - bias))) : 0.5;\n/**\n * Sigmoid function for inputs in [0..1] interval. Center bias = 0.5.\n *\n * @param k - steepness\n * @param t - input value\n */\nexport const sigmoid01 = (k, t) => sigmoid(0.5, k, t);\n/**\n * Sigmoid function for inputs in [-1..+1] interval. Center bias = 0\n *\n * @param k -\n * @param t -\n */\nexport const sigmoid11 = (k, t) => sigmoid(0, k, t);\n/**\n * Generalized Schlick bias gain curve, based on:\n * https://arxiv.org/abs/2010.09714\n *\n * @remarks\n * Interactive graph:\n * https://www.desmos.com/calculator/u6bkm5rb7t\n *\n * @param a - curve strength. recommended (0..64]\n * @param b - pivot position [0..1]\n * @param t - input val [0..1]\n */\nexport const schlick = (a, b, t) => t <= b\n    ? (b * t) / (t + a * (b - t) + EPS)\n    : ((1 - b) * (t - 1)) / (1 - t - a * (b - t) + EPS) + 1;\n/**\n * Computes exponential factor to interpolate from `a` to `b` over\n * `num` steps. I.e. multiplying `a` with the returned factor will yield\n * `b` after `num` steps. All args must be > 0.\n *\n * @param a -\n * @param b -\n * @param num -\n */\nexport const expFactor = (a, b, num) => (b / a) ** (1 / num);\n/**\n * Computes gaussian bell curve for given center `bias` and `sigma` (spread).\n *\n * @remarks\n * Interactive graph: https://www.desmos.com/calculator/aq6hdzxprv\n *\n * @param bias -\n * @param sigma -\n * @param t -\n */\nexport const gaussian = (bias, sigma, t) => Math.exp(-((t - bias) ** 2) / (2 * sigma * sigma));\n","import { defOpS } from \"./compile/emit.js\";\nimport { ARGS_VNV, MATH2A_N, SARGS_VV } from \"./compile/templates.js\";\nexport const [maddNS, maddNS2, maddNS3, maddNS4] = defOpS(MATH2A_N(\"*\", \"+\"), ARGS_VNV, SARGS_VV);\n","import { defOpS } from \"./compile/emit.js\";\nimport { NEW_OUT, SARGS_V, SET } from \"./compile/templates.js\";\nexport const [setS, setS2, setS3, setS4] = defOpS(SET, \"o,a\", SARGS_V, \"o,a\", \"o\", NEW_OUT);\n","import { DEG2RAD, HALF_PI, INV_HALF_PI, PI, RAD2DEG, TAU } from \"./api.js\";\n/**\n * Returns vector of `[sin(theta)*n, cos(theta)*n]`.\n *\n * @param theta -\n * @param n -\n */\nexport const sincos = (theta, n = 1) => [\n    Math.sin(theta) * n,\n    Math.cos(theta) * n,\n];\n/**\n * Returns vector of `[cos(theta)*n, sin(theta)*n]`.\n *\n * @param theta -\n * @param n -\n */\nexport const cossin = (theta, n = 1) => [\n    Math.cos(theta) * n,\n    Math.sin(theta) * n,\n];\n/**\n * Projects `theta` into [0 .. 2π] interval.\n *\n * @param theta -\n */\nexport const absTheta = (theta) => ((theta %= TAU), theta < 0 ? TAU + theta : theta);\nexport const absInnerAngle = (theta) => ((theta = Math.abs(theta)), theta > PI ? TAU - theta : theta);\n/**\n * Returns smallest absolute angle difference between `a` and `b`.\n * Result will be in [0 .. π] interval.\n *\n * @param a -\n * @param b -\n */\nexport const angleDist = (a, b) => absInnerAngle(absTheta((b % TAU) - (a % TAU)));\n/**\n * Like `Math.atan2`, but always returns angle in [0 .. TAU) interval.\n *\n * @param y -\n * @param x -\n */\nexport const atan2Abs = (y, x) => absTheta(Math.atan2(y, x));\n/**\n * Returns quadrant ID (0-3) of given angle (in radians).\n *\n * @param theta -\n */\nexport const quadrant = (theta) => (absTheta(theta) * INV_HALF_PI) | 0;\n/**\n * Converts angle to degrees.\n *\n * @param theta - angle in radians\n */\nexport const deg = (theta) => theta * RAD2DEG;\n/**\n * Converts angle to radians.\n *\n * @param theta - angle in degrees\n */\nexport const rad = (theta) => theta * DEG2RAD;\n/**\n * Cosecant. Approaches `±Infinity` for `theta` near multiples of π.\n *\n * @param theta - angle in radians\n */\nexport const csc = (theta) => 1 / Math.sin(theta);\n/**\n * Secant. Approaches `±Infinity` for `theta` near π/2 ± nπ\n *\n * @param theta - angle in radians\n */\nexport const sec = (theta) => 1 / Math.cos(theta);\n/**\n * Cotangent. Approaches `±Infinity` for `theta` near multiples of π.\n *\n * @param theta - angle in radians\n */\nexport const cot = (theta) => 1 / Math.tan(theta);\n/**\n * Law of Cosines. Takes length of two sides of a triangle and the inner\n * angle (in radians) between them. Returns length of third side.\n *\n * @param a -\n * @param b -\n * @param gamma -\n */\nexport const loc = (a, b, gamma) => Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(gamma));\n/**\n * Approximates cos(xπ) for x in [-1,1]\n *\n * @param x -\n */\nexport const normCos = (x) => {\n    const x2 = x * x;\n    return 1.0 + x2 * (-4 + 2 * x2);\n};\nconst __fastCos = (x) => {\n    const x2 = x * x;\n    return 0.99940307 + x2 * (-0.49558072 + 0.03679168 * x2);\n};\n/**\n * Fast cosine approximation using {@link normCos} (polynomial). Max. error\n * ~0.00059693\n *\n * In [0 .. 2π] interval, approx. 18-20% faster than `Math.cos` on V8.\n *\n * @param theta - in radians\n */\nexport const fastCos = (theta) => {\n    theta %= TAU;\n    theta < 0 && (theta = -theta);\n    switch ((theta * INV_HALF_PI) | 0) {\n        case 0:\n            return __fastCos(theta);\n        case 1:\n            return -__fastCos(PI - theta);\n        case 2:\n            return -__fastCos(theta - PI);\n        default:\n            return __fastCos(TAU - theta);\n    }\n};\n/**\n * {@link fastCos}\n *\n * @param theta - in radians\n */\nexport const fastSin = (theta) => fastCos(HALF_PI - theta);\n","const mi = -Infinity;\nconst mx = Infinity;\nexport const MIN2 = Object.freeze([mi, mi]);\nexport const MAX2 = Object.freeze([mx, mx]);\nexport const ONE2 = Object.freeze([1, 1]);\nexport const ZERO2 = Object.freeze([0, 0]);\nexport const X2 = Object.freeze([1, 0]);\nexport const Y2 = Object.freeze([0, 1]);\nexport const MIN3 = Object.freeze([mi, mi, mi]);\nexport const MAX3 = Object.freeze([mx, mx, mx]);\nexport const ONE3 = Object.freeze([1, 1, 1]);\nexport const ZERO3 = Object.freeze([0, 0, 0]);\nexport const X3 = Object.freeze([1, 0, 0]);\nexport const Y3 = Object.freeze([0, 1, 0]);\nexport const Z3 = Object.freeze([0, 0, 1]);\nexport const MIN4 = Object.freeze([mi, mi, mi, mi]);\nexport const MAX4 = Object.freeze([mx, mx, mx, mx]);\nexport const ONE4 = Object.freeze([1, 1, 1, 1]);\nexport const ZERO4 = Object.freeze([0, 0, 0, 0]);\nexport const X4 = Object.freeze([1, 0, 0, 0]);\nexport const Y4 = Object.freeze([0, 1, 0, 0]);\nexport const Z4 = Object.freeze([0, 0, 1, 0]);\nexport const W4 = Object.freeze([0, 0, 0, 1]);\n","import { cossin } from \"@thi.ng/math/angle\";\nimport { add2 } from \"./add.js\";\nimport { ZERO2, ZERO3 } from \"./api.js\";\nimport { setC3 } from \"./setc.js\";\nimport { vop } from \"./vop.js\";\nconst cos = Math.cos;\nconst sin = Math.sin;\n/**\n * Converts polar vector `v` to cartesian coordinates and adds optional\n * `offset`. See {@link polar} for reverse operation. If `out` is null,\n * modifies `v` in place.\n *\n * @param out -\n * @param v -\n * @param offset -\n */\nexport const cartesian = vop(1);\n/**\n * Converts 2D polar vector `v` to cartesian coordinates and adds\n * optional `offset`. See {@link polar} for reverse operation. If `out` is\n * null, modifies `v` in place.\n *\n * @param out -\n * @param v -\n * @param offset -\n */\nexport const cartesian2 = cartesian.add(2, (out, a, b = ZERO2) => add2(out || a, cossin(a[1], a[0]), b));\n/**\n * Converts 3D polar vector `v` to cartesian coordinates and adds\n * optional `offset`. See {@link polar} for reverse operation. If `out` is\n * null, modifies `v` in place.\n *\n * @param out -\n * @param v -\n * @param offset -\n */\nexport const cartesian3 = cartesian.add(3, (out, a, b = ZERO3) => {\n    const r = a[0];\n    const theta = a[1];\n    const phi = a[2];\n    const ct = cos(theta);\n    return setC3(out || a, r * ct * cos(phi) + b[0], r * ct * sin(phi) + b[1], r * sin(theta) + b[2]);\n});\n","import { setC2 } from '@thi.ng/vectors/setc';\n\nconst { sin, cos } = Math;\n\nexport const axis2 = (a, to = []) => setC2(to, cos(a), sin(a));\n\nexport default axis2;\n","import { mix } from '@thi.ng/math/mix';\nimport { maddNS2 } from '@thi.ng/vectors/maddns';\nimport { setS } from '@thi.ng/vectors/sets';\nimport { cartesian3 } from '@thi.ng/vectors/cartesian';\n\nimport { axis2 } from './axis2';\n\nconst { random, min, PI: pi, TAU: tau = pi*2 } = Math;\n\n/**\n * Shake a point around while idling; a wandering polar arc along the surface of\n * a sphere around the given position.\n *\n * @param {number[]} at The original given position.\n * @param {object} state The shake state.\n * @param {number[]} state.to The shaken output position.\n * @param {number[]} state.pole The `pole` axis from `at` to the surface; polar.\n * @param {number} state.radius How far from `at` the `pole` extends.\n * @param {number} state.turn The angle the sphere polar angles are turned by.\n * @param {number} state.yaw The angular speed that the `turn` can yaw by.\n * @param {number} state.spin The angular speed to `turn` the `pole` axis by.\n * @param {number} state.wait How long to idle before reaching `radius`.\n * @param {number} state.curve A power to curve the idling to reach `radius`.\n * @param {number} idle How long has been spent idling.\n * @param {number} dt The time elapsed since the last frame.\n *\n * @returns {number[]} The position shaken `to`, or the given `at` if it'd be\n *   the same.\n */\nexport function shake(at, state, idle, dt) {\n  const {\n      radius, yaw, spin, turn, wait: w, curve = 5,\n      to = state.to = [], pole = state.pole = [0, random()*tau, random()*tau]\n    } = state;\n\n  if(!(pole[0] = w && idle && (min(idle/w, 1)**curve)*radius)) { return at; }\n\n  const t = state.turn = ((turn == null)? random()*tau\n    : (turn+(yaw && dt && mix(-pi, pi, random())*yaw*dt)%tau));\n\n  /** Scale `turn` direction by `spin` angular speed to add to `pole` angles. */\n  spin && dt && maddNS2(pole, axis2(t, to), spin*tau*dt, pole, 1, 0, 1);\n  cartesian3(to, pole, at);\n\n  const atl = at.length;\n\n  /** Just copy over any other values following the first position values. */\n  return (((to.length = atl) > 3)? setS(to, at, atl-3, 3, 3) : to);\n}\n\nexport default shake;\n","/** Demo implementation of 3D particle Verlet/Euler integration simulation. */\n\nimport getRegl from 'regl';\nimport { clamp } from '@thi.ng/math/interval';\nimport { fit, fitClamped } from '@thi.ng/math/fit';\nimport { identity44 } from '@thi.ng/matrices/identity';\nimport { rotationAroundAxis44 } from '@thi.ng/matrices/rotation-around-axis';\nimport { perspective } from '@thi.ng/matrices/perspective';\nimport { lookAt } from '@thi.ng/matrices/lookat';\nimport { concat } from '@thi.ng/matrices/concat';\nimport { mulM44 } from '@thi.ng/matrices/mulm';\nimport { mulV344 } from '@thi.ng/matrices/mulv';\nimport { invert44 } from '@thi.ng/matrices/invert';\nimport { mulN2 } from '@thi.ng/vectors/muln';\nimport { div2 } from '@thi.ng/vectors/div';\nimport { divN2 } from '@thi.ng/vectors/divn';\nimport { sub3 } from '@thi.ng/vectors/sub';\nimport { add3 } from '@thi.ng/vectors/add';\nimport { invert2 } from '@thi.ng/vectors/invert';\nimport { setC2, setC3 } from '@thi.ng/vectors/setc';\nimport { dist3 } from '@thi.ng/vectors/dist';\nimport { normalize3 } from '@thi.ng/vectors/normalize';\nimport { CGS } from 'gsl-const';\nimport timer from '@epok.tech/fn-time';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport each from '@epok.tech/fn-lists/each';\nimport range from '@epok.tech/fn-lists/range';\nimport wrap from '@epok.tech/fn-lists/wrap';\n\nimport gpgpu from '../../src';\n\nimport { extensionsFloat, extensionsHalfFloat, optionalExtensions }\n  from '../../src/const';\n\nimport { macroPass } from '../../src/macros';\nimport { mapStep } from '../../src/maps';\nimport { toUniforms } from '../../src/uniforms';\nimport { getDrawIndexes } from '../../src/size';\nimport indexForms from '../../src/index-forms';\n\nimport stepFrag from './step.frag.glsl';\nimport drawVert from './draw.vert.glsl';\nimport drawFrag from './draw.frag.glsl';\n\nimport { shake } from './shake';\n\nconst { GRAVITATIONAL_CONSTANT: ugc, GRAV_ACCEL: g } = CGS;\nconst { abs, floor, random, sin, cos, min, max, sqrt, log2, PI: pi } = Math;\nconst tau = pi*2;\n\nself.gpgpu = gpgpu;\nself.macroPass = macroPass;\nself.mapStep = mapStep;\nself.toUniforms = toUniforms;\nself.getDrawIndexes = getDrawIndexes;\nself.indexForms = indexForms;\n\nconst canvas = document.querySelector('canvas');\n\n// Scroll to the top.\nconst scroll = () => canvas.scrollIntoView(true);\nconst scrollDefer = () => setTimeout(scroll, 0);\n\nfunction toggleError(e) {\n  canvas.classList[(e)? 'add' : 'remove']('hide');\n  document.querySelector('.error').classList[(e)? 'remove' : 'add']('hide');\n  document.querySelector('aside').classList[(e)? 'add' : 'remove']('show');\n}\n\ntoggleError();\nscrollDefer();\n\n// Handle query parameters.\n\nconst getQuery = (search = location.search) => new URLSearchParams(search);\n\nfunction setQuery(entries, q = getQuery()) {\n  entries &&\n    each(([k, v = null]) => ((v === null)? q.delete(k) : q.set(k, v)), entries);\n\n  return q;\n}\n\nconst query = getQuery();\n\n// Check for any extensions that need to be applied.\nconst fragDepth = query.get('depth') === 'frag';\n\n// Set up GL.\n\nconst extend = {\n  required: extensionsHalfFloat,\n  optional: ((fragDepth)?\n      [...extensionsFloat, ...optionalExtensions, 'ext_frag_depth']\n    : [...extensionsFloat, ...optionalExtensions])\n};\n\nconst pixelRatio = max(devicePixelRatio, 1.5) || 1.5;\n\nconst regl = self.regl = getRegl({\n  canvas, pixelRatio,\n  extensions: extend.required, optionalExtensions: extend.optional,\n  onDone: toggleError\n});\n\nconsole.group('Extensions');\n\nconsole.log('required',\n  (extend.required &&\n    reduce((o, e) => o+(o && '; ')+e+': '+regl.hasExtension(e),\n      extend.required, '')));\n\nconsole.log('optional',\n  (extend.optional &&\n    reduce((o, e) => o+(o && '; ')+e+': '+regl.hasExtension(e),\n      extend.optional, '')));\n\nconsole.groupEnd();\n\n/**\n * How many state values (channels) are tracked independently of others.\n * The order here is the order used in the shaders and generated macros, but for\n * optimal lookups may be `packed` into channels/textures/passes differently.\n */\nconst valuesMap = (new Map())\n  // Position, uses 3 channels.\n  .set('position', 3)\n  // Motion, uses 3 channels.\n  .set('motion', 3)\n  // Life, uses 2 channels.\n  .set('life', 2);\n\nconst values = [];\nconst valuesIndex = {};\n\nvaluesMap.forEach((v, k) => valuesIndex[k] = values.push(v)-1);\nconsole.log(values, '`values`');\n\n/** Limits of this device and these `values`. */\nconst {\n    maxTextureUnits, maxTextureSize, lineWidthDims, pointSizeDims, depthBits\n  } = regl.limits;\n\n/**\n * Whether to merge states into one texture; separate textures if not given.\n * Merge by default for maximum platform compatibility.\n */\nconst merge = query.get('merge') !== 'false';\n\n/**\n * Better stay farther under maximum texture size, for errors/crashes.\n *\n * @todo Drawing issues with `scale` and `steps` both over 10.\n */\nconst limits = { scale: [0, log2(maxTextureSize)] };\n\n/** A scale that seems to work well from experimentation with `GL` limits. */\nconst niceScale = clamp(8, ...limits.scale);\n\n/** The data entries scale, from user input or default best-guess. */\nconst scale = clamp((parseFloat(query.get('scale') || niceScale, 10) || 0),\n  ...limits.scale);\n\n/** How many steps are used for output. */\nconst bound = 1;\n\n/** The steps of state to track. */\nlimits.steps = [\n  1+bound,\n  // Maximum steps must fit the maximum total texture size if merging.\n  floor((merge)? maxTextureSize/(2**scale)\n    // Maximum steps must fit the maximum total texture units if separate.\n    : (maxTextureUnits-bound)/reduce((s, v) => s+v, values)*4)\n];\n\nconsole.log('limits', limits, regl.limits);\n\n/**\n * 2 active states, as many others as can be bound; at least 2 past states\n * needed for Verlet integration, 1 for Euler integration.\n */\nconst steps = floor(clamp(parseFloat(query.get('steps'), 10) || 2+bound,\n  ...limits.steps));\n\n/** How many past steps (not bound to outputs) are in the GPGPU state. */\nconst stepsPast = steps-bound;\n/** Whether to allow Verlet integration; within available resource limits. */\nconst canVerlet = stepsPast > 1;\n\n/** Whether to prefill initial states before spawning, or start with all `0`. */\nconst prefill = query.get('prefill') !== 'false';\n\n/**\n * Form vertexes to draw; if not given, uses trails of 'lines' if there are\n * enough steps, or 'points' if not.\n */\nconst form = floor(parseFloat(query.get('form'), 10) || 0);\n\n/** How wide the `form` is; to be scaled by `viewScale`. */\nconst wide = parseFloat(query.get('wide') || 1e-3*pixelRatio, 10) || 0;\n\n/** The amount to spin the scene initially. */\nconst spin0 = parseFloat(query.get('spin-0') || 1e-2*pi, 10) || 0;\n/** The pace to spin the scene each frame. */\nconst spinPace = parseFloat(query.get('spin-pace') || 5e-5, 10) || 0;\n\n/** How much to scale the spout speeds. */\nconst spoutPace = parseFloat(query.get('spout-pace') || 1, 10) || 0;\n/** Offset on the z-axis from the origin to the source. */\nconst gapZ = parseFloat(query.get('gap-z') || 0.15, 10) || 0;\n/** How much to shake the source around while idling. */\nconst shakeSource = parseFloat(query.get('shake-source') || 2e-2, 10) || 0;\n/** How much to shake the sink around while idling. */\nconst shakeSink = parseFloat(query.get('shake-sink') || 2e-2, 10) || 0;\n\n/** How many older state positions to fizz around, and other inputs. */\nconst fizz = {\n  at: parseFloat(query.get('fizz') || clamp(steps, 5, 2e2), 10) || 0,\n  max: parseFloat(query.get('fizz-max') || fitClamped(steps, 5, 20, 2e-3, 4e-3),\n    10) || 0,\n  rate: parseFloat(query.get('fizz-rate') || 5e-4, 10) || 0,\n  curve: parseFloat(query.get('fizz-curve') || 1.7, 10) || 0\n};\n\n/** Hue range between 2 values. */\nconst hues = query.getAll('hue');\n\n// Parse any present hues, fill any missing hues, using only up to 2 hues.\nmap((h, i) => parseFloat(h || ((i)? hues[i-1]+(60/360) : 0), 10) || 0,\n  range(hues, null, hues.length, hues.length = 2), 0);\n\n/** Use lights, dark, or unlit. */\nconst lit = query.get('lit');\n/** How much particle speed lights them up. */\nconst paceLit = parseFloat(query.get('pace-lit') || 1, 10) || 0;\n\n/** The material's roughness. */\nconst rough = parseFloat(query.get('rough') || 0.7, 10) || 0;\n/** The material's albedo. */\nconst albedo = parseFloat(query.get('albedo') || 0.9, 10) || 0;\n/** The material's skin thickness. */\nconst skin = parseFloat(query.get('skin') || 1, 10) || 0;\n\n/**\n * Variable-step (delta-time) if given `false`y/`NaN`; fixed-step (add-step)\n * if given another number; uses default fixed-step if not given.\n */\nconst timeQuery = query.get('timestep');\n\nconst timestepDef = 1e3/60;\n/** Whether to use a fixed timestep or render variably as soon as possible. */\nconst timestep = parseFloat(timeQuery ?? timestepDef, 10) || null;\n/** Whether to primarily control the source or sink */\nconst flipPointer = query.get('flip-pointer') === 'true';\n/** Whether the guide is open by default. */\nconst guide = query.get('guide') !== 'false';\n\nconsole.log(location.search+':\\n', ...([...query.entries()].flat()), '\\n',\n  'merge:', merge, 'scale:', scale, 'steps:', steps, 'prefill:', prefill,\n  'timestep:', timestep, 'depth:', fragDepth, 'form:', form, 'wide:', wide,\n  'spin0:', spin0, 'spinPace:', spinPace, 'spoutPace:', spoutPace,\n  'gapZ:', gapZ, 'shakeSource:', shakeSource, 'shakeSink:', shakeSink,\n  'flipPointer:', flipPointer, 'fizz:', fizz, 'hues:', hues, 'lit:', lit,\n  'paceLit:', paceLit, 'rough:', rough, 'albedo:', albedo, 'skin:', skin,\n  'guide:', guide);\n\n// Set up the links.\n\nfunction setupLink(a, to) {\n  const { search, hash } = a;\n  const has = (search.length > 1) && getQuery(search).entries();\n\n  return a.href = '?'+\n    setQuery((has && to)? [...has, ...to] : ((has)? [...has] : to))+hash;\n}\n\nsetupLink(document.querySelector('#verlet'),\n  [['steps', 2+bound], ['scale', 9]]);\n\nsetupLink(document.querySelector('#euler'), [['steps', 1+bound], ['scale', 9]]);\nsetupLink(document.querySelector('#trail'), [['steps', 9+bound], ['scale', 8]]);\nsetupLink(document.querySelector('#trace'), [['steps', 3e2], ['scale', 4]]);\nsetupLink(document.querySelector('#bubbles'));\nsetupLink(document.querySelector('#molecular'));\nsetupLink(document.querySelector('#millions'));\n\nsetupLink(document.querySelector('#form'),\n  [['form', ((form)? ((form+1)%3 || null) : 1)]]);\n\nsetupLink(document.querySelector('#lit'),\n  [['lit', ((lit === 'dark')? false : ((lit === 'false')? null : 'dark'))]]);\n\nsetupLink(document.querySelector('#spin'),\n  [['spin-pace', ((spinPace)? 0 : null)]]);\n\nsetupLink(document.querySelector('#gap'), [['gap-z', ((gapZ)? 0 : null)]]);\n\nsetupLink(document.querySelector('#timestep'),\n  [['timestep', ((timeQuery == null)? '' : null)]]);\n\nsetupLink(document.querySelector('#merge'),\n  [['merge', ((merge)? false : null)]]);\n\nsetupLink(document.querySelector('#guide'),\n  [['guide', ((guide)? false : null)]]);\n\n/** Scroll back if links are clicked or change hash; just want highlights. */\nfunction hashScroll() {\n  const h = location.hash;\n\n  if(!document.querySelector(`.link-preset${h}, .link-tweak${h}`)) { return; }\n\n  scroll();\n  scrollDefer();\n}\n\neach((l) => l.addEventListener('click', hashScroll),\n  document.querySelectorAll('.link-preset, .link-tweak'));\n\naddEventListener('hashchange', hashScroll);\n\n// Toggle the guide according to query.\ndocument.querySelector('#flip-guide').checked = guide;\n\n// Set up state flow - read and write the `gl-gpgpu` state each step.\n\n/** Map how any next output `values` derive from any past input `values`. */\nconst derives = [];\n\n// Next `position` state `values` derive from past state `values`:\nderives[valuesIndex.position] = [\n  // `position`, 2nd `step` past.\n  { value: valuesIndex.position, step: wrap(1, stepsPast) },\n  // `position`, 1st `step` past.\n  valuesIndex.position,\n  // `motion`, 1st `step` past.\n  valuesIndex.motion,\n  // `life`, 1st `step` past.\n  valuesIndex.life\n];\n\n// Next `motion` state `values` derive from past state `values`:\nderives[valuesIndex.motion] = [\n  // `motion`, 1st `step` past.\n  valuesIndex.motion,\n  // `life`, 1st `step` past.\n  valuesIndex.life,\n  // `position`, 1st `step` past.\n  valuesIndex.position\n];\n\n// Next `life` state `values` derive from past state `values`:\nderives[valuesIndex.life] = [\n  // `life`, farthest `step` past.\n  { value: valuesIndex.life, step: wrap(-1, stepsPast) },\n  // `life`, 1st `step` past.\n  valuesIndex.life\n];\n\nconsole.log(derives, '`derives`');\n\n/** Shake around a position, via the `state.props`. */\nconst toShake = (k) => (_, { props: { [k]: s, timer: { idle, dt } } }) => {\n  const { to, at, shake: state } = s;\n\n  return shake(to ?? at, state, idle, dt);\n};\n\n/** The main `gl-gpgpu` state. */\nconst state = gpgpu(regl, {\n  // Logic given as state `values`, `gl-gpgpu` maps optimal inputs and outputs.\n  maps: {\n    // How many state `values` (channels) are tracked independently of others.\n    values,\n    // Map how next output `values` derive from any past input `values`.\n    derives\n  },\n  // How many steps of state to track.\n  steps,\n  // How many states are bound to frame-buffer outputs at any step.\n  bound,\n  // How many `entries` to track, here encoded as the power-of-2 size, per side\n  // of each data-`texture`: `(2**scale)**2`; can also be given in other ways.\n  scale,\n  // Whether to merge all states into one data-`texture`, or leave all\n  // data-`texture`s separate.\n  merge,\n  // Data type according to platform capabilities.\n  // @todo Seems to move differently with `'half float'` Verlet integration.\n  type: ((extensionsFloat.every(regl.hasExtension))? 'float' : 'half float'),\n  // Configure macro hooks, globally or per-shader.\n  macros: {\n    // No `macros` needed for the `vert` shader; all other `macros` generated.\n    vert: false\n  },\n  // A fragment shader to compute each state step, with `gl-gpgpu` macros.\n  // Vertex shaders can also be given.\n  frag: ((prefill)? '#define prefill\\n\\n' : '')+stepFrag,\n  // Cache in `frags` all `macros` prepended to `frag` shader per-pass.\n  frags: [],\n  // Custom `uniforms` to be passed to shaders, with those `gl-gpgpu` mixes in.\n  uniforms: {\n    dt: (_, { props: { timer: { dt, rate: r } } }) => dt*r,\n    dt0: (_, { props: { timer: { dts, rate: r } } }) => dts[0]*r,\n    dt1: (_, { props: { timer: { dts, rate: r } } }) => dts[1]*r,\n    time: (_, { props: { timer: { time: t, rate: r } } }) => t*r,\n    loop: (_, { props: { timer: { time: t, rate: r, loop: l } } }) =>\n      abs((((t*r)+l)%(l*2))-l),\n\n    // Shake the source around while idling.\n    source: toShake('source'),\n    // Shake the sink around while idling.\n    sink: toShake('sink'),\n\n    lifetime: regl.prop('props.lifetime'),\n    useVerlet: regl.prop('props.useVerlet'),\n    epsilon: regl.prop('props.epsilon'),\n    moveCap: regl.prop('props.moveCap'),\n    g: regl.prop('props.g'),\n    pace: regl.prop('props.pace'),\n\n    // One option in these arrays is used, by Euler/Verlet respectively.\n    spout: (_, { props: { spout: ss, useVerlet: u } }) => ss[+u],\n  },\n  // Custom properties, namespaced to avoid clashing with `gl-gpgpu` ones.\n  props: {\n    // Time control and state.\n    timer: timer({\n      // Fixed-step (add-step), or real-time (variable delta-time).\n      step: timestep || '-',\n      now: ((timestep)? undefined : () => regl.now()*1e3),\n      // Track past 2 time-differences for Verlet integration.\n      dts: range(2, 0),\n      // Amount of time without applicable user-interaction.\n      idle: 0,\n      // Speed up or slow down the passage of time.\n      rate: 1,\n      // Loop time over this period to avoid instability using unbounded `time`.\n      loop: 1e6\n    }),\n    // A particle's lifetime range, and whether it's allowed to spawn.\n    lifetime: [6e2, 6e3, +true],\n    // Whether to use Verlet (midpoint) or Euler (forward) integration.\n    useVerlet: +canVerlet,\n    // A small number greater than 0; avoids speeds exploding.\n    epsilon: 1e-5,\n    // How far a particle can move in any frame.\n    moveCap: 7e-3,\n    // Whether to primarily control the source or sink.\n    flipPointer,\n    // The position around which particles spawn.\n    source: {\n      // The initial source, may be transformed into a new property `to`.\n      at: [0, 0, gapZ],\n      // If shaken around while idling, transform `to` or `at` into `shaken`.\n      shake: { radius: shakeSource, yaw: 1e-2, spin: 3e-4, wait: 7e3 }\n    },\n    // Sink position, and universal gravitational constant.\n    sink: {\n      // The initial sink, may be transformed into a new property `to`.\n      at: [\n        // Sink position.\n        0, 0, 0,\n        // Universal gravitational constant (scaled).\n        ugc*2e7\n      ],\n      // If shaken around while idling, transform `to` or `at` into `shaken`.\n      shake: { radius: shakeSink, yaw: 1e-3, spin: 1e-3, wait: 5e3 }\n    },\n    // Constant acceleration of gravity; and whether to use it or the `sink`.\n    g: [\n      // Constant acceleration of gravity.\n      0, -g*1e-2, 0,\n      // Whether to use it or the `sink`.\n      +false\n    ],\n    // Speed scale. Exponent encoding `[b, p] => b*(10**p)` for numeric accuracy.\n    pace: [1, -8],\n\n    // One option in these arrays is used, by Euler/Verlet respectively.\n\n    // The distance from the `source`, and speed, that particles spawn with.\n    spout: [[0, 3e3*spoutPace], [0, 2e2*spoutPace]],\n  }\n});\n\nconsole.log(self.state = state);\n\nconsole.group('How `values` are `packed` to fit texture channels efficiently');\n\nconsole.log('`values` (numbers of channels used together):',\n  ...state.maps.values);\n\nconsole.log('`packed` (if any, indexes `values`):',\n  ...state.maps.packed);\n\nconsole.log('`textures` (indexes `values`, via any `packed` or directly):',\n  ...state.maps.textures);\n\nconsole.log('`valueToTexture` (indexes `textures` via `value` index):',\n  ...state.maps.valueToTexture);\n\nconsole.groupEnd();\n\nconsole.log('`entries` (total number of states of `values` updated per-step):',\n  state.size.entries);\n\n\n// Set up rendering - reading but not writing the `gl-gpgpu` state each frame.\n// For this demo, done separately, but sharing the same resources.\n\n/**\n * Draw all states with none bound as outputs.\n * @todo Errors without `merge`; why, if the framebuffer isn't bound?\n */\nconst drawBound = +(!merge);\n\nconst drawSteps = steps-drawBound;\nconst useLines = merge && (drawSteps > 1);\n\nconsole.log('drawSteps', drawSteps, 'useLines', useLines);\n\n/**\n * Vertex counts by `form`; how many steps a `form` covers, for all entries;\n * respectively for: none, points, lines.\n * Note `state.size.entries` equals the value returned by `countDrawIndexes`.\n */\nconst drawCounts = map((_, f) => indexForms(drawSteps, f, state.size.entries),\n  range(2+useLines), 0);\n\n/** Use `min` for contain, `max` for cover. */\nconst viewScale = min;\n\n/**\n * @see [glsl-aspect](https://github.com/keeffEoghan/glsl-aspect/blob/master/index.glsl)\n * @see [glsl-aspect/contain](https://github.com/keeffEoghan/glsl-aspect/blob/master/contain.glsl)\n */\nconst aspect = (size, ar) => invert2(ar, divN2(ar, size, viewScale(...size)));\n\n/** Reuse the `gl-gpgpu` state, mix in drawing-specific state. */\nconst drawState = {\n  ...state,\n  // Omit some properties unused in drawing for some clarity.\n  count: undefined, vert: undefined, frag: undefined, attributes: undefined,\n  // Override other properties for drawing.\n  bound: drawBound,\n  // Drawing, not updating data, so no `output` macros; no `frag` needed either.\n  macros: { output: 0, frag: 0 },\n  // Custom properties, namespaced to avoid clashing with `gl-gpgpu` ones etc.\n  drawProps: {\n    // Transformation matrices.\n    model: {\n      matrix: identity44([]), inverse: identity44([]),\n      // Continuous rotation.\n      rotation: identity44([]),\n      axis: [0, 1, 0],\n      angle: (timestep || timestepDef)*spinPace*tau,\n      angle0: spin0*tau\n    },\n    view: {\n      matrix: identity44([]), inverse: identity44([]),\n      // Look from the `eye` at the `target` while oriented `up`.\n      eye: [0, 0, 0.5], target: [0, 0, 0], up: [0, 1, 0],\n      // Ray origin and direction for casting.\n      ray: [[], []]\n    },\n    projection: { matrix: identity44([]), inverse: identity44([]) },\n    // Cached combined transformations.\n    transform: {\n      modelView: { matrix: identity44([]), inverse: identity44([]) },\n      // viewProjection: { matrix: identity44([]), inverse: identity44([]) },\n      modelViewProjection: { matrix: identity44([]), inverse: identity44([]) }\n    },\n    // View dimensions.\n    size: [1, 1],\n    // View aspect ratio scale, per x- and y-axes.\n    aspect: [1, 1],\n    light: {\n      ambient: range(3, ((lit === 'dark')? 0.1 : ((lit === 'false')? 1 : 0.4))),\n      // Point-lights: position (`at` transforms `to`); color, attenuate factor.\n      points: ((lit && (lit.search(/^(dark|false)$/g) === 0))? null : [\n        // A white spherical-light with radius `0.3` - see https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/\n        { at: [0, 1, 0], color: [20, 20, 20], factor: [1, 2/0.3, 0.3**-2] },\n        // A cyan-ish point-light, higher linear attenuation.\n        {\n          at: [cos(0), -1, sin(0)],\n          color: [1, 9, 9], factor: [1, 9, 3]\n        },\n        // A magenta-ish point-light, higher quadratic attenuation.\n        {\n          at: [cos(tau*0.33), -1, sin(tau*0.33)],\n          color: [9, 1, 9], factor: [1, 3, 9]\n        },\n        // A yellow-ish point-light, even attenuation.\n        {\n          at: [cos(tau*0.66), -1, sin(tau*0.66)],\n          color: [9, 9, 1], factor: [1, 5, 5]\n        }\n      ])\n    },\n    // Material roughness, albedo, and skin thickness.\n    material: [rough, albedo, skin],\n    // Scale depths over near and far range, and precision (arbitrarily).\n    depths: [1e-2, 1, 5e-2/depthBits],\n    // Fog start offset, scale, exponent, maximum effect.\n    fog: [-1, 0.4, 1, 0.9],\n    // The clear and fog color.\n    clear: [0, 0, 0, 0],\n    // How many vertexes per form.\n    form: clamp(form || 2, 1, 1+useLines),\n    // Vertex counts, by form; how many steps a form covers, for all entries.\n    counts: drawCounts,\n    // Which primitives can be drawn, by form.\n    primitives: [, 'points', 'lines'],\n    // Which primitive dimensions can be drawn, by form.\n    widths: [, pointSizeDims, lineWidthDims],\n    // How wide the form is; to be scaled by `viewScale`.\n    wide,\n    // How many older state positions to fizz around, and other inputs.\n    fizz,\n    // Hue range to colour particles.\n    hues,\n\n    // One option in these arrays is used, by Euler/Verlet respectively.\n\n    // Speed-to-colour scaling, as `[multiply, power]`.\n    paceColor: [[paceLit*2e-9, 2], [paceLit*2e7, 2]]\n  },\n  // Map everything similarly to the `gl-gpgpu` step, `mapStep` can be reused to\n  // create new mappings with some additions for drawing.\n  maps: mapStep({\n    ...state.maps,\n\n    /**\n     * To ensure drawing happens in one pass, disregard buffers to prevent\n     * multiple passes (as happens in `state.step` to bind all `texture`s across\n     * limited buffer outputs).\n     */\n    buffersMax: null,\n\n    /**\n     * Read all past `values` to derive one value; that is, look up all states\n     * in one draw pass.\n     *\n     * This case creates `macros` of a `reads_${value}_i` list, where `value` is\n     * `0` and each entry in this list gives a `[step, value]` pair, here being\n     * `[0, 0]`, `[0, 1]`, `[0, 2]`, `[1, 0]`.\n     */\n    derives: [\n      // Entries of the first value's `derives` (`derives[0]`) `array` denote\n      // that it derives from:\n      [\n        // All `values` (denoted by `true`), 1st step past.\n        true,\n        // The `position` value, 2nd step past.\n        { value: valuesIndex.position, step: wrap(1, drawSteps) }\n      ]\n    ]\n  })\n};\n\n/** Hook up `gl-gpgpu` uniforms by extending them. */\nconst drawUniforms = toUniforms(drawState, {\n  ...drawState.uniforms,\n\n  modelView: regl.prop('drawProps.transform.modelView.matrix'),\n  projection: regl.prop('drawProps.projection.matrix'),\n  eye: regl.prop('drawProps.view.eye'),\n  aspect: regl.prop('drawProps.aspect'),\n  material: regl.prop('drawProps.material'),\n  depths: regl.prop('drawProps.depths'),\n  fog: regl.prop('drawProps.fog'),\n  clear: regl.prop('drawProps.clear'),\n  // How many vertexes per form.\n  form: regl.prop('drawProps.form'),\n  fizz: regl.prop('drawProps.fizz.at'),\n  fizzMax: regl.prop('drawProps.fizz.max'),\n  fizzRate: regl.prop('drawProps.fizz.rate'),\n  fizzCurve: regl.prop('drawProps.fizz.curve'),\n  hues: regl.prop('drawProps.hues'),\n  lightAmbient: regl.prop('drawProps.light.ambient'),\n\n  paceColor: (_, { drawProps: dp, props: p }) => dp.paceColor[+p.useVerlet],\n\n  wide: (_, { drawProps: { wide: w, widths: ws, form: f, size: s } }) =>\n    clamp(w*viewScale(...s), ...ws[f])\n});\n\n/** Convert point-lights from object-oriented to flat data-oriented. */\nconst lightPoints = drawState.drawProps.light.points;\n\nlightPoints && reduce((o, _, l) => {\n    const n = 'lightPoint';\n    const i = `[${l}]`;\n\n    o[n+'Positions'+i] = (_, p) => {\n      const { light, transform } = p.drawProps;\n      const lp = light.points[l];\n      const { at, to = lp.to = [] } = lp;\n\n      return mulV344(to, transform.modelView.matrix, at);\n    };\n\n    o[n+'Colors'+i] = regl.prop(`drawProps.light.points${i}.color`);\n    o[n+'Factors'+i] = regl.prop(`drawProps.light.points${i}.factor`);\n\n    return o;\n  },\n  lightPoints, drawUniforms);\n\n/** The `GL` render command pipeline state. */\nconst drawPipeline = {\n  // Use `gl-gpgpu` `macro` mappings by prepending `macro`s from a single pass.\n  vert: (_, p) => macroPass(p)+\n    `#define lightPointsL ${p.drawProps.light.points?.length ?? 0}\\n`+drawVert,\n\n  frag: (_, p) =>\n    `#define lightPointsL ${p.drawProps.light.points?.length ?? 0}\\n`+drawFrag,\n\n  // Maximum count here to set up buffers, can be partly used later.\n  attributes: { index: getDrawIndexes(max(...drawCounts)) },\n  uniforms: drawUniforms,\n  lineWidth: (_, { drawProps: { wide: w, size: s } }) =>\n    clamp(w*viewScale(...s), ...lineWidthDims),\n  // Vertex counts by form; how many steps a form covers, for all entries.\n  count: (_, { count: c, drawProps: { counts: cs, form: f } }) => c ?? cs[f],\n  blend: { enable: true, func: { src: 'one', dst: 'one minus src alpha' } },\n\n  primitive: (_, { drawProps: { primitive: p, primitives: ps, form: f } }) =>\n    p ?? ps[f]\n};\n\nconsole.log((self.drawState = drawState), (self.drawPipeline = drawPipeline));\n\n/** Function to execute the render command pipeline state every frame. */\nconst draw = regl(drawPipeline);\nconst clearView = { color: drawState.drawProps.clear, depth: 1 };\n\n/** Rotate the model by an angle; update the matrix and inverse. */\nfunction rotateModel(angle = drawState.drawProps.model.angle) {\n  if(!angle) { return; }\n\n  const { model } = drawState.drawProps;\n  const { rotation: r, axis, matrix: mm, inverse: mi } = model;\n\n  return invert44(mi, mulM44(mm, rotationAroundAxis44(r, axis, angle), mm));\n}\n\n/** Update the view matrix and inverse. */\nfunction updateView() {\n  const { eye, target, up, matrix: vm, inverse: vi } = drawState.drawProps.view;\n\n  return invert44(vi, lookAt(vm, eye, target, up));\n}\n\n/** Update the projection matrix and inverse. */\nfunction updateProjection() {\n  const { depths: [d0, d1], projection: p } = drawState.drawProps;\n  const { matrix: pm, inverse: pi } = p;\n\n  /** Aspect ratio is handled separately, so set to 1 in the projection. */\n  invert44(pi, perspective(pm, 40, 1, d0, d1));\n}\n\n/** Update each needed cached combined transformation matrix and inverse. */\nfunction updateTransform() {\n  const { transform: t, model, view, projection } = drawState.drawProps;\n  const { modelView: tmv, viewProjection: tvp, modelViewProjection: tmvp } = t;\n  const mm = model.matrix;\n  const vm = view.matrix;\n  const pm = projection.matrix;\n\n  tmv && invert44(tmv.inverse, concat(tmv.matrix, vm, mm));\n  tvp && invert44(tvp.inverse, concat(tvp.matrix, pm, vm));\n  tmvp && invert44(tmvp.inverse, concat(tmvp.matrix, pm, vm, mm));\n}\n\n/** Rotate the model to its starting angle. */\nrotateModel(drawState.drawProps.model.angle0);\n/** Initialise the view matrix. */\nupdateView();\n/** Initialise the projection matrix. */\nupdateProjection();\n\nfunction stopEvent(e) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\n/** Pause the spawning while pointer is held down. */\nlet hold;\n\n/** Pause particles spawning. */\ncanvas.addEventListener('contextmenu', (e) => {\n  // Whether a particle's allowed to spawn.\n  state.props.lifetime[2] = +false;\n  hold = false;\n  stopEvent(e);\n});\n\n/** Switch primary pointer control between source and sink. */\ncanvas.addEventListener((('onpointerup' in self)? 'pointerup'\n    : (('ontouchend' in self)? 'touchend' : 'mouseup')),\n  (e) => {\n    /** Unpause the spawning when pointer is released. */\n    const spawned = state.props.lifetime[2];\n    const held = hold;\n\n    // Whether a particle's allowed to spawn.\n    state.props.lifetime[2] = +true;\n    hold = false;\n\n    // Don't switch primary pointer control if pointer was being held down,\n    // particles weren't spawning, or any non-primary button was released.\n    if(held || !spawned || (e.button !== 0)) { return; }\n\n    // Switch primary pointer control if this wasn't press-held.\n    state.props.flipPointer = !state.props.flipPointer;\n    stopEvent(e);\n  });\n\n/** Move either the source or the sink, according to primary pointer. */\ncanvas.addEventListener((('onpointermove' in self)? 'pointermove'\n    : (('ontouchmove' in self)? 'touchmove' : 'mousemove')),\n  (e) => {\n    const { clientX: x, clientY: y, type, pointerType, isPrimary = true } = e;\n    const { top, right, bottom, left } = canvas.getBoundingClientRect();\n    const { source: i, sink: o, flipPointer, timer: t } = state.props;\n    const touch = ((type === 'touchmove') || (pointerType === 'touch'));\n    /** Move source or sink, switch by primary/other pointer/s in `xor` flip. */\n    const pick = ((isPrimary !== flipPointer)? o : i);\n    /** Transform from screen-space to world-space. */\n    const { at, to = pick.to = [] } = pick;\n    const { aspect: ar, transform, model, view } = drawState.drawProps;\n    const { eye, ray: [ro, rv] } = view;\n\n    /** Include any additional data. */\n    map((v) => v, at, to);\n    /** Screen-space pointer as a `ray` target. */\n    setC3(rv, fit(x, left, right, -1, 1), fit(y, top, bottom, 1, -1), 1);\n    /** Aspect ratio scale and un-project the `ray` target. */\n    mulV344(rv, transform.modelViewProjection.inverse, div2(rv, rv, ar));\n    /** Un-transform `eye` as `ray` origin, subtract `ray` target as vector. */\n    sub3(rv, rv, mulV344(ro, model.inverse, eye));\n    /** Cast along `ray` by the initial `eye` to `at` distance, as `to`. */\n    add3(to, ro, normalize3(rv, rv, dist3(eye, at)));\n\n    // For touch devices, don't pause spawn if touch moves while held down.\n    touch && (hold = true);\n    // Reset the idle time for any movement.\n    t.idle = 0;\n    document.body.classList.remove('idle');\n  });\n\n/** Toggle physics and graphics modes. */\ncanvas.addEventListener('dblclick', (e) => {\n  const { props: p, drawProps: d } = drawState;\n  const v = canVerlet && (p.useVerlet = 1-p.useVerlet);\n  const f = form || (d.form = 1+(useLines && ((canVerlet)? v : d.form%2)));\n\n  console.log('useVerlet', v, 'form', f,\n    // See how this derives other properties.\n    'count', drawPipeline.count(0, drawState),\n    'primitive', drawPipeline.primitive(0, drawState));\n});\n\n/** Toggle fullscreen by button. */\ndocument.querySelector('#fullscreen')?.addEventListener?.('click',\n  () => canvas.requestFullscreen());\n\n/** Toggle fullscreen by key-press. */\ndocument.addEventListener('keyup',\n  (e) => (e.key === 'f') && canvas.requestFullscreen());\n\n/** Scroll back up when fallback demo video loads. */\ndocument.querySelector('#fallback')?.addEventListener?.('load', scrollDefer);\n\n/** Resize the canvas and any dependent properties. */\nfunction resize() {\n  const { drawProps } = drawState;\n  const { size, aspect: ar } = drawProps;\n  const [w, h] = mulN2(size, setC2(size, innerWidth, innerHeight), pixelRatio);\n\n  canvas.width = w;\n  canvas.height = h;\n  aspect(size, ar);\n}\n\naddEventListener('resize', resize);\nresize();\n\nfunction stepTime(to) {\n  const { dt, dts } = timer(to);\n\n  dts[0] = dts[1];\n  to.idle += (dts[1] = dt);\n\n  return to;\n}\n\n/** Compute the next step of state for a frame. */\nfunction frameStep() {\n  try {\n    stepTime(state.props.timer);\n    state.step();\n  }\n  catch(e) { toggleError(e); }\n}\n\n// Whether to prefill initial states before spawning, or start with all `0`.\nfor(let p = prefill && stepsPast; p; --p) { frameStep(); }\n\nregl.frame(() => {\n  try {\n    frameStep();\n    // Update the draw state.\n    drawState.stepNow = (state.stepNow+1)-drawBound;\n    // Rotate the scene each frame.\n    rotateModel();\n    // Update the transformation matrices.\n    updateTransform();\n    // Clear and draw.\n    regl.clear(clearView);\n    draw(drawState);\n    // Update idle view.\n    (state.props.timer.idle > 3e3) && document.body.classList.add('idle');\n  }\n  catch(e) { toggleError(e); }\n});\n","/**\n * The update step for a GPGPU particle simulation.\n * Requires setup with preprocessor macros - see `macroPass`.\n * Executed in one or more passes; each chunk depending on a `gpgpu` macro may\n * be combined with others into one pass or separated into its own pass; `gpgpu`\n * preprocessor macros control the combination according to which `values` are\n * currently bound for `output` to the next `state`.\n *\n * @see {@link step.toStep}\n * @see {@link macros.macroPass}\n */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\n// Setting up the macros and aliases `gl-gpgpu` provides.\n\n// Note these `texture_${value}`/`channels_${value}`/`reads_${value}_${derive}`\n// indexes correspond to the `values` indexes via `gl-gpgpu`'s `array`s\n// `values`/`derives`; they're redefined here to match the structure with names.\n\n// The texture channels each of the `values` is stored in.\n#define positionChannels gpgpu_channels_0\n#define motionChannels gpgpu_channels_1\n#define lifeChannels gpgpu_channels_2\n\n/** Set up sampling logic via `gl-gpgpu` macro. */\ngpgpu_useSamples\n\n// Set up minimal texture reads logic; only read what a value with a currently\n// bound output `derives` from other `values` for its next state.\n// See `derives` for how each `reads_${value}_${derive}` is indexed\n// per-`derive`-per-`value`.\n#ifdef gpgpu_output_0\n  #define positionOutput gpgpu_output_0\n  gpgpu_useReads_0\n  #define positionReadPosition0 gpgpu_reads_0_0\n  #define positionReadPosition1 gpgpu_reads_0_1\n  #define positionReadMotion gpgpu_reads_0_2\n  #define positionReadLife gpgpu_reads_0_3\n#endif\n#ifdef gpgpu_output_1\n  #define motionOutput gpgpu_output_1\n  gpgpu_useReads_1\n  #define motionReadMotion gpgpu_reads_1_0\n  #define motionReadLife gpgpu_reads_1_1\n  #define motionReadPosition gpgpu_reads_1_2\n#endif\n#ifdef gpgpu_output_2\n  #define lifeOutput gpgpu_output_2\n  gpgpu_useReads_2\n  #define lifeReadLifeLast gpgpu_reads_2_0\n  #define lifeReadLife1 gpgpu_reads_2_1\n#endif\n\n// The main shader.\n\n/** States from `gl-gpgpu`, merged or separate. */\n#ifdef gpgpu_mergedStates\n  /** States from `gl-gpgpu` in one merged `texture`. */\n  uniform sampler2D gpgpu_states;\n#else\n  /** States from `gl-gpgpu` in separate `texture`/s. */\n  uniform sampler2D gpgpu_states[gpgpu_stepsPast*gpgpu_textures];\n#endif\n\n/** Current step from `gl-gpgpu`; needed for `tapStates` or `tapStatesBy`. */\nuniform float gpgpu_stepNow;\n\n// Common shader inputs and parts.\n\nuniform float dt1;\nuniform float loop;\n\nvarying vec2 uv;\n\n#pragma glslify: random = require(glsl-random)\n#pragma glslify: lt = require(glsl-conditionals/when_lt)\n#pragma glslify: le = require(glsl-conditionals/when_le)\n\n// Any shader inputs or parts can also be split up by usage in different passes.\n\n#ifdef positionOutput\n  uniform float moveCap;\n  uniform vec2 pace;\n  uniform vec3 source;\n\n  /** @todo Try Velocity Verlet integration. */\n  #pragma glslify: verlet = require(@epok.tech/glsl-verlet/p-p-a)\n#endif\n\n#ifdef motionOutput\n  uniform float epsilon;\n  /** Sink position, and universal gravitational constant. */\n  uniform vec4 sink;\n  /** Constant acceleration of gravity; and whether to use it or the `sink`. */\n  uniform vec4 g;\n#endif\n\n#ifdef lifeOutput\n  /** A particle's lifetime range, and whether it's allowed to respawn. */\n  uniform vec3 lifetime;\n\n  #pragma glslify: map = require(glsl-map)\n#endif\n\n#if defined(positionOutput) || defined(motionOutput)\n  uniform float dt0;\n  uniform float useVerlet;\n  uniform vec2 spout;\n\n  #pragma glslify: tau = require(glsl-constants/TAU)\n  #pragma glslify: onSphere = require(./on-sphere)\n#endif\n\nfloat canSpawn(float life) {\n  // Whether to prefill initial states before spawning, or start with all `0`.\n  #ifdef prefill\n    return lt(life, 0.0);\n  #else\n    return le(life, 0.0);\n  #endif\n}\n\nvoid main() {\n  /** Sample the desired state values - creates the `gpgpu_data` `array`. */\n  gpgpu_tapState(uv)\n\n  // Read values.\n\n  #ifdef positionOutput\n    vec3 position0 = gpgpu_data[positionReadPosition0].positionChannels;\n  #endif\n\n  // If reads all map to the same value sample, any of them will do.\n  #if defined(positionOutput) || defined(motionOutput)\n    #if defined(positionOutput)\n      #define readMotion positionReadMotion\n      #define readPosition positionReadPosition1\n    #elif defined(motionOutput)\n      #define readMotion motionReadMotion\n      #define readPosition motionReadPosition\n    #endif\n\n    vec3 position1 = gpgpu_data[readPosition].positionChannels;\n    vec3 motion = gpgpu_data[readMotion].motionChannels;\n  #endif\n\n  // If reads all map to the same value sample, any of them will do.\n  #if defined(positionOutput)\n    #define readLife positionReadLife\n  #elif defined(lifeOutput)\n    #define readLife lifeReadLife\n  #elif defined(motionOutput)\n    #define readLife motionReadLife\n  #endif\n\n  vec2 life = gpgpu_data[readLife].lifeChannels;\n\n  #ifdef lifeOutput\n    vec2 lifeLast = gpgpu_data[lifeReadLifeLast].lifeChannels;\n  #endif\n\n  // Update and output values.\n  // Note that the update/output logic components within each `#if` macro\n  // block from `gpgpu` are independent modules, as the `gpgpu` macros\n  // determine whether they're executed across one or more passes - they could\n  // also be coded in separate files called from here, however they're coded\n  // inline here for brevity, relevance, and easy access to shared variables.\n\n  /** Whether the particle is ready to respawn. */\n  float spawn = canSpawn(life.x);\n\n  #if defined(positionOutput) || defined(motionOutput)\n    // Workaround for switching Euler/Verlet; interpret `motion` data as\n    // acceleration/velocity, respectively.\n    vec3 velocity = motion;\n    vec3 acceleration = motion;\n\n    /** Spawn randomly on a sphere around the source, move in that direction. */\n    vec3 spoutSpawn = random((-uv.st*(0.6+loop))/(0.1+dt0))*\n      onSphere(random((uv.st*(0.3+loop))/(0.9+dt0))*tau,\n        mix(-1.0, 1.0, random((-uv.ts*(0.2+loop))/(0.8+dt1))));\n  #endif\n\n  #ifdef positionOutput\n    /** For numeric accuracy, encoded as exponent `[b, p] => b*(10**p)`. */\n    float speed = pace.s*pow(10.0, pace.t);\n\n    /**\n     * Constrain Verlet movement; handle here for better numerical accuracy.\n     * Any position changes below the movement cap remain the same; any\n     * bigger clamped towards current position, by the ratio over the limit.\n     */\n    vec3 back = mix(position0, position1,\n      clamp((distance(position1, position0)/moveCap)-1.0, 0.0, 1.0));\n\n    // Use either Euler integration...\n    vec3 positionTo = mix(position1+(velocity*dt1*speed),\n      // ... or Verlet integration...\n      verlet(back, position1, acceleration*speed, dt0, dt1),\n      // ... according to which is currently active.\n      useVerlet);\n\n    /** Spawn around the source. */\n    vec3 positionSpawn = source+(spout.x*spoutSpawn);\n\n    /** Output the next position value to its channels in the state texture. */\n    positionOutput = mix(positionTo, positionSpawn, spawn);\n  #endif\n  #ifdef motionOutput\n    /**\n     * Gravitate towards the sink point (simplified).\n     * @see [Wikipedia on gravitation](https://en.wikipedia.org/wiki/Newton%27s_law_of_universal_gravitation)\n     */\n    vec3 gravity = sink.xyz-position1;\n\n    gravity *= sink.w/max(dot(gravity, gravity), epsilon);\n\n    /** Use sink point, or constant acceleration due to gravity. */\n    acceleration = mix(gravity, g.xyz, g.w);\n\n    vec3 motionTo = mix(velocity+(acceleration*dt1), acceleration, useVerlet);\n    vec3 motionNew = spout.y*spoutSpawn;\n\n    /** Output the next motion value to its channels in the state texture. */\n    motionOutput = mix(motionTo, motionNew, spawn);\n  #endif\n  #ifdef lifeOutput\n    vec2 lifeTo = vec2(life.x-dt1, life.y);\n\n    vec2 lifeNew = vec2(map(random(uv*(1.0+loop)),\n      0.0, 1.0, lifetime.s, lifetime.t));\n\n    /** Whether the oldest state has faded. */\n    float faded = canSpawn(lifeLast.x);\n\n    /**\n     * Output the next life value to its channels in the state texture.\n     * Only spawn life once the oldest step reaches the end of its lifetime\n     * (past and current life are both 0), and if it's allowed to respawn.\n     */\n    lifeOutput = mix(lifeTo, lifeNew, spawn*faded*lifetime.z);\n  #endif\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see {@link macros.macroPass}\n * @see {@link macros.macroValues}\n */\n\nprecision highp float;\n\n// The texture channels each of the `values` is stored in.\n#define positionChannels gpgpu_channels_0\n#define motionChannels gpgpu_channels_1\n#define lifeChannels gpgpu_channels_2\n// Set up sampling logic.\ngpgpu_useSamples\n// Only the first value derives from all values, giving these minimal `reads`.\ngpgpu_useReads_0\n// These first `derives` are all in one pass for the `value` at `0`.\n// See `derives` for how each `reads_0_${derive}` is indexed per-`derive`.\n#define readPosition1 gpgpu_reads_0_0\n#define readMotion gpgpu_reads_0_1\n#define readLife gpgpu_reads_0_2\n// Additional `derives` are individually specified.\n#define readPosition0 gpgpu_reads_0_3\n\nattribute float index;\n\n/** States from `gl-gpgpu`, merged or separate. */\n#ifdef gpgpu_mergedStates\n  /** States from `gl-gpgpu` in one merged `texture`. */\n  uniform sampler2D gpgpu_states;\n#else\n  /** States from `gl-gpgpu` in separate `texture`/s. */\n  uniform sampler2D gpgpu_states[gpgpu_stepsPast*gpgpu_textures];\n#endif\n\n/** Current step from `gl-gpgpu`; needed for `tapStates` or `tapStatesBy`. */\nuniform float gpgpu_stepNow;\n/** Further `gl-gpgpu` uniforms. */\nuniform vec4 gpgpu_stateShape;\nuniform vec2 gpgpu_viewShape;\n\nuniform mat4 modelView;\nuniform mat4 projection;\nuniform vec2 aspect;\nuniform float wide;\nuniform float dt;\nuniform float loop;\nuniform vec2 paceColor;\nuniform float useVerlet;\nuniform float form;\nuniform vec2 hues;\n\nuniform float fizz;\nuniform float fizzMax;\nuniform float fizzRate;\nuniform float fizzCurve;\n\n/** View-space position. */\nvarying vec4 positionView;\n/** Center and radius for points or lines; only points have `gl_PointCoord`. */\nvarying vec3 sphere;\nvarying vec4 color;\nvarying vec3 emissive;\n\n#pragma glslify: gt = require(glsl-conditionals/when_gt)\n#pragma glslify: random = require(glsl-random)\n#pragma glslify: map = require(glsl-map)\n#pragma glslify: tau = require(glsl-constants/TAU)\n#pragma glslify: hsl2rgb = require(glsl-hsl2rgb)\n\n#pragma glslify: onSphere = require(./on-sphere)\n#pragma glslify: indexUV = require(../../src/lookup/index-uv)\n#pragma glslify: offsetUV = require(../../src/lookup/offset-uv)\n\n#if gpgpu_stepsPast > 1\n  // If multiple steps are given, shift into past steps.\n  // Lookups mostly equivalent; input and result iteration order differ.\n  #define indexFormsStates\n  #ifdef indexFormsStates\n    #pragma glslify: indexStates = require(../../src/index-forms/index-states)\n  #else\n    #pragma glslify: indexEntries = require(../../src/index-forms/index-entries)\n  #endif\n#endif\n\nconst vec4 hide = vec4(0);\n\nfloat triangleWave(float x) { return (abs(fract(x)-0.5)*4.0)-1.0; }\n\nvoid main() {\n  #if gpgpu_stepsPast > 1\n    // If multiple steps are given, find past step and entry.\n    // Lookups mostly equivalent; input and result iteration order differ.\n    #ifdef indexFormsStates\n      vec2 stepEntry = indexStates(index, gpgpu_stepsPast, form);\n    #else\n      vec2 stepEntry = indexEntries(index, gpgpu_entries, form);\n    #endif\n\n    float stepPast = stepEntry.s;\n    float entry = stepEntry.t;\n  #else\n    // If only 1 step is given, past step and entry are known.\n    float stepPast = 0.0;\n    float entry = index;\n  #endif\n\n  // Turn 1D index into 2D texture UV; offset to texel center, avoids errors.\n  vec2 st = offsetUV(indexUV(entry, gpgpu_stateShape.xy), gpgpu_stateShape.xy);\n\n  // Can also use the `reads` logic to take the minimum possible samples here.\n  // Sample the desired state values; creates the `gpgpu_data` `array`.\n  #if gpgpu_stepsPast > 1\n    // Shift into past steps.\n    gpgpu_tapStateBy(st, stepPast, 0)\n  #else\n    // No past steps, no shift.\n    gpgpu_tapState(st)\n  #endif\n\n  // Read values.\n  vec3 position0 = gpgpu_data[readPosition0].positionChannels;\n  vec3 position1 = gpgpu_data[readPosition1].positionChannels;\n  vec3 motion = gpgpu_data[readMotion].motionChannels;\n  vec2 life = gpgpu_data[readLife].lifeChannels;\n  float alive = gt(life.x, 0.0);\n  float ago = stepPast/max(float(gpgpu_stepsPast-1), 1.0);\n\n  /** Fizz randomly on a sphere around older positions. */\n  float fl = pow(clamp(stepPast/fizz, 0.0, 1.0), fizzCurve)*fizzMax;\n  float ft = loop*fizzRate*mix(-1.0, 1.0, mod(entry, 2.0))/(1.0+fl);\n  float fa = (random(position1.xy+entry)+ft)*tau;\n  float fd = triangleWave(random(vec2(position1.z, life.x)-entry)+ft);\n\n  positionView = modelView*vec4(position1+(fl*onSphere(fa, fd)), 1);\n  // positionView = vec4(mix(vec2(-0.5), vec2(0.5), st), 0.2, 1);\n\n  vec4 to = mix(hide, projection*positionView, alive);\n\n  to.xy *= aspect;\n  gl_Position = to;\n\n  float fade = clamp(pow(1.0-ago, 0.9), 0.0, 1.0)*\n    clamp(pow(life.x/life.y, 0.5), 0.0, 1.0);\n\n  float scale = clamp(pow(1.0-(life.x/life.y), 0.4), 0.0, 1.0);\n  float size = gl_PointSize = (wide*fade*scale)/to.w;\n\n  /**\n   * Convert vertex position to `gl_FragCoord` window-space.\n   * @see [SO](https://stackoverflow.com/a/7158573)\n   * @see [SO](https://stackoverflow.com/a/54237532/716898)\n   */\n  sphere = vec3(gpgpu_viewShape*(((to.xy/to.w)*0.5)+0.5), size*0.5);\n\n  float hue = fract(mix(hues.s, hues.t, entry/float(gpgpu_entries)));\n  vec3 velocity = mix(motion, (position1-position0)/dt, useVerlet);\n\n  color = vec4(hsl2rgb(hue, mix(1.0, 0.1, ago), 0.7), fade);\n\n  emissive = hsl2rgb(hue, 1.0,\n    clamp(pow(dot(velocity, velocity)*paceColor.s, paceColor.t), 0.0, 0.8));\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see {@link macros.macroPass}\n * @see {@link macros.macroValues}\n *\n * @todo Simple light shading.\n */\n\n#ifdef GL_EXT_frag_depth\n  #extension GL_EXT_frag_depth : enable\n#endif\n\nprecision highp float;\n\nuniform float wide;\n/** Scale depths over near and far range, and precision (arbitrarily). */\nuniform vec3 depths;\n/** Fog start offset, scale, exponent, maximum effect. */\nuniform vec4 fog;\n/** The clear and fog color. */\nuniform vec4 clear;\n/** Material roughness, albedo, and skin thickness. */\nuniform vec3 material;\nuniform vec3 lightAmbient;\n\n#ifndef lightPointsL\n  #define lightPointsL 0\n#elif lightPointsL > 0\n  uniform vec3 lightPointPositions[lightPointsL];\n  uniform vec3 lightPointColors[lightPointsL];\n  uniform vec3 lightPointFactors[lightPointsL];\n#endif\n\n/** View-space position. */\nvarying vec4 positionView;\n/** Center and radius for points or lines; only points have `gl_PointCoord`. */\nvarying vec3 sphere;\nvarying vec4 color;\nvarying vec3 emissive;\n\n#pragma glslify: map = require(glsl-map)\n#pragma glslify: lt = require(glsl-conditionals/when_lt)\n#pragma glslify: gt = require(glsl-conditionals/when_gt)\n#pragma glslify: diffuse = require(glsl-diffuse-oren-nayar)\n#pragma glslify: specular = require(glsl-specular-beckmann)\n\n/**\n * Point-light attenuation.\n *\n * @see [I'm Doing it Wrong - Light Attenuation](https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/)\n *\n * @param d A vector of light position distance, [distance, distance squared].\n * @param a A vector of attenuation factors, [constant, linear, quadratic].\n *\n * @returns The attenuation of the point-light.\n */\nfloat attenuate(vec2 d, vec3 a) { return 1.0/dot(a, vec3(1, d)); }\nfloat attenuate(float d2, vec3 a) { return attenuate(vec2(sqrt(d2), d2), a); }\n\n/**\n * Spherical-light attenuation.\n *\n * @see [I'm Doing it Wrong - Light Attenuation](https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/)\n *\n * @param d A vector of light position distance, [distance, distance squared].\n * @param r A vector of spherical-light radius, [radius, radius squared].\n *\n * @returns The attenuation of the spherical-light.\n */\nfloat attenuate(vec2 d, vec2 r) { return attenuate(d, vec3(1, vec2(2, 1)/r)); }\nfloat attenuate(vec2 d, float r2) { return attenuate(d, vec2(sqrt(r2), r2)); }\nfloat attenuate(float d2, vec2 r) { return attenuate(vec2(sqrt(d2), d2), r); }\n\nfloat attenuate(float d2, float r2) {\n  return attenuate(vec2(sqrt(d2), d2), r2);\n}\n\nvoid main() {\n  /**\n   * Distance to a sphere's surface, and resulting normal and depth.\n   *\n   * @see [SO](https://stackoverflow.com/a/31829666/716898)\n   * @see [SO](https://stackoverflow.com/questions/53271461/drawing-a-sphere-normal-map-in-the-fragment-shader)\n   * @see [Shadertoy](https://www.shadertoy.com/view/XsfXDr)\n   * @see [Figure 13.2. Circle Point Computation](https://nicolbolas.github.io/oldtut/Illumination/Tutorial%2013.html)\n   */\n  float r = sphere.b;\n  float r2 = r*r;\n  vec2 cf = gl_FragCoord.xy-sphere.xy;\n  float cfl2 = dot(cf, cf);\n  float isWide = gt(wide, 1.0);\n\n  // Don't round if maximum width isn't enough.\n  if(isWide*cfl2 > r2) { discard; }\n\n  /** Vector pointing from the `sphere`'s center towards the eye. */\n  vec3 axis = vec3(cf, sqrt(r2-cfl2));\n  vec3 normal = axis/r;\n  float sphereDepth = abs(axis.z/wide);\n\n  #ifdef GL_EXT_frag_depth\n    /** The `sphere`'s fragment depth; scaled (arbitrarily) into depth space. */\n    gl_FragDepthEXT = map(gl_FragCoord.z-(depths.b*sphereDepth),\n      depths.s, depths.t, 0.0, 1.0);\n  #endif\n\n  vec3 lit = lightAmbient;\n  vec3 pe = -positionView.xyz;\n  float peL = length(pe);\n\n  pe /= peL;\n\n  #if lightPointsL > 0\n    for(int l = 0; l < lightPointsL; ++l) {\n      vec3 lightPosition = lightPointPositions[l];\n      vec3 lightColor = lightPointColors[l];\n      vec3 lightFactor = lightPointFactors[l];\n      float rough = material.r;\n      float albedo = material.g;\n      vec3 pl = lightPosition-positionView.xyz;\n      vec2 plL = vec2(dot(pl, pl));\n\n      pl /= (plL.s = sqrt(plL.s));\n\n      lit += lightColor*attenuate(plL, lightFactor)*\n        (diffuse(pl, pe, normal, rough, albedo)+\n          specular(pl, pe, normal, rough));\n    }\n  #endif\n\n  // More transparent looking directly at thin material, if wide enough.\n  float thick = 1.0-abs(normal.z*(1.0-material.z)*isWide);\n  float foggy = min(pow(max(peL-sphereDepth-fog.x, 0.0)*fog.y, fog.z), fog.w);\n  vec3 shade = mix((color.rgb*lit)+emissive, clear.rgb, foggy);\n  float fade = color.a*thick;\n\n  gl_FragColor = vec4(shade*fade, fade);\n}\n"],"names":["$d5ef0c571d511a2c$export$7d15b64cf5a3a4c4","x","min","max","$d5ef0c571d511a2c$export$5c5ee632c52bc4a2","$af80ab5aed4568ea$export$1991ecd29cc92c6b","a","b","$af80ab5aed4568ea$export$1e044b7877db048c","c","d","$649cfd5a58fc4894$export$651a6eb01ea522f3","prefix","suffix","msg","undefined","_class","Error","constructor","super","$e2e9c6e85008465a$export$ab59e00737fb22e6","$e2e9c6e85008465a$export$98e633703a635f","$0c2e9aa838ce987e$export$c37d18c23b2ea60c","dispatch","impls","Array","fallback","fn","args","g","length","add","dim","default","impl","$3e47b8d61479f9e2$export$64da3195d9348dc4","Object","freeze","$3e47b8d61479f9e2$export$74d08f64010bdae6","$3e47b8d61479f9e2$export$fd634c4b89e45776","$3e47b8d61479f9e2$export$80c2f4851e95e22e","$1677a9cd03cd47da$export$772aa0961a81b065","$1677a9cd03cd47da$export$9f1b9fbfe882200d","n","$c653561c780d0f6b$export$1af3c925c49f37a2","fns","e","f","h","i","j","xs","slice","$b79203ba28abdd44$export$c915e14294a7d06f","$819576b270b5e475$export$eca2c7e8e95bbf0a","xform","$0714a264a675e9d1$export$1af3c925c49f37a2","map","apply","$cf77b4ffaf1c4536$export$9652023d9040757","Symbol","iterator","$7e1b18cde680cb02$export$5adef4befe47917","rfn","$d206e02ca4dcf0e0$export$a7d1fa727cb10b0e","$d206e02ca4dcf0e0$export$ca96bc7645ad7951","$1d9f5ea86665d31f$export$ce266a425291df6c","deref","this","value","val","$1d9f5ea86665d31f$export$447808b60b7559bd","$1d9f5ea86665d31f$export$ebab785f9ea33473","$1d9f5ea86665d31f$export$f2412ace46b7b087","$1d9f5ea86665d31f$export$7ca7c14b24aa137b","$c365d6451152284b$var$parseArgs","$c365d6451152284b$export$533b26079ad0b4b","init","complete","reduce","acc","$reduce","$c365d6451152284b$var$reduceArray","$c365d6451152284b$var$reduceIterable","$c365d6451152284b$export$1650419e431d3ba3","$0f185ecb0d828dc1$export$4cbf152802aa238","push","$7a7900afe7a0bccc$export$6f58e2338da23f4d","y","$7a7900afe7a0bccc$export$a6bff14a9cefe0e8","_","$7a7900afe7a0bccc$export$9b6eac2a13c3d07","$f230720ebf51dc56$export$871de8747c9eaa88","src","r","$21ed914d1c0e4a99$export$e5bd5b3b105c2a71","$5b403e59bef8f2b5$export$d02631cccf789723","from","to","step","$5b403e59bef8f2b5$export$9a58ef0d7ad3278c","i1","n1","Infinity","$a1dd5508312bc9fb$export$42d51816ce590c93","sep","first","join","$dc3be3a42840f536$export$b7df5d561049483a","m","$dde6b5a5d6148b53$export$9608d0eacffd6284","$dde6b5a5d6148b53$var$$transduce","tfn","$31afcaa52fb25345$export$8901015135f2fb22","iters","s","tuple","v","next","done","$093d417c895f958c$export$da5c1e34018ecc43","op","o","$093d417c895f958c$export$4061f92b6da4a345","$093d417c895f958c$export$5e8f180ef0142226","$c6ca1b5d6a934717$var$indicesStrided","sym","$c6ca1b5d6a934717$var$lookup","$c6ca1b5d6a934717$var$indices","$c6ca1b5d6a934717$var$assemble","tpl","syms","ret","opJoin","pre","post","strided","split","$c6ca1b5d6a934717$var$assembleG","$c6ca1b5d6a934717$export$6d9e0940428d9eae","$c6ca1b5d6a934717$export$ef7acd7185315e22","Function","$c6ca1b5d6a934717$export$aeba7862bf0c66c4","$c6ca1b5d6a934717$export$e40cf5ce9a490533","$","$7526483f24b9fe13$export$adaa4cf7ef1b65be","$7526483f24b9fe13$export$55640438a4edf3d6","$7526483f24b9fe13$export$9cbac02f28c9a9a9","$7526483f24b9fe13$export$a7c139a4194832bf","$9f71838da58ef3e9$var$$","$9f71838da58ef3e9$export$adaa4cf7ef1b65be","$3782ed1969110896$export$f0954fd7d5368655","$3782ed1969110896$export$2191d5173c5a0ec5","$155a977418cd877b$export$6b5c1ceb16d01dc3","Math","PI","$155a977418cd877b$export$460c4029b1a54a2e","sqrt","SQRT2","$676432b1b8bb1fa0$export$7d5e3328550ce0cd","theta","sin","cos","$f51dc4b07892af2e$var$$","$f51dc4b07892af2e$export$57ce51e080b800","$f51dc4b07892af2e$export$9bdeebc943bb634d","$e346a31f7c57f0ed$export$523c9d3eb3d8d990","$e346a31f7c57f0ed$export$b54ddf06b57709b1","$e346a31f7c57f0ed$export$1c0ad2738a5ae4b0","$e346a31f7c57f0ed$export$1f214a01989f466a","$8a1a0a140e5c49c5$export$6feaa6aa9769ce13","out","$3f3acd1c6656e3a5$export$dcfbb7940cfb3a48","$3f3acd1c6656e3a5$export$ba8c70ce75474f8d","z","$3f3acd1c6656e3a5$export$abee0037e1db715","w","$3f3acd1c6656e3a5$export$d58a46c754825a51","$3f3acd1c6656e3a5$export$644e79245f7d24b5","$1fd6e7a1a880e517$export$c3d49302a4b760b2","m33","$f0c9e2aa428a20d9$export$91ef8150045801d7","axis","normalize","t","ys","zs","xt","yt","zt","$f0c9e2aa428a20d9$export$6af315cc92b6bcce","$c8063892a31b9830$export$89b5708c387cac6c","left","right","bottom","top","near","far","dx","dy","dz","$c8063892a31b9830$export$afe7eeb07fe5f7b2","fovy","aspect","tan","$5f03f86033128c09$export$541149539f3a4684","fov","$f878b437d519cd71$export$ea0ef2e80b79c3dc","$9fde0573b4347b24$var$$","$9fde0573b4347b24$export$94132a0e348806d4","$9fde0573b4347b24$export$6f9aa2c904053c13","$2d4b523361fbbad5$export$f93b5905241a7cca","$2d4b523361fbbad5$export$27409c384c4283a","$2d4b523361fbbad5$export$4d77c846ee8dc708","$2d4b523361fbbad5$export$317805a8a51cab87","$53d1e07067d5a7c4$export$d924e14fd6d9aa66","eye","target","up","$18b97029e5587929$var$$","$18b97029e5587929$export$cf66b157879064b6","$18b97029e5587929$export$78ae608fdbee4899","$18b97029e5587929$export$7cff64c0e2ba076b","$c6915cb4d777e954$export$be747b9875ee8d57","$c6915cb4d777e954$export$d012f6a5572fd758","$4684d088e0f72e2e$export$ee1b3e54f0441b22","$c4f421060722967f$export$8eba860695d17007","$c4f421060722967f$export$1c6c7bbb3c786559","$52d25273fff6be57$export$ec923e38fabc9186","$52d25273fff6be57$export$52f3cc8bf1fcf271","$08f4e6363464e07f$var$dp4","$08f4e6363464e07f$var$dp6","$08f4e6363464e07f$export$7b7ad19b83443ac6","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","$08f4e6363464e07f$export$ea9ce22bf01d0ac","$296d9dfd1abda915$var$dp4","$296d9dfd1abda915$var$dp6","$296d9dfd1abda915$export$6897c284b6f9f4dc","$296d9dfd1abda915$export$f3d3af87b23e55b9","det","d01","d11","d21","coeffs","d00","d02","d03","d04","d05","d06","d07","d08","d09","d10","$40cf797ebf11db8e$export$651a6eb01ea522f3","$cd42a4ad6da0945a$export$772aa0961a81b065","$cd42a4ad6da0945a$export$9f1b9fbfe882200d","$55652340d80c5d5e$export$1af3c925c49f37a2","$dd8c58cd6aa46a6a$export$c915e14294a7d06f","$245bf53f1853379a$export$eca2c7e8e95bbf0a","$02b016321c1af5bb$export$1af3c925c49f37a2","$74bd20876d61d409$export$9652023d9040757","$7d806730f1a0e0b8$export$5adef4befe47917","$f13ba2093059269d$export$a7d1fa727cb10b0e","$f13ba2093059269d$export$ca96bc7645ad7951","$68a31654ea12aacc$export$ce266a425291df6c","$68a31654ea12aacc$export$447808b60b7559bd","$68a31654ea12aacc$export$ebab785f9ea33473","$68a31654ea12aacc$export$f2412ace46b7b087","$68a31654ea12aacc$export$7ca7c14b24aa137b","$5890ea6fb7b22d77$var$parseArgs","$5890ea6fb7b22d77$export$533b26079ad0b4b","$5890ea6fb7b22d77$var$reduceArray","$5890ea6fb7b22d77$var$reduceIterable","$5890ea6fb7b22d77$export$1650419e431d3ba3","$5a9cbd6be370ebd5$export$4cbf152802aa238","$f6b1725fe346afb1$export$6f58e2338da23f4d","$f6b1725fe346afb1$export$a6bff14a9cefe0e8","$f6b1725fe346afb1$export$9b6eac2a13c3d07","$146b46e07053df63$export$871de8747c9eaa88","$b1005cde0cb76c83$export$e5bd5b3b105c2a71","$20f7a18110afebc5$export$d02631cccf789723","$20f7a18110afebc5$export$9a58ef0d7ad3278c","$cb1a7043e7f41700$export$42d51816ce590c93","$047a6c318d409a10$export$b7df5d561049483a","$2c50c27f0b0eade6$export$9608d0eacffd6284","$2c50c27f0b0eade6$var$$transduce","$c3256b1c81e0266c$export$8901015135f2fb22","$ec021829c31cf21d$export$ab59e00737fb22e6","$ec021829c31cf21d$export$98e633703a635f","$2234ff9c37a576d3$export$c37d18c23b2ea60c","$1cd6677645ff755a$export$da5c1e34018ecc43","$1cd6677645ff755a$export$6ab71ad6f57b0093","$1cd6677645ff755a$export$5e8f180ef0142226","$3d58a64a7f639ac2$var$indicesStrided","$3d58a64a7f639ac2$var$lookup","$3d58a64a7f639ac2$var$indices","$3d58a64a7f639ac2$var$assemble","$3d58a64a7f639ac2$var$assembleG","$3d58a64a7f639ac2$var$assembleS","$3d58a64a7f639ac2$export$6d9e0940428d9eae","$3d58a64a7f639ac2$export$ef7acd7185315e22","$3d58a64a7f639ac2$export$aeba7862bf0c66c4","$3d58a64a7f639ac2$export$6c4e26942fd16e7","$3d58a64a7f639ac2$export$e40cf5ce9a490533","$3d58a64a7f639ac2$export$503c6222d3c48f54","idxArgs","sizes","$3d58a64a7f639ac2$export$5d7f662452a819b3","$3d58a64a7f639ac2$export$24ecd06eea36a882","$0ed28a3237431d2b$export$523c9d3eb3d8d990","$0ed28a3237431d2b$export$b54ddf06b57709b1","$0ed28a3237431d2b$export$1c0ad2738a5ae4b0","$0ed28a3237431d2b$export$1f214a01989f466a","$6e808adec76a7d1b$export$159d9494db57879b","$6e808adec76a7d1b$export$87ee28508e334108","$6e808adec76a7d1b$export$515c756757bc7dd6","$6e808adec76a7d1b$export$1610da4f4fb6074f","$61aba245b491c957$export$6747e444d0e25f8e","$61aba245b491c957$export$c8a0e366d15bb712","$61aba245b491c957$export$cb6d410f870ee721","$61aba245b491c957$export$9e7986c53a12814a","$4a376c3df5d1fd42$export$f93b5905241a7cca","$4a376c3df5d1fd42$export$27409c384c4283a","$4a376c3df5d1fd42$export$4d77c846ee8dc708","$4a376c3df5d1fd42$export$317805a8a51cab87","$10fff836fdd53b1b$export$e16d8520af44a096","$10fff836fdd53b1b$export$363c2f72629e4a7f","$10fff836fdd53b1b$export$287691874d09163a","$10fff836fdd53b1b$export$81b475958bcba316","$0e3db237c359f41e$export$6897c284b6f9f4dc","$0e3db237c359f41e$export$eb08a4e6e8934de4","$0e3db237c359f41e$export$2f6df6f9964c34d8","$0e3db237c359f41e$export$2cac2c285d867dd","$4b6551cc9b4bfa31$export$dcfbb7940cfb3a48","$4b6551cc9b4bfa31$export$ba8c70ce75474f8d","$4b6551cc9b4bfa31$export$abee0037e1db715","$a709e00104d447f2$var$tpl","$a709e00104d447f2$var$$","$a709e00104d447f2$export$1717f45d0ace7417","$a709e00104d447f2$export$8ad5a30d17ee2508","$8706654eeb21576f$export$49f8ee6768bb070e","$6e16419f36a5453c$var$$","$6e16419f36a5453c$export$57ce51e080b800","$6e16419f36a5453c$export$9bdeebc943bb634d","$2a53c41eea7b772b$export$adaa4cf7ef1b65be","$2a53c41eea7b772b$export$55640438a4edf3d6","$2a53c41eea7b772b$export$9cbac02f28c9a9a9","$2a53c41eea7b772b$export$a7c139a4194832bf","$1fadc9b60da9fd38$export$6feaa6aa9769ce13","$9cf57ef524554708$var$gsl_const","CGS","SPEED_OF_LIGHT","GRAVITATIONAL_CONSTANT","PLANCKS_CONSTANT_H","PLANCKS_CONSTANT_HBAR","ASTRONOMICAL_UNIT","LIGHT_YEAR","PARSEC","GRAV_ACCEL","ELECTRON_VOLT","MASS_ELECTRON","MASS_MUON","MASS_PROTON","MASS_NEUTRON","RYDBERG","BOLTZMANN","MOLAR_GAS","STANDARD_GAS_VOLUME","MINUTE","HOUR","DAY","WEEK","INCH","FOOT","YARD","MILE","NAUTICAL_MILE","FATHOM","MIL","POINT","TEXPOINT","MICRON","ANGSTROM","HECTARE","ACRE","BARN","LITER","US_GALLON","QUART","PINT","CUP","FLUID_OUNCE","TABLESPOON","TEASPOON","CANADIAN_GALLON","UK_GALLON","MILES_PER_HOUR","KILOMETERS_PER_HOUR","KNOT","POUND_MASS","OUNCE_MASS","TON","METRIC_TON","UK_TON","TROY_OUNCE","CARAT","UNIFIED_ATOMIC_MASS","GRAM_FORCE","POUND_FORCE","KILOPOUND_FORCE","POUNDAL","CALORIE","BTU","THERM","HORSEPOWER","BAR","STD_ATMOSPHERE","TORR","METER_OF_MERCURY","INCH_OF_MERCURY","INCH_OF_WATER","PSI","POISE","STOKES","STILB","LUMEN","LUX","PHOT","FOOTCANDLE","LAMBERT","FOOTLAMBERT","CURIE","ROENTGEN","RAD","SOLAR_MASS","BOHR_RADIUS","NEWTON","DYNE","JOULE","ERG","STEFAN_BOLTZMANN_CONSTANT","THOMSON_CROSS_SECTION","CGSM","BOHR_MAGNETON","NUCLEAR_MAGNETON","ELECTRON_MAGNETIC_MOMENT","PROTON_MAGNETIC_MOMENT","FARADAY","ELECTRON_CHARGE","MKS","VACUUM_PERMITTIVITY","VACUUM_PERMEABILITY","DEBYE","GAUSS","MKSA","NUM","FINE_STRUCTURE","AVOGADRO","YOTTA","ZETTA","EXA","PETA","TERA","GIGA","MEGA","KILO","MILLI","MICRO","NANO","PICO","FEMTO","ATTO","ZEPTO","YOCTO","$9cf57ef524554708$exports","$959bbeaa5f8cb697$export$be3f796aed065412","diff","dt","pause","$959bbeaa5f8cb697$export$7548f4bc1b09ff22","$959bbeaa5f8cb697$export$85b884786400d38f","$959bbeaa5f8cb697$export$eb8a9b7a1ebec59a","Date","now","$959bbeaa5f8cb697$export$2e2bcd8739ae039","state","time","t0","_step","ref","ref1","t1","isNaN","$017a4a1d8ca37554$var$r","prototype","$017a4a1d8ca37554$export$533b26079ad0b4b","call","$017a4a1d8ca37554$export$2e2bcd8739ae039","$2593ef4f97fa3e8c$export$2e2bcd8739ae039","$127197402551c984$var$e","forEach","$127197402551c984$export$2e2bcd8739ae039","fill","$480dff185b1e90a4$var$fill","isFinite","$480dff185b1e90a4$var$isFinite","Number","floor","$480dff185b1e90a4$var$floor","$480dff185b1e90a4$export$2e2bcd8739ae039","l","start","end","$09085342403dabf7$export$2e2bcd8739ae039","$fc694c6fd411a455$export$2e2bcd8739ae039","$f6bedf3ea80b11e6$export$ba60520149d1328e","$f6bedf3ea80b11e6$export$85b9a36db797e02b","$f6bedf3ea80b11e6$export$878041e1e4cd4218","flat","$bc78d1a683d7cfc1$export$dc207adda608f979","$parcel$interopDefault","$bc78d1a683d7cfc1$export$cfdc3a7c4cb854c6","$bc78d1a683d7cfc1$export$832d88422d279bbc","$bc78d1a683d7cfc1$export$ac0cd3cc21f80dfc","$bc78d1a683d7cfc1$export$4bceda1224fc5ab8","$bc78d1a683d7cfc1$export$b4781c2237bde956","$bc78d1a683d7cfc1$export$26945b8c914b7fc","$bc78d1a683d7cfc1$export$154f256b9eac9103","$bc78d1a683d7cfc1$export$b6267c3f91c57c78","$bc78d1a683d7cfc1$export$b029aceb5666f022","$bc78d1a683d7cfc1$export$617a37502ff8853","$bc78d1a683d7cfc1$export$ff01eb58fe4e69","$bc78d1a683d7cfc1$export$27fb0dad99ae5dd2","$bc78d1a683d7cfc1$export$47b10f415de592b1","$bc78d1a683d7cfc1$export$1fb689c67b965bff","$bc78d1a683d7cfc1$export$8d7f4a48e1f2b2a","$bc78d1a683d7cfc1$export$a211ab2c8ecded9a","$bc78d1a683d7cfc1$export$a1b7c201e9365814","$bc78d1a683d7cfc1$export$5544d416ac8224f1","$bc78d1a683d7cfc1$export$2902d6d00b7c2bce","$bc78d1a683d7cfc1$export$2fcc13103217f9a3","color","depth","stencil","$bc78d1a683d7cfc1$export$78f9fb74e68ed5c6","$bc78d1a683d7cfc1$export$72e520e6a70b780c","copy","isInteger","$bbb23253d9fa3113$var$isInteger","isArray","$bbb23253d9fa3113$var$isArray","$bbb23253d9fa3113$export$5ca26c99531348ec","channelsMax","console","error","$bbb23253d9fa3113$export$9d1d9285bd6d8c57","values","channels","packed","fitIndex","fitSize","fit","pack","$bbb23253d9fa3113$export$574963e692b662ec","maps","derives","passes","textures","valueToTexture","reads","cache","getAddSample","pass","valueNext","set","derive","dp","allStepSamples","texture","findIndex","samples","p","dn","getAddSamples","$bbb23253d9fa3113$export$798cdecdcbbf9755","buffersMax","valueToPass","textureToPass","output","getIndex","getValue","index","$bbb23253d9fa3113$export$96707a1f51900f3d","$590beef2a696b8fd$var$isFinite","$590beef2a696b8fd$var$isInteger","$590beef2a696b8fd$export$3c49c185de0c2bfc","width","shape","size","side","v0","$590beef2a696b8fd$export$c08559766941f856","height","v1","$590beef2a696b8fd$export$87ed20f81f3c66ff","entries","$590beef2a696b8fd$export$2815acae70277c92","$590beef2a696b8fd$export$f99427edb65f5558","scale","$db5eb7ff43e44c77$var$isInteger","$db5eb7ff43e44c77$var$mergeDef","steps","$db5eb7ff43e44c77$export$24a6b176bdc41ce5","framebuffer","type","mag","wrap","scaled","channelsMin","texturesMap","passesMap","stepsL","merge","passChannels","sum","mergeChannels","framebuffers","colors","colorPool","addTexture","entry","addPass","mScale","all","mAll","mNext","mScaled","mw","mh","$42d53ffb3630b5df$export$1aad3af825e3305b","uniforms","bound","texturesL","stateShape","viewShape","stepNow","drawingBufferWidth","drawingBufferHeight","addTextures","ago","ts","pl","$458cd3652fd98950$var$start","$458cd3652fd98950$var$end","$458cd3652fd98950$export$bf9fb029d174d554","toString","$5bb6ca9eea4b6017$export$497faa7f0daf9da","$5bb6ca9eea4b6017$var$id","JSON","stringify","$5bb6ca9eea4b6017$export$11949c6f5fba7dcd","$5bb6ca9eea4b6017$export$feaf5ffc92c2af94","key","on","macros","$5bb6ca9eea4b6017$export$83d01c7b88bc16d5","name","qualify","$5bb6ca9eea4b6017$export$45db4de6da38aa8d","$5bb6ca9eea4b6017$export$3df19e70a88cb8cd","$5bb6ca9eea4b6017$export$1c7039c93eddfba","$5bb6ca9eea4b6017$export$c346962e7dd3191","glsl","trim","$5bb6ca9eea4b6017$export$d38b14fb9031108e","passesL","$5bb6ca9eea4b6017$export$84186522bf5a7d4d","passNow","$5bb6ca9eea4b6017$export$49873e279ff642c0","passSamples","passReads","$5bb6ca9eea4b6017$export$9cb6037fa2a40c2e","glsl3","tap","by","aka","akaBy","st","tapsSamples","$5bb6ca9eea4b6017$export$562ddd36066ad650","$dca3c1826e5966d7$var$call","$dca3c1826e5966d7$export$d86e3abd7686c23f","ps","$dca3c1826e5966d7$export$95b2c9ea2de43ebb","shader","context","$dca3c1826e5966d7$export$12661000d11a17d2","copyFrame","cf","copyImage","ci","subimage","sl","use","$dca3c1826e5966d7$export$d89197afac86b993","api","buffer","clear","command","pipeline","verts","frag","frags","attributes","vert","replaceAll","count","positions","vs","fs","enable","update","onPass","onStep","stepMax","clearPass","mergeUpdate","stepProps","passProps","$2b0f5ebd78a3f030$var$isFinite","$2b0f5ebd78a3f030$export$2e2bcd8739ae039","maxDrawbuffers","apiGLSL","limits","version","parseFloat","match","$fb274f7b3d6bb589$export$2e2bcd8739ae039","states","form","$f2f14cc2e5ed9347$export$2c9e8a9632a706b2","$f5c971d17c3c7e14$export$5fde601f2db1a7a6","$f5c971d17c3c7e14$export$f5f3637a663c816","$f5c971d17c3c7e14$export$b845ad3a59cfd772","$f5c971d17c3c7e14$export$5a6ac9c3945935e8","op1","op2","$378a4f652dcf72cc$export$b1681e55aa41cf93","$378a4f652dcf72cc$export$ce03ce82183fcacf","$378a4f652dcf72cc$export$fce72d6f58f3bf47","$378a4f652dcf72cc$export$cbb07426a95117ea","$17c7c83aecfd14c2$export$5dceb76539a08116","$94c3c1bd7c4b3ef2$export$c2fad5ac839d6a20","$94c3c1bd7c4b3ef2$export$8b0b3f9a2d1cfdb4","$f758889cd32acd04$var$cos","$f758889cd32acd04$var$sin","$f758889cd32acd04$export$6e6697ef026a96","$f758889cd32acd04$export$c922d23b3f1f2998","phi","ct","$66a86d7d019bea8d$var$sin","$66a86d7d019bea8d$var$cos","$66a86d7d019bea8d$export$5610d322dd37c6c0","random","$cf29cfd0fe747fc4$var$random","$cf29cfd0fe747fc4$var$min","$cf29cfd0fe747fc4$var$pi","TAU","$cf29cfd0fe747fc4$var$tau","$cf29cfd0fe747fc4$export$267b06a7460aa7d3","at","idle","radius","yaw","spin","turn","wait","curve","pole","atl","$53e56069ca082632$var$ugc","$53e56069ca082632$var$g","abs","$53e56069ca082632$var$abs","$53e56069ca082632$var$floor","$53e56069ca082632$var$random","$53e56069ca082632$var$sin","$53e56069ca082632$var$cos","$53e56069ca082632$var$min","$53e56069ca082632$var$max","$53e56069ca082632$var$sqrt","log2","$53e56069ca082632$var$log2","$53e56069ca082632$var$pi","$53e56069ca082632$var$tau","self","gpgpu","macroPass","mapStep","toUniforms","getDrawIndexes","indexForms","$53e56069ca082632$var$canvas","document","querySelector","$53e56069ca082632$var$scroll","scrollIntoView","$53e56069ca082632$var$scrollDefer","setTimeout","$53e56069ca082632$var$toggleError","classList","$53e56069ca082632$var$getQuery","search","location","URLSearchParams","$53e56069ca082632$var$query","$53e56069ca082632$var$fragDepth","get","$53e56069ca082632$var$extend","required","optional","$53e56069ca082632$var$pixelRatio","devicePixelRatio","$53e56069ca082632$var$regl","regl","$0290d13fb674d82e$exports","extensions","optionalExtensions","onDone","group","log","hasExtension","groupEnd","$53e56069ca082632$var$valuesMap","Map","$53e56069ca082632$var$values","$53e56069ca082632$var$valuesIndex","k","maxTextureUnits","$53e56069ca082632$var$maxTextureUnits","maxTextureSize","$53e56069ca082632$var$maxTextureSize","lineWidthDims","$53e56069ca082632$var$lineWidthDims","pointSizeDims","$53e56069ca082632$var$pointSizeDims","depthBits","$53e56069ca082632$var$depthBits","$53e56069ca082632$var$merge","$53e56069ca082632$var$limits","$53e56069ca082632$var$niceScale","$53e56069ca082632$var$scale","$53e56069ca082632$var$steps","$53e56069ca082632$var$stepsPast","$53e56069ca082632$var$canVerlet","$53e56069ca082632$var$prefill","$53e56069ca082632$var$form","$53e56069ca082632$var$wide","$53e56069ca082632$var$spin0","$53e56069ca082632$var$spinPace","$53e56069ca082632$var$spoutPace","$53e56069ca082632$var$gapZ","$53e56069ca082632$var$shakeSource","$53e56069ca082632$var$shakeSink","$53e56069ca082632$var$fizz","rate","$53e56069ca082632$var$hues","getAll","$53e56069ca082632$var$lit","$53e56069ca082632$var$paceLit","$53e56069ca082632$var$rough","$53e56069ca082632$var$albedo","$53e56069ca082632$var$skin","$53e56069ca082632$var$timeQuery","$53e56069ca082632$var$timestep","$53e56069ca082632$var$flipPointer","$53e56069ca082632$var$guide","$53e56069ca082632$var$setupLink","hash","has","href","q","delete","$53e56069ca082632$var$setQuery","$53e56069ca082632$var$hashScroll","addEventListener","querySelectorAll","checked","$53e56069ca082632$var$derives","position","motion","life","$53e56069ca082632$var$toShake","props","timer","shake","$53e56069ca082632$var$state","every","dt0","dts","dt1","loop","source","sink","lifetime","prop","useVerlet","epsilon","moveCap","pace","spout","ss","u","$53e56069ca082632$var$drawBound","$53e56069ca082632$var$drawSteps","$53e56069ca082632$var$useLines","$53e56069ca082632$var$drawCounts","$53e56069ca082632$var$viewScale","$53e56069ca082632$var$drawState","drawProps","model","matrix","inverse","rotation","angle","angle0","view","ray","projection","transform","modelView","modelViewProjection","light","ambient","points","factor","material","depths","fog","counts","primitives","widths","paceColor","$53e56069ca082632$var$drawUniforms","fizz","fizzMax","fizzRate","fizzCurve","hues","lightAmbient","wide","ws","$53e56069ca082632$var$lightPoints","lp","$53e56069ca082632$var$drawPipeline","lineWidth","cs","blend","func","dst","primitive","drawState","drawPipeline","$53e56069ca082632$var$draw","$53e56069ca082632$var$clearView","$53e56069ca082632$var$rotateModel","mm","mi","$53e56069ca082632$var$stopEvent","stopPropagation","preventDefault","$53e56069ca082632$var$hold","$53e56069ca082632$var$resize","ar","innerWidth","innerHeight","$53e56069ca082632$var$aspect","$53e56069ca082632$var$frameStep","$53e56069ca082632$var$stepTime","vm","vi","$53e56069ca082632$var$updateView","d0","d1","pm","pi","$53e56069ca082632$var$updateProjection","spawned","held","button","flipPointer","clientX","clientY","pointerType","isPrimary","getBoundingClientRect","touch","pick","ro","rv","body","remove","requestFullscreen","frame","tmv","viewProjection","tvp","tmvp","$53e56069ca082632$var$updateTransform"],"version":3,"file":"index.b4823639.js.map"}