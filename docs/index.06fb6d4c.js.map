{"mappings":"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","sources":["demo/particles/index.js","node_modules/@swc/helpers/src/_define_property.js","node_modules/@swc/helpers/src/_object_spread.js","node_modules/@swc/helpers/src/_sliced_to_array.js","node_modules/@swc/helpers/src/_array_with_holes.js","node_modules/@swc/helpers/src/_iterable_to_array.js","node_modules/@swc/helpers/src/_non_iterable_rest.js","node_modules/@swc/helpers/src/_to_consumable_array.js","node_modules/@swc/helpers/src/_array_without_holes.js","node_modules/@swc/helpers/src/_non_iterable_spread.js","node_modules/clamp/index.js","node_modules/@epok.tech/fn-time/dist/es/index.js","node_modules/@epok.tech/fn-lists/reduce.js","node_modules/@epok.tech/fn-lists/map.js","node_modules/@epok.tech/fn-lists/each.js","index.js","maps.js","const.js","node_modules/@epok.tech/gl-screen-triangle/dist/esm/index.js","node_modules/@epok.tech/gl-screen-triangle/uv-texture.vert.glsl","state.js","node_modules/@epok.tech/fn-lists/range.js","step.js","node_modules/@epok.tech/fn-lists/wrap-index.js","macros.js","node_modules/@epok.tech/is-type/type.js","inputs.js","node_modules/@thi.ng/vectors/setc.js","index-pairs/index.js","demo/particles/step.frag.glsl","demo/particles/draw.vert.glsl","demo/particles/draw.frag.glsl"],"sourcesContent":["/**\n * Demo implementation of 3D particle Verlet/Euler integration simulation.\n */\n\nimport getRegl from 'regl';\nimport clamp from 'clamp';\nimport timer from '@epok.tech/fn-time';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport each from '@epok.tech/fn-lists/each';\n\nimport { gpgpu, extensionsFloat, optionalExtensions } from '../../index';\nimport { macroPass } from '../../macros';\nimport { getMaps } from '../../maps';\nimport { getUniforms, getDrawIndexes } from '../../inputs';\nimport indexPairs from '../../index-pairs';\n\nimport stepFrag from './step.frag.glsl';\nimport drawVert from './draw.vert.glsl';\nimport drawFrag from './draw.frag.glsl';\n\nconst reglProps = {\n    pixelRatio: Math.max(Math.floor(devicePixelRatio), 1.5),\n    extensions: extensionsFloat(), optionalExtensions: optionalExtensions()\n};\n\nconst regl = self.regl = getRegl(reglProps);\n\nconsole.log('extensions',\n    reduce((o, e) => o+((o)? '; ' : '')+e+': '+regl.hasExtension(e),\n        reglProps.extensions, ''));\n\nconsole.log('optionalExtensions',\n    reduce((o, e) => o+((o)? '; ' : '')+e+': '+regl.hasExtension(e),\n        reglProps.optionalExtensions, ''));\n\nconst canvas = document.querySelector('canvas');\n\ncanvas.classList.add('view');\n\n// How many frame-buffers are bound at a given time.\nconst bound = 1;\n\n// How many values/channels each property independently tracks.\n// The order here corresponds to the order in the shaders and generated macros.\n\nconst valuesMap = (new Map())\n    .set('position', 3).set('acceleration', 3).set('life', 1);\n\nconst values = [];\nconst valuesIndex = {};\n\nvaluesMap.forEach((v, k) => valuesIndex[k] = values.push(v)-1);\n\n// Limits of this device and these `values`.\nconst { maxTextureUnits, maxTextureSize, lineWidthDims, pointSizeDims } =\n    regl.limits;\n\nconst limits = {\n    steps: [\n        1+bound,\n        Math.floor(maxTextureUnits*4/reduce((s, v) => s+v, values, 0))\n    ],\n    // Better stay farther under maximum texture size, or errors/crashes.\n    scale: [1, Math.log2(maxTextureSize)]\n};\n\nconst niceScale = Math.min(8, limits.scale[1]);\n\nconsole.log('limits', limits, regl.limits);\n\n// Handle query parameters.\n\nconst getQuery = (search = location.search) => new URLSearchParams(search);\n\nfunction setQuery(entries, query = getQuery()) {\n    each(([k, v = null]) => ((v === null)? query.delete(k) : query.set(k, v)),\n        entries);\n\n    return query;\n}\n\nlet query = getQuery();\n\n// 1 active state, as many others as can be bound; at least 2 past states needed\n// for Verlet integration, 1 for Euler integration.\nconst steps = Math.floor(clamp((parseInt(query.get('steps'), 10) || 2+bound),\n    ...limits.steps));\n\nconst stepsPast = steps-bound;\n\nconst scale = Math.floor(clamp((parseInt(query.get('scale'), 10) || niceScale),\n    ...limits.scale));\n\n// Trails of points if given; otherwise trails of lines.\nconst usePoints = query.has('points');\n\n// Fixed time-step if given; otherwise uses look-behind delta-time.\nconst hasTimestep = query.has('timestep');\nconst timestepDef = 1e3/60;\n\nconst timestep = (hasTimestep &&\n    (parseFloat(query.get('timestep'), 10) || timestepDef));\n\nconsole.log(location.search+':\\n', ...([...query.entries()].flat()), '\\n',\n    'steps:', steps, 'scale:', scale, 'timestep:', timestep);\n\n// Set up the links.\n\ndocument.querySelector('#default').href =\n    `?${setQuery([['steps'], ['scale']])}#default`;\n\ndocument.querySelector('#euler').href = `?${setQuery([\n        ['steps', 1+bound], ['scale', Math.max(niceScale, limits.scale[1]-5)]\n    ])}#euler`;\n\ndocument.querySelector('#max').href = `?${setQuery([\n        ['steps', Math.max(limits.steps[0], limits.steps[1]-3)],\n        ['scale', Math.max(niceScale, limits.scale[1]-5)]\n    ])}#max`;\n\ndocument.querySelector('#trails').href =\n    `?${setQuery([['points', ((usePoints)? null : '')]])}#trails`;\n\ndocument.querySelector('#timestep').href =\n    `?${setQuery([['timestep', ((timestep)? null : timestepDef)]])}#timestep`;\n\n// How values/channels map to their derivations.\n\nconst derives = [];\n\nderives[valuesIndex.position] = [\n    // Position, 2 steps past.\n    [Math.min(1, stepsPast-1), valuesIndex.position],\n    // Position, 1 step past.\n    valuesIndex.position,\n    valuesIndex.acceleration,\n    valuesIndex.life\n];\n\nderives[valuesIndex.acceleration] = [\n    valuesIndex.acceleration,\n    valuesIndex.life\n];\n\nderives[valuesIndex.life] = [\n    // Life, oldest step.\n    [Math.max(stepsPast-1, 0), valuesIndex.life],\n    // Life, 1 step past.\n    valuesIndex.life\n];\n\n// Whether to allow Verlet integration.\nconst canVerlet = (stepsPast >= 2);\nconst cache = { source: [] };\n\n// The main GPGPU state.\nconst state = gpgpu(regl, {\n    props: {\n        // Set up the timer.\n        timer: timer((timestep)?\n                // Fixed-step, look-ahead add-time.\n                { step: timestep }\n                // Real-time, look-behind delta-time.\n            :   { step: '-', now: () => regl.now()*1e3 }),\n        // Speed up or slow down the passage of time.\n        rate: 1,\n        // Loop time over this period to avoid instability of parts of the demo.\n        loop: 3e3,\n        // Whether to use Verlet (midpoint) or Euler (forward) integration.\n        useVerlet: canVerlet,\n        // Range of how long a particle lives before respawning.\n        lifetime: [5e2, 3e3],\n        // Acceleration due to gravity.\n        g: [0, -9.80665, 0],\n        // The position particles respawn from.\n        source: [0, 0, 0.5],\n        // To help accuracy of very small numbers, pass force as `[S, T] = SeT`.\n        // One of these chosen for integration used; Euler/Verlet, respectively.\n        forces: [[1, -4], [1, -7]],\n        // To help with accuracy of small numbers, uniformly scale space.\n        scale: 1e-3\n    },\n    bound, steps, scale,\n    maps: { values, derives },\n    // Per-shader macro hooks, no macros needed for the `vert` shader.\n    macros: { vert: false },\n    step: {\n        // Per-pass macros will prepend to `frag` shader and cache in `frags`.\n        frag: stepFrag, frags: [],\n        uniforms: {\n            dt: (_, { props: { timer: { dt }, rate } }) => dt*rate,\n            time: (_, { props: { timer: { time }, rate } }) => time*rate,\n            loop: (_, { props: { timer: { time }, loop } }) =>\n                Math.sin(time/loop*Math.PI)*loop,\n\n            lifetime: regl.prop('props.lifetime'),\n            g: regl.prop('props.g'),\n\n            source: (_, { props: { source, scale } }) =>\n                map((v, i) => v/scale, source, cache.source),\n\n            force: (_, { props: { useVerlet: u, forces: fs } }) => fs[+u],\n            useVerlet: (_, { props: { useVerlet: u } }) => +u\n        }\n    }\n});\n\nconsole.log(self.state = state);\n\nconsole.group('How `values` are `packed` to fit texture channels efficiently');\nconsole.log(state.maps.values, '`values` (referred to by index)');\nconsole.log(state.maps.packed, '`packed` (`values` indexes)');\nconsole.log(...state.maps.textures, '`textures` (`values` indexes)');\nconsole.log(state.maps.valueToTexture, '`valueToTexture` (`textures` indexes)');\nconsole.groupEnd();\n\n// Set up rendering.\n\n// Draw count; note `state.size.count` here equals `countDrawIndexes`.\nconst drawCount = state.size.count*((usePoints)? steps : indexPairs(steps));\nconst drawIndexes = getDrawIndexes(drawCount);\n\nconst drawState = {\n    ...state,\n    // @todo Draw all states with none bound as outputs - currently errors.\n    // bound: 0,\n    // Drawing, don't need to output any data; also don't need `frag` macros.\n    macros: { 'output': 0, 'frag': 0 },\n    // Everything mapped the same way.\n    maps: getMaps({\n        ...state.maps,\n        // Set `derives[0]` to `true`; one set of efficient reads of all values.\n        derives: [true],\n        // This one pass can bind textures for input; not output across passes.\n        texturesMax: maxTextureUnits\n    })\n};\n\nconst drawWidth = 2**3;\n\nconst drawCommand = {\n    // Use GPGPU macro mappings by prepending macros from a single pass.\n    vert: macroPass(drawState)+drawVert,\n    frag: drawFrag,\n    attributes: { index: drawIndexes },\n    // Hook up GPGPU uniforms by adding them here.\n    uniforms: getUniforms(drawState, {\n        ...drawState.step.uniforms,\n        scale: regl.prop('props.scale'),\n        pointSize: clamp(drawWidth, ...pointSizeDims)\n    }),\n    lineWidth: clamp(drawWidth, ...lineWidthDims),\n    count: drawCount,\n    depth: { enable: true },\n    blend: { enable: true, func: { src: 'one', dst: 'one minus src alpha' } },\n    primitive: ((usePoints || steps-drawState.bound < 2)? 'points' : 'lines')\n};\n\nconsole.log((self.drawState = drawState), (self.drawCommand = drawCommand));\n\nconst draw = regl(drawCommand);\n\nconst clearView = { color: [0, 0, 0, 0], depth: 1 };\n\nregl.frame(() => {\n    timer(state.props.timer);\n    state.step.run();\n    drawState.stepNow = state.stepNow;\n    regl.clear(clearView);\n    draw(drawState);\n});\n\n// Toggle Verlet integration, if there are enough past steps.\ncanvas.addEventListener('click', () =>\n    console.log('useVerlet',\n        (state.props.useVerlet = (canVerlet && !state.props.useVerlet))));\n\ncanvas.addEventListener('touchmove', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n});\n\ncanvas.addEventListener((('onpointermove' in self)? 'pointermove'\n        :   (('ontouchmove' in self)? 'touchmove' : 'mousemove')),\n    (e) => {\n        const { clientX: x, clientY: y } = e;\n        const { source } = state.props;\n        const size = Math.min(innerWidth, innerHeight);\n\n        source[0] = ((((x-((innerWidth-size)*0.5))/size)*2)-1);\n        source[1] = -((((y-((innerHeight-size)*0.5))/size)*2)-1);\n\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\nmodule?.hot?.accept?.(() => location.reload());\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import defineProperty from './_define_property';\n\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import arrayWithHoles from './_array_with_holes';\nimport iterableToArrayLimit from './_iterable_to_array';\nimport nonIterableRest from './_non_iterable_rest';\n\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n","import arrayWithoutHoles from './_array_without_holes';\nimport iterableToArray from './_iterable_to_array';\nimport nonIterableSpread from './_non_iterable_spread';\n\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n","module.exports = clamp\n\nfunction clamp(value, min, max) {\n  return min < max\n    ? (value < min ? min : value > max ? max : value)\n    : (value < max ? max : value > min ? min : value)\n}\n","/**\n * Simple time-stepping - frame, real-time, constant-step - via any API.\n */\n\nexport const steps = {\n    diff: '-', dt: '-', '⏳': '-',\n    pause: 0, '⏸': 0,\n    add: '+', '⏭': '+'\n};\n\nexport const stepDef = steps.diff;\nexport const startDef = 0;\nexport const nowDef = { [steps.diff]: Date.now, [steps.add]: 1e3/60 };\n\n/**\n * Sets up properties needed to track time, starts/steps time in various ways:\n * - Time-difference or time-advance stepping.\n * - Step forwards or backwards in time or pause it.\n * - Current time can be a number or function; or the object's fixed time-step.\n * - Override property, pass the result to new objects.\n *\n * @example\n *     // Initial call sets up properties.\n *     const diff0 = timer({ step: '-' }, 200);\n *     // => { step: '-', time: 200, dt: 200 };\n *     const add0 = timer({ step: 200 });\n *     // => { step: 200, time: 200, dt: 200 };\n *\n *     // Subsequent calls advance time and track difference.\n *\n *     // No time difference here.\n *     timer(diff0, 200); // => { step: '-', time: 200, dt: 0 };\n *     timer(add0, 0); // => { step: 200, time: 200, dt: 0 };\n *\n *     // Time-difference here with a change or step, into a new result target.\n *     const diff1 = timer(diff0, 300, {});\n *     // => { step: '-', time: 300, dt: 100 };\n *     const add1 = timer(add0, null, {});\n *     // => { step: 200, time: 400, dt: 200 };\n *\n *     diff1.time-diff0.time === diff1.dt; // => true;\n *     add1.time-add0.time === add1.dt; // => true;\n *\n * @param {object} state The state being tracked.\n * @param {number} [state.time=startDef] The initial time.\n * @param {string|number} [state.step=stepDef] How time advances:\n *     - Difference since last `time`: `'diff'`/`'dt'`/`'-'`/`'⏳'`.\n *     - Pause: `'pause'`/`'⏸'`, or number zero (`0`).\n *     - Add `time` step: `'add'`/`'+'`/`'⏭'`, or non-zero number (step size).\n * @param {number|function} [now] The time now (clock/frame/step/etc), or a\n *     function giving it; if not given, uses `state.step` if numeric or\n *     `nowDef[state.step]` otherwise.\n * @param {object|false} [out=state] The state to set up; modifies `state` if\n *     not given.\n *\n * @returns {object|number} The given `out` set up with its initial `time`; or\n *     if `out` is falsey, returns the relevant calculated unknown value:\n *     - The difference since last `time` for `diff` step.\n *     - The updated `time` for `add` or `pause` step.\n */\nexport function timer(state, now, out = state) {\n    // Get the initial time and step-step.\n    const { time: t0 = startDef, step = stepDef, now: n } = state;\n    // Get the step mode - from a key into `steps` or a numerical value.\n    const s = (steps[step] ?? step);\n    const diff = (s === steps.diff);\n    const t = (now ?? n ?? nowDef[s] ?? s);\n\n    // Step by `s`:\n    // - `0` or falsey to `pause`\n    // - `steps.diff` for difference since last `time`\n    // - `steps.add` or a number to add a `time` step\n    const t1 = ((!s)? t0 : ((diff)? 0 : t0)+((isNaN(t))? t() : t));\n    const dt = t1-t0;\n\n    // If only returning a value, return the relevant calculated unknown.\n    if(!out) { return ((diff)? dt : t1); }\n\n    out.time = t1;\n    out.dt = dt;\n    out.step = step;\n\n    return out;\n}\n\nexport default timer;\n","const r = Array.prototype.reduce;\n\n/**\n * Reduce an array-like list.\n * Similar to native, but with iteratee-first arguments.\n * Supports the native single-argument behaviour.\n *\n * @param {function} f The iteratee function, given standard arguments, and any\n *     given `to`.\n * @param {array} a The list to reduce over (array or array-like list).\n * @param {*} [to] The initial accumulator, if given; otherwise, uses standard\n *     `Array.reduce` behaviour.\n *\n * @returns {*} The result of running the reducer iteratee function over all\n *     elements of the list.\n */\nexport const reduce = (f, a, to) =>\n    // Needs separate `call` because native detects even `undefined` parameter.\n    ((to === undefined)? r.call(a, f) : r.call(a, f, to));\n\nexport default reduce;\n","import { reduce } from './reduce';\n\n/**\n * Map an array-like list.\n * Similar to native, but with iteratee-first arguments; and allows the object\n * into which properties will be mapped to be defined (a new array, by default),\n * avoiding always creating new arrays.\n *\n * @param {function} f The iteratee function, given standard `Array.map`\n *     arguments, and any given `to`.\n * @param {array} a The list to map over (array or array-like list).\n * @param {*} [to=[]] The initial accumulator, if given; `a` if falsey; or a new\n *     array if not given.\n *\n * @returns {*} The result of mapping `to` through the iteratee function over\n *     the `a` list.\n */\nexport const map = (f, a, to = []) => reduce((to, v, i) => {\n        to[i] = f(v, i, a, to);\n\n        return to;\n    },\n    a, (to || a));\n\nexport default map;\n","const e = Array.prototype.forEach;\n\n/**\n * Iterates a function over every element of a list, returning the list.\n *\n * @param {function} f The iteratee function.\n * @param {array} a A list to iterate over (array or array-like object).\n *\n * @returns {array} The given list.\n */\nexport const each = (f, a) => {\n    e.call(a, f);\n\n    return a;\n}\n\nexport default each;\n","/**\n * GPGPU state-stepping: maps minimal draw passes, shaders, GL resources,\n * inputs, outputs. BYORenderer.\n *\n * Rendering approach/engine specific, decoupled from the physics code.\n * The modules and many hooks may be used as given, or piecemeal, or overridden.\n */\n\nimport { getMaps } from './maps';\nimport { getState } from './state';\nimport { getStep } from './step';\n\nexport * from './const';\n\n/**\n * Sets up all the maps, inputs, resources, etc for a GPGPU process.\n *\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [mapSamples]{@link ./maps.js#mapSamples}\n * @see [getState]{@link ./step.js#getState}\n * @see [getUniforms]{@link ./step.js#getUniforms}\n * @see [getStep]{@link ./step.js#getStep}\n * @see [macroPass]{@link ./macros.js#macroPass}\n *\n * @param {object} api An API for GL resources. See `getState` and `getStep`.\n * @param {object} [api.limits=api] A map of GL resource limits.\n * @param {number} [api.limits.maxDrawbuffers] The maximum number of GL textures\n *     a framebuffer can bind in a single draw call.\n * @param {object} [state={}] State properties to set up; a new object by\n *     default. See `getState`, `getUniforms`, and `getStep`.\n * @param {object} [state.maps] How values are grouped per-texture per-pass\n *     per-step. Sets up new maps if not given or missing its mapped properties.\n *     See `mapGroups`.\n * @param {number} [state.maps.texturesMax=api.limits.maxDrawbuffers] The\n *     maximum number of textures to use per draw pass. Uses more passes above\n *     this limit.\n * @param {object} [to=state] The state object to set up. Modifies the given\n *     `state` object by default.\n */\nexport function gpgpu(api, state = {}, to = state) {\n    const { maxDrawbuffers: texturesMax, glsl } = (api.limits ?? api);\n    const { maps = {} } = state;\n\n    to.glsl = parseFloat(glsl.match(/[0-9\\.]+/)[0]);\n    maps.texturesMax ??= texturesMax;\n    to.maps = getMaps(maps);\n    getState(api, state, to).step = getStep(api, state);\n\n    return to;\n}\n\nexport default gpgpu;\n","/**\n * GPGPU mappings for step/draw shaders input/output.\n *\n * These maps show shaders how to make use of a system's supported features, how\n * to pack/unpack their data with framebuffers/textures, perform only the needed\n * texture samples to retrieve any past values they must derive from, etc.\n * Shaders may declare values they output, values they derive from, groupings of\n * in/dependent values - without handling how these concerns map to the\n * particular system resources they're using.\n * System limits/features/extensions are accounted for, to produce the most\n * efficient mappings available with the least I/O when it comes to drawing\n * (draw passes, texture samples, etc).\n *\n * @todo Check `packValues` optional and/or based on the given `derives` work.\n * @todo Update examples.\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport each from '@epok.tech/fn-lists/each';\n\nimport { valuesDef, channelsMaxDef, texturesMaxDef } from './const';\n\nexport const cache = { packed: [] };\n\nexport const validValue = (value, channelsMax = channelsMaxDef) =>\n    (((1 <= value) && (value <= channelsMax)) ||\n        !!console.error(`\\`gl-gpgpu\\`: the given value (${value}) exceeds the `+\n            `range of channels available (1 to ${channelsMax}).`,\n            value, channelsMax));\n\n/**\n * Minimise resource usage, order `values` to pack into blocks of `channelsMax`.\n *\n * @see mapGroups\n *\n * @param {array<number>} values Each entry is how many co-dependent channels\n *     are grouped into one texture in one pass, separate entries may be in one\n *     or more textures/passes. See `mapGroups`.\n * @param {number} [channelsMax=channelsMaxDef] The maximum number of channels\n *     per texture. See `mapGroups`.\n * @param {array} [to=[]] An array to store the result; a new array by default.\n *\n * @returns {array<number>} `to` The indexes of the given `values`, reordered\n *     to pack into the fewest buckets of `channelsMax` size or less; stored in\n *     the given `to` array.\n */\nexport function packValues(values, channelsMax = channelsMaxDef, to = []) {\n    map((_, i) => i, values, to).length = values.length;\n\n    // Counts the number of empty channels in the current group.\n    let channels = channelsMax;\n    // How many values have already been packed.\n    let packed = 0;\n    // Tracks the value that best fits the free channels (fills it tightest).\n    let fitIndex = 0;\n    let fitSize = Infinity;\n\n    for(let i = 0; packed < values.length;) {\n        const v = packed+i;\n        const value = values[to[v]];\n\n        if(!validValue(value, channelsMax)) { return to; }\n\n        // Check how value fits the channels - valid is >= 0, perfect is 0.\n        const fit = channels-value;\n\n        if((fit >= 0) && (fit < fitSize)) {\n            fitSize = fit;\n            fitIndex = v;\n        }\n\n        if((fitSize !== 0) && (v < values.length-1)) { ++i; }\n        else {\n            // Got a perfect fit or the search ended - swap in best fit value.\n            const pack = to[fitIndex];\n\n            to[fitIndex] = to[packed];\n            to[packed] = pack;\n\n            // Reduce the free channels by the best value, reset if needed.\n            (((channels -= values[pack]) > 0) || (channels = channelsMax));\n            // Start the search again over the remaining unpacked entries.\n            fitIndex = ++packed;\n            fitSize = Infinity;\n            i = 0;\n        }\n    }\n\n    return to;\n}\n\n/**\n * Groups the `values` of GPGPU data items across draw passes and data textures.\n *\n * @todo Now `values` may be packed first into buckets of `channelsMax` tightly\n *     before mapping, check whether the examples are correct.\n *\n * @example\n *     mapGroups({ values: [2, 4, 1], channelsMax: 4, texturesMax: 1 }); // =>\n *     {\n *         values: [2, 4, 1],\n *         textures: [[0], [1], [2]], // length === 3\n *         passes: [[0], [1], [2]], // length === 3\n *         texturesMax: 1,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 2],\n *         valueToPass: [0, 1, 2],\n *         textureToPass: [0, 1, 2]\n *     };\n *\n *     mapGroups({ values: [4, 2, 1], texturesMax: 1 }); // =>\n *     {\n *         values: [4, 2, 1],\n *         textures: [[0], [1, 2]], // length === 2\n *         passes: [[0], [1]], // length === 2\n *         texturesMax: 1,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 1],\n *         valueToPass: [0, 1, 1],\n *         textureToPass: [0, 1]\n *     };\n *\n *     mapGroups({ values: [4, 2, 1], texturesMax: 4 }); // =>\n *     {\n *         values: [4, 2, 1],\n *         textures: [[0], [1, 2]], // length === 2\n *         passes: [[0, 1]], // length === 1\n *         texturesMax: 4,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 1],\n *         valueToPass: [0, 0, 0],\n *         textureToPass: [0, 0]\n *     };\n *\n *     mapGroups({ values: [2, 4, 1], texturesMax: 4 }); // =>\n *     {\n *         values: [2, 4, 1],\n *         textures: [[0], [1], [2]], // length === 3\n *         passes: [[0, 1, 2]], // length === 1\n *         texturesMax: 4,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 2],\n *         valueToPass: [0, 0, 0],\n *         textureToPass: [0, 0, 0]\n *     };\n *\n *     mapGroups({ values: [2, 4, 1, 2], texturesMax: 2 }); // =>\n *     {\n *         values: [2, 4, 1, 2],\n *         textures: [[0], [1], [2, 3]], // length === 3\n *         passes: [[0, 1], [2]], // length === 2\n *         texturesMax: 2,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 2, 2],\n *         valueToPass: [0, 0, 1, 1],\n *         textureToPass: [0, 0, 1]\n *     };\n *\n * @see packValues\n *\n * @export\n * @param {object} [maps={}] The maps. A new object if not given.\n * @param {array<number>} [maps.values=valuesDef()] An array where each number\n *     denotes how many value channels are grouped into one data texture in one\n *     draw pass; each separate number may be drawn across one or more data\n *     textures/passes. Each value denotes the number of dependent channels to\n *     be drawn together; separate values denote channels that aren't dependent,\n *     and may be drawn in the same or a separate pass, depending on device\n *     support. The given order is (currently) maintained, and may affect the\n *     number of passes/textures used. Where the next state depends on previous\n *     states, these should ideally be an entry of `channels` or less, for\n *     fewest texture reads to retrieve previous states.\n * @param {number} [maps.channelsMax=channelsMaxDef] Maximum channels per\n *     texture.\n * @param {number} [maps.texturesMax=texturesMaxDef] Maximum textures bound per\n *     pass.\n * @param {array<number>|falsey} [maps.packed] An array of indexes into `values`\n *     packed into an order that best fits into blocks of `channelsMax` to\n *     minimise resources; or `falsey` to use `values` in their given order;\n *     uses `packValues` if not given.\n * @param {object} [to=maps] An object to contain the results; modifies `maps`\n *     if not given.\n *\n * @returns {object} `to` The given `to` object; how `values` are grouped\n *     per-texture per-pass per-step, meta information, and given parameters.\n * @returns {array<array<number>>} `to.passes` Textures grouped into passes;\n *     arrays corresponding to framebuffers in separate draw passes; whose\n *     values are indexes into `to.textures`.\n * @returns {array<array<number>>} `to.textures` Values grouped into\n *     textures; arrays corresponding to framebuffer attachments, into which\n *     `values` are drawn; whose values are indexes into `to.values`.\n * @returns {array<number>} `to.values` The `values`, as given.\n * @returns {number} `to.texturesMax` The max textures per pass, as given.\n * @returns {number} `to.channelsMax` The max channels per texture, as given.\n * @returns {array<number>} `to.valueToTexture` Inverse map from each index of\n *     `to.values` to the index of the data texture containing it.\n * @returns {array<number>} `to.valueToPass` Inverse map from each index of\n *     `to.values` to the index of the pass containing it.\n * @returns {array<number>} `to.textureToPass` Inverse map from each index of\n *     `to.textures` to the index of the pass containing it.\n */\nexport function mapGroups(maps = {}, to = maps) {\n    if(!maps) { return to; }\n\n    const {\n            values = valuesDef(),\n            channelsMax = channelsMaxDef, texturesMax = texturesMaxDef,\n            // Pack `values` into blocks of `channelsMax` to minimise resources.\n            packed = packValues(values, channelsMax, cache.packed)\n        } = maps;\n\n    to.values = values;\n    to.texturesMax = texturesMax;\n    to.channelsMax = channelsMax;\n    to.packed = packed;\n\n    const passes = to.passes = [[]];\n    const textures = to.textures = [[]];\n    const valueToTexture = to.valueToTexture = [];\n    const valueToPass = to.valueToPass = [];\n    const textureToPass = to.textureToPass = [];\n    // Counts the number of channels written in a single draw pass.\n    let channels = 0;\n    // Get the value, via `packed` if valid, or directly as given in `values`.\n    const getValue = ((packed)? ((_, i) => values[i]) : ((v) => v));\n    const getIndex = ((packed)? ((i) => packed[i]) : ((i) => i));\n\n    return reduce((to, v, i) => {\n            const index = getIndex(i);\n            const value = getValue(v, index);\n\n            if(!validValue(value, channelsMax)) { return to; }\n\n            let p = passes.length-1;\n            let pass = passes[p];\n            let t = textures.length-1;\n            let texture = textures[t];\n\n            if((channels += value) > channelsMax) {\n                channels = value;\n                t = textures.push(texture = [])-1;\n\n                ((pass.length >= texturesMax) &&\n                    (p = passes.push(pass = [])-1));\n\n                pass.push(t);\n                textureToPass.push(p);\n            }\n            else if(pass.length === 0) {\n                pass.push(t);\n                textureToPass.push(p);\n            }\n\n            texture.push(index);\n            valueToTexture[index] = t;\n            valueToPass[index] = p;\n\n            return to;\n        },\n        values, to);\n}\n\n/**\n * Maps the minimal set of texture reads to derive the next state of values from\n * a past state of values they depend upon.\n *\n * @example\n *     const maps = mapGroups({\n *         values: [2, 4, 1, 2], channelsMax: 4, texturesMax: 2,\n *         // Entries per-value of derived step/value indexes, entries include:\n *         // empty, single, multiple, and defined step samples.\n *         derives: [[1, 0], , [3, [1, 0]], 2]\n *     });\n *\n *     mapSamples(maps); // =>\n *     {\n *         ...maps,\n *         // Per-pass, minimum texture samples for values.\n *         samples: [\n *             // Per-value - step/texture index pairs into `maps.textures`.\n *             [[0, 1], [0, 0]],\n *             [[0, 2], [1, 0]]\n *         ],\n *         // Per-pass, value indexes to texture samples.\n *         reads: [\n *             // Per-value - indexes into `to.samples`.\n *             [[0, 1], , , ],\n *             [, , [0, 1], [0]]\n *         ]\n *     };\n *\n * @see mapGroups\n *\n * @export\n * @param {object} maps How values are grouped per-texture per-pass per-step.\n *     See `mapGroups`.\n * @param {true|array<null,true,number,array<true,number,array<true,number>>>}\n *     [maps.derives] How values derive from others.\n *     If given as an array, each entry relates the corresponding value to\n *     any past value steps/indexes it derives from - a value not derived from\n *     past values may have an empty/null entry; a value derives from past\n *     values where its entry has:\n *     - Numbers; deriving from the most recent state at the given value index.\n *     - Lists of numbers; deriving from the given past state index (1st number\n *         denotes how many steps ago), at the given value index (2nd number).\n *     If any level is given as `true`, maps to sample all values, at the given\n *     or most recent step.\n *     If not given, no samples are mapped and `to` is returned unchanged.\n * @param {array<array<number>>} maps.passes Textures grouped into passes. See\n *     `mapGroups`.\n * @param {array<array<number>>} maps.textures Values grouped into textures. See\n *     `mapGroups`.\n * @param {array<number>} maps.valueToTexture Inverse map from each value index\n *     to the data texture index containing it.\n * @param {object} [to=maps] The object to store the result in; `maps` if not\n *     given.\n *\n * @returns {object} `to` The given `to` object, with resulting maps added if\n *     `maps.derives` were provided.\n * @returns {array<array<array<number>>>} `[to.samples]` Map of the minimum\n *     set of indexes into `maps.textures` that need to be sampled per-pass,\n *     to get all `derives` needed for each value of `maps.values` of each\n *     pass of `maps.passes`.\n * @returns {array<array<null,array<number>>>} `[to.reads]` Sparse map from\n *     each value of `derives` to its step and texture indexes in `to.samples`.\n * @returns {true|array<null,true,number,array<true,number,array<true,number>>>}\n *     `[to.derives]` How values are derived, as given.\n */\nexport function mapSamples(maps, to = maps) {\n    const derives = maps?.derives;\n\n    if(!derives) { return to; }\n\n    const { passes, textures, valueToTexture } = maps;\n    const reads = to.reads = [];\n    const cache = {};\n\n    to.derives = derives;\n\n    const all = (step = 0) =>\n        cache[step] ??= map((t, v) => [step, v], valueToTexture);\n\n    const getAddSample = (pass, value) => function add(set, derive, d) {\n        let step = 0;\n        let texture;\n\n        if(derive === true) { return reduce(add, all(step), set); }\n        else if(Number.isFinite(derive)) { texture = valueToTexture[derive]; }\n        else if(derive[1] === true) { return reduce(add, all(derive[0]), set); }\n        else {\n            step = derive[0];\n            texture = valueToTexture[derive[1]];\n        }\n\n        if(!Number.isFinite(step) || !Number.isFinite(texture)) {\n            return console.error('`mapSamples`: invalid map for sample',\n                derives, maps, pass, value, derive, d, step, texture);\n        }\n\n        let i = set.findIndex(([s, t]) => (s === step) && (t === texture));\n\n        ((i < 0) && (i = set.push([step, texture])-1));\n\n        const passReads = reads[pass] ??= [];\n        const valueReads = passReads[value] ??= [];\n\n        valueReads[d ?? 0] = i;\n\n        return set;\n    };\n\n    const getAddSamples = (pass) => (set, value) => {\n        const valueDerives = ((derives === true)? derives : derives[value]);\n\n        ((valueDerives || (valueDerives === 0)) &&\n            (((valueDerives === true) || Number.isFinite(valueDerives))?\n                getAddSample(pass, value)(set, valueDerives)\n            :   reduce(getAddSample(pass, value), valueDerives, set)));\n\n        return set;\n    }\n\n    to.samples = map((pass, p) => reduce((set, texture) =>\n                reduce(getAddSamples(p), textures[texture], set),\n            pass, []),\n        passes, []);\n\n    return to;\n}\n\nexport const getMaps = (maps, to = maps) =>\n    mapSamples(maps, mapGroups(maps, to));\n\nexport default getMaps;\n","/**\n * GPGPU defaults and constants.\n */\n\nimport { positions } from '@epok.tech/gl-screen-triangle';\n\nexport { default as vertDef }\n    from '@epok.tech/gl-screen-triangle/uv-texture.vert.glsl';\n\n// The required and optional GL extensions for a GPGPU state.\n\nexport const extensions = () => [];\n\n// To draw to `float` buffers.\nexport const extensionsFloat = () =>\n    ['oes_texture_float', 'webgl_color_buffer_float'];\n\n// To draw to `half float` buffers.\nexport const extensionsHalfFloat = () =>\n    ['oes_texture_half_float', 'ext_color_buffer_half_float'];\n\nexport const optionalExtensions = () => ['webgl_draw_buffers'];\n\n/**\n * Default properties for GPGPU and GL capabilities and resources.\n */\n\n// Prefix namespace to avoid naming clashes.\nexport const preDef = '';\n\n// The allowable range of channels for framebuffer attachments.\n// Default avoids `RGB32F` framebuffer attachments, which errors on\n// Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1448632\nexport const channelsMinDef = 4;\nexport const channelsMaxDef = 4;\n\nexport const texturesMaxDef = 1;\nexport const boundDef = 1;\nexport const scaleDef = 10;\nexport const stepsDef = 2;\nexport const valuesDef = () => [channelsMaxDef];\nexport const positionsDef = () => [...positions];\n\n// Resource format defaults.\nexport const typeDef = 'float';\nexport const minDef = 'nearest';\nexport const magDef = 'nearest';\nexport const wrapDef = 'clamp';\nexport const depthDef = false;\nexport const stencilDef = false;\n","/**\n * The 3 vertices of a 2D triangle covering the viewport in NDC coordinates ([-1, 1]).\n *\n * @export\n * @type {array.<array.<number>>}\n */\nexport const vertices = [[-1, -1], [-1, 4], [4, -1]];\n\nexport const count = vertices.length;\nexport const dim = 2;\n\n/**\n * The flat array of the above triangle, to be bound as a WebGL attribute buffer for\n * rendering the triangle in the vertex shader.\n * These positions will result in clipped NDC coordinates ([-1, 1]) over the\n * viewport's width and height.\n *\n * @export\n * @type {array.<number>}\n */\nexport const positions = vertices.flat();\n\nexport default positions;\n","precision highp float;\n\nattribute vec2 position;\n\nvarying vec2 uv;\n\n// Translation for UV NDC to texture coordinates.\nconst vec2 offset = vec2(0.5);\n\nvoid main() {\n    uv = (position*0.5)+offset;\n    gl_Position = vec4(position, 0, 1);\n}\n","/**\n * GPGPU state and GL resources.\n *\n * @todo Update examples.\n * @todo In-place updates of complex resources and meta info.\n * @todo Use transform feedback instead of data textures, if supported (WebGL2)?\n * @todo Consider class/object/data/function structure further.\n */\n\nimport range from '@epok.tech/fn-lists/range';\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\n\nimport {\n        scaleDef, stepsDef, valuesDef, channelsMinDef,\n        typeDef, minDef, magDef, wrapDef, depthDef, stencilDef\n    } from './const';\n\n/**\n * Set up the GPGPU resources and meta information for a state of a number data.\n *\n * @todo Transform feedback.\n * @todo Validate, check examples.\n * @todo Reorder the given `values` into the most efficient `maps`?\n *\n * @example\n *     const state = {\n *         steps: 2, maps: mapGroups({ values: [4, 2, 3], texturesMax: 4 })\n *     };\n *\n *     getState(api, state); // =>\n *     {\n *         ...state, passNow: undefined, stepNow: undefined,\n *         size: {\n *             type: 'float', steps: 2, passes: 2, textures: 6,\n *             width: 1024, height: 1024, shape: [1024, 1024], count: 1048576\n *         },\n *         steps: [[api.framebuffer], [api.framebuffer]],\n *         passes: [\n *             [\n *                 {\n *                     step: 0, index: 0, entry: 0, map: [0, 1, 2],\n *                     framebuffer: api.framebuffer,\n *                     textures: [api.texture, api.texture, api.texture]\n *                 }\n *             ],\n *             [\n *                 {\n *                     step: 1, index: 0, entry: 1, map: [0, 1, 2],\n *                     framebuffer: api.framebuffer,\n *                     textures: [api.texture, api.texture, api.texture]\n *                 }\n *             ]\n *         ],\n *         textures: [\n *             [\n *                 {\n *                     step: 0, pass: 0, index: 0, entry: 0, map: [0],\n *                     texture: api.texture\n *                 },\n *                 {\n *                     step: 0, pass: 0, index: 1, entry: 1, map: [1],\n *                     texture: api.texture\n *                 },\n *                 {\n *                     step: 0, pass: 0, index: 2, entry: 2, map: [2],\n *                     texture: api.texture\n *                 }\n *             ],\n *             [\n *                 {\n *                     step: 1, pass: 0, index: 0, entry: 3, map: [0],\n *                     texture: api.texture\n *                 },\n *                 {\n *                     step: 1, pass: 0, index: 1, entry: 4, map: [1],\n *                     texture: api.texture\n *                 },\n *                 {\n *                     step: 1, pass: 0, index: 2, entry: 5, map: [2],\n *                     texture: api.texture\n *                 }\n *             ]\n *         ]\n *     };\n *\n *     Object.assign(state, {\n *         type: 'uint8', stepNow: 2,\n *         maps: mapGroups({ values: [4, 2, 3], texturesMax: 1 })\n *     });\n *\n *     getState(api, state); // =>\n *     {\n *        ...state, passNow: undefined, stepNow: 2,\n *        size: {\n *            type: 'uint8', steps: 2, passes: 6, textures: 6,\n *            width: 1024, height: 1024, shape: [1024, 1024], count: 1048576\n *        },\n *        steps: [\n *            [api.framebuffer, api.framebuffer, api.framebuffer],\n *            [api.framebuffer, api.framebuffer, api.framebuffer]\n *        ],\n *        passes: [\n *            [\n *                {\n *                    step: 0, index: 0, entry: 0, map: [0],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                },\n *                {\n *                    step: 0, index: 1, entry: 1, map: [1],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                },\n *                {\n *                    step: 0, index: 2, entry: 2, map: [2],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                }\n *            ],\n *            [\n *                {\n *                    step: 1, index: 0, entry: 3, map: [0],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                },\n *                {\n *                    step: 1, index: 1, entry: 4, map: [1],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                },\n *                {\n *                    step: 1, index: 2, entry: 5, map: [2],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                }\n *            ]\n *        ],\n *        textures: [\n *            [\n *                {\n *                    step: 0, pass: 0, index: 0, entry: 0, map: [0],\n *                    texture: api.texture\n *                },\n *                {\n *                    step: 0, pass: 1, index: 1, entry: 1, map: [1],\n *                    texture: api.texture\n *                },\n *                {\n *                    step: 0, pass: 2, index: 2, entry: 2, map: [2],\n *                    texture: api.texture\n *                }\n *            ],\n *            [\n *                {\n *                    step: 1, pass: 0, index: 0, entry: 3, map: [0],\n *                    texture: api.texture\n *                },\n *                {\n *                    step: 1, pass: 1, index: 1, entry: 4, map: [1],\n *                    texture: api.texture\n *                },\n *                {\n *                    step: 1, pass: 2, index: 2, entry: 5, map: [2],\n *                    texture: api.texture\n *                }\n *            ]\n *        ]\n *    };\n *\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [mapSamples]{@link ./maps.js#mapSamples}\n * @see [getStep]{@link ./step.js#getStep}\n * @see [macroPass]{@link ./macros.js#macroPass}\n *\n * @export\n * @param {object} api The API for GL resources.\n * @param {function} api.texture A function to create a GL texture.\n * @param {function} api.framebuffer A function to create a GL framebuffer.\n * @param {object} [state={}] The state parameters.\n * @param {number} [state.radius] The length of the sides of the data textures\n *     to allocate. If given, supersedes the `state` `width`/`height`/`scale`.\n * @param {number} [state.width] The width of the data textures to allocate.\n *     If given, supersedes `state.scale`.\n * @param {number} [state.height] The height of the data textures to allocate.\n *     If given, supersedes `state.scale`.\n * @param {number} [state.scale=scaleDef] The length of the data textures sides\n *     to allocate; gives a square power-of-two texture raising 2 to this power.\n * @param {number|array} [state.steps=stepsDef] How many steps of state to\n *     track, or the list of states if already set up.\n * @param {object} [state.maps] How `state.maps.values` are grouped per-texture\n *     per-pass per-step. See `mapGroups`.\n * @param {array<number>} [state.maps.values=valuesDef()] How values of each\n *     data item may be grouped into textures across passes. Set up here if not\n *     given. See `mapGroups`.\n * @param {number} [state.maps.channelsMin=channelsMinDef] The minimum allowed\n *     channels for framebuffer attachments. Sets up unused channels as needed\n *     to reach this limit.\n * @param {number} [state.maps.textures] How values are grouped into textures.\n *     See `mapGroups`.\n * @param {string} [state.type=typeDef] The data type of the textures.\n * @param {number} [state.stepNow] The currently active state step, if any.\n * @param {number} [state.passNow] The currently active draw pass, if any.\n * @param {object} [to=state] The state object to set up. Modifies the given\n *     `state` object by default.\n *\n * @returns {object} `to` The state object, set up with the data resources and\n *     meta information, for step/draw later:\n * @returns {object<number,array<number,array<number>>>} `to.maps` Any given\n *     `state.maps`. See `mapGroups`.\n * @returns {array<array<object<api.texture,number,array<number>>>>}\n *     `to.textures` Textures per step, as arrays of objects of `api.texture`,\n *     and meta info. See `to.maps.textures`.\n * @returns {array<array<object<api.framebuffer,number,array<number>>>>}\n *     `to.passes` Passes per step, as arrays of objects of `api.framebuffer`,\n *     referencing `to.textures`, and meta info. See `to.maps.passes`.\n * @returns {array<api.framebuffer<array<api.texture>>>} `to.steps`\n *     Hierarchy of steps of state, as an array of `api.framebuffer` from\n *     `to.passes`, with arrays of `api.texture` from `to.textures`, and meta\n *     information; set up here, or the given `state.steps` if it was an array.\n *     State data may be drawn into the framebuffers accordingly.\n *     See `mapGroups` and `getStep`.\n * @returns {object<number,string,array<number>>} `to.size` Size/type\n *     information on data resources.\n * @returns {number} `to.stepNow` The currently active state step, as given.\n * @returns {number} `to.passNow` The currently active draw pass, as given.\n */\nexport function getState(api, state = {}, to = state) {\n    // See usage here for what the API must implement.\n    const { texture, framebuffer } = api;\n\n    const {\n            radius, width: w, height: h, scale = scaleDef, steps = stepsDef,\n            stepNow, passNow, maps,\n            // Resource format settings.\n            type = typeDef, min = minDef, mag = magDef, wrap = wrapDef,\n            depth = depthDef, stencil = stencilDef\n        } = state;\n\n    to.maps = maps;\n    to.stepNow = stepNow;\n    to.passNow = passNow;\n\n    const {\n            values = valuesDef(),\n            channelsMin = channelsMinDef, textures: texturesMap\n        } = maps;\n\n    maps.channelsMin = channelsMin;\n    maps.values = values;\n\n    // Passing `state.scale` ensures a power-of-two square texture size.\n    const width = (radius ?? w ?? 2**scale);\n    const height = (radius ?? h ?? 2**scale);\n    const textureProps = { type, min, mag, wrap, width, height };\n    const frameProps = { depth, stencil, width, height };\n\n    // Size of the created resources.\n    const size = to.size = {\n        steps: (steps.length ?? steps), textures: 0, passes: 0,\n        width, height, shape: [width, height], count: width*height\n    };\n\n    const textures = to.textures = [];\n    const passes = to.passes = [];\n\n    const addTexture = (step, pass, props) => (index) =>\n        ((textures[step] ??= [])[index] = {\n            // Meta info.\n            ...props,\n            entry: size.textures++, step, pass, index, map: texturesMap[index],\n            // Resources.\n            texture: texture(props)\n        })\n        .texture;\n\n    const addPass = (step) => (pass, index) => {\n        // All framebuffer color attachments need the same number of channels.\n        const passProps = {\n            ...textureProps,\n            channels: reduce((max, t) =>\n                    reduce((max, v) => Math.max(max, values[v]),\n                        texturesMap[t], max),\n                pass, channelsMin)\n        };\n\n        const textures = map(addTexture(step, index, passProps), pass);\n\n        return ((passes[step] ??= [])[index] = {\n                // Meta info.\n                ...frameProps, entry: size.passes++, step, index, map: pass,\n                // Resources.\n                textures, color: textures,\n                framebuffer: framebuffer({ ...frameProps, color: textures })\n            })\n            .framebuffer;\n    };\n\n    // Set up resources we'll need to store data per-texture per-pass per-step.\n    to.steps = map((passes, step) =>\n            // Use any given passes or create a new list of them.\n            (passes || map(addPass(step), maps.passes)),\n        // Use any given steps or create a new list of them.\n        ((Number.isFinite(steps))? range(steps) : steps), 0);\n\n    return to;\n}\n\nexport default getState;\n","/**\n * Creates an iterable array of the given length of empty entries, or those\n * given by optional arguments to `Array.fill`.\n *\n * @see Array.constructor\n * @see Array.fill\n *\n * @param {number} n The number of elements to create.\n * @param {*} [value] A value to fill the array with; for `Array.fill`.\n * @param {number} [start=0] Start index, inclusive; for `Array.fill`.\n * @param {number} [end=n] End index, exclusive; for `Array.fill`.\n *\n * @returns {array} An array of the given number of empty elements.\n */\nexport const range = (n, value, start, end) =>\n    Array(Math.floor(n)).fill(value, start, end);\n\nexport default range;\n","/**\n * GPGPU update step.\n */\n\nimport each from '@epok.tech/fn-lists/each';\nimport { wrapGet } from '@epok.tech/fn-lists/wrap-index';\n\nimport { macroPass } from './macros';\nimport { getUniforms } from './inputs';\nimport { vertDef, positionsDef, preDef } from './const';\n\nconst scale = { vec2: 0.5 };\n\n/**\n * Creates a GPGPU update step function, for use with a GPGPU state object.\n *\n * @todo Optional transform feedback instead of GPGPU textures, where available\n *     (needs vertex draw, instead of texture draw).\n * @todo Make this fully extensible in state.\n *\n * @see [getState]{@link ./state.js#getState}\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [macroPass]{@link ./macros.js#macroPass}\n * @see [getUniforms]{@link ./inputs.js#getUniforms}\n *\n * @export\n * @param {object} api An API for GL resources.\n * @param {function} api.buffer A function to set up a GL buffer.\n * @param {function} api.command A function to call a GL draw, with all options.\n * @param {object} state The GPGPU state to use. See `getState` and `mapGroups`.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @returns {array<array<number>>} `to.passes` How textures are grouped into\n *     passes. See `mapGroups`.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n * @param {object} [state.step=to] The properties for the step GL command.\n * @param {string} [state.step.vert=vertDef] The step vertex shader GLSL; a\n *     simple flat screen shader if not given.\n * @param {string} state.step.frag The step fragment shader GLSL.\n * @param {object} [state.step.uniforms=getUniforms(state)] The step uniforms;\n *     modifies any given. See `getUniforms`.\n * @param {array|api.buffer} [state.step.positions=positionsDef()] The step\n *     position attributes; 3 points of a large flat triangle if not given.\n * @param {number} [state.step.count=state.step.positions.length*scale.vec2] The\n *     number of elements/attributes to draw.\n * @param {array} [state.step.verts] Preprocesses and caches vertex GLSL code\n *     per-pass if given, otherwise processes it just-in-time before each pass.\n * @param {array} [state.step.frags] Preprocesses and caches fragment GLSL code\n *     per-pass, otherwise processes it just-in-time before each pass.\n * @param {object} [to=(state.step ?? {})] The results object; `state.step` or\n *     a new object if not given.\n *\n * @returns {object} `to` The given `to` object; containing a GPGPU update\n *     step function and related properties, to be passed a GPGPU state.\n * @returns {string} `to.vert` The given/new `state.vert` vertex shader GLSL.\n * @returns {string} `to.frag` The given `state.frag` fragment shader GLSL.\n * @returns {array.string} `[to.verts]` Any cached pre-processed vertex shaders\n *     GLSL, if `state.step.verts` was given.\n * @returns {array.string} `[to.frags]` Any cached pre-processed fragment\n *     shaders GLSL, if `state.step.verts` was enabled.\n * @returns {object} `to.uniforms` The given `state.uniforms`.\n * @returns {number} `to.count` The given/new `state.count`.\n * @returns {api.buffer} `to.positions` The given/new `state.positions`; passed\n *     through `api.buffer`.\n * @returns {api.command} `to.pass` A GL command function to draw a given pass.\n * @returns {function} `to.run` The main step function, which performs all the\n *     draw pass GL commands for a given state step.\n */\nexport function getStep(api, state, to = (state.step ?? {})) {\n    const { buffer, command = api } = api;\n    const { maps: { passes }, pre = preDef, step = to } = state;\n    let { positions = positionsDef() } = step;\n\n    const {\n            passCommand, vert = vertDef, verts, frag, frags, uniforms,\n            count = positions.length*scale.vec2\n        } = step;\n\n    to.vert = vert;\n    to.frag = frag;\n    to.uniforms = getUniforms(state, uniforms);\n    to.count = count;\n    positions = to.positions = buffer(positions);\n\n    if(verts || frags) {\n        // Pre-process the shaders needed for all the passes.\n        const stateCache = { ...state };\n\n        (verts && (to.verts = verts));\n        (frags && (to.frags = frags));\n\n        each((pass, p) => {\n                stateCache.passNow = p;\n                (verts && (verts[p] = macroPass(stateCache, 'vert')+vert));\n                (frags && (frags[p] = macroPass(stateCache, 'frag')+frag));\n            },\n            passes);\n    }\n\n    to.pass = command(to.passCommand = {\n        // Uses the full-screen vertex shader state by default.\n        vert(_, props) {\n            const { passNow: p, step } = props;\n            const { vert: v = vert, verts: vs = verts } = step;\n\n            // Specify the shader type, for per-shader macro hooks.\n            return vs?.[p] ?? macroPass(props, 'vert')+v;\n        },\n        frag(_, props) {\n            const { passNow: p, step } = props;\n            const { frag: f = frag, frags: fs = frags } = step;\n\n            // Specify the shader type, for per-shader macro hooks.\n            return fs?.[p] ?? macroPass(props, 'frag')+f;\n        },\n        attributes: {\n            [pre+'position']: (_, { step: { positions: p = positions } }) => p\n        },\n        uniforms, count,\n        depth: { enable: false },\n        framebuffer: (_, { steps: ss, stepNow: s, passNow: p }) =>\n            wrapGet(s, ss)[p],\n        ...passCommand\n    });\n\n    to.run = (props = state) => {\n        const { steps, step, maps: { passes } } = props;\n        const stepNow = props.stepNow = (props.stepNow+1 || 0);\n        const { pass, onPass, onStep } = step;\n\n        onStep?.(props, wrapGet(stepNow, steps));\n\n        each((passProps, p) => {\n                props.passNow = p;\n                pass(onPass?.(props, passProps) ?? props);\n            },\n            passes);\n\n        return props;\n    };\n\n    return to;\n}\n\nexport default getStep;\n","/**\n * Wraps an index within a given length, so that indexes greater than the length\n * loop back past 0, and indexes less than 0 loop backward from the length.\n * Similar to the indexing behaviour of `Array.slice`.\n *\n * @param {number} i The index to wrap.\n * @param {number} l The length to wrap the index within.\n *\n * @returns {number} The index wrapped within the length.\n */\nexport const wrapIndex = (i, l) => ((i%l)+l)%l;\n\n/**\n * Gives the entry at a wrapped index of a given list, never exceeds its bounds.\n *\n * @see wrapIndex\n *\n * @param {number} i The index to wrap.\n * @param {array} a A list to index (array or array-like list).\n * @param {number} a.length The length property of the given list.\n *\n * @returns {*} The entry at the wrapped index of the given list.\n */\nexport const wrapGet = (i, a) => a[wrapIndex(i, a.length)];\n\nexport const wrap = { index: wrapIndex, get: wrapGet };\n\nexport default wrap;\n","/**\n * GPGPU GLSL preprocessor macros for each part of the state.\n *\n * Careful defining these, as each set of different macros will result in new\n * shaders and compilations, missing the cache here and in the rendering system.\n * So, as few unique macros as possible should be created for a given set of\n * inputs, for efficiency.\n *\n * @todo Check examples are correct.\n * @todo Consider doing something better with indentation.\n */\n\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport { type } from '@epok.tech/is-type/type';\n\nimport { preDef, boundDef } from './const';\n\nexport const rgba = 'rgba';\nexport const cache = {};\n\n// Keys for each part of the macro handling process available to hooks.\nexport const hooks = {\n    // The full set of macros.\n    macroPass: '',\n    // Each part of the set of macros.\n    macroValues: 'values', macroOutput: 'output',\n    macroSamples: 'samples', macroSamplesTap: 'tap'\n};\n\n/**\n * Whether macros should be handled here; or the result of handling them by a\n * given named hook.\n * Allows macros of the given key to be handled by external named hooks, to\n * replace any part of the functionality here.\n *\n * @example\n *     // Macros to be handled here, the default.\n *     hasMacros() === hasMacros({}) === hasMacros({ macros: true }) === null;\n *     // Macros to be handled here, with prefix `'pre_'` instead of `'preDef'`.\n *     hasMacros({ pre: 'pre_' }) === null;\n *     // Macros not created.\n *     hasMacros({ macros: false }) === hasMacros({ macros: 0 }) === '';\n *     // Macros for 'a' handled by external static hook, not here.\n *     hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'a') === '//A\\n';\n *     // Macros for 'b' handled by external function hook, not here.\n *     hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'b') === '//B\\n';\n *     // Macros specified `on` a 'frag' not created.\n *     hasMacros({ macros: { frag: 0 } }, '', 'frag') === '';\n *     // Macros specified `on` a 'vert' handled here.\n *     hasMacros({ macros: { frag: 0, a_vert: 0 } }, '', 'vert') === null;\n *     // Macros for hook `'a'` specified `on` a 'vert' not created.\n *     hasMacros({ macros: { frag: 0, a_vert: 0 } }, 'a', 'vert') === '';\n *\n * @param {object} [props] The properties handling macros.\n * @param {string} [key] The name for which macros should be handled.\n * @param {string} [on=''] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [macros=props.macros] Whether and how\n *     GLSL preprocessor macros should be handled:\n *     - If it's falsey and non-nullish, no macros are handled here.\n *     - If it's a string, no macros are handled here as it's used instead.\n *     - If it's a function, it's passed the given `props`, `key`, `macros`, and\n *         the returned result is interpreted in the same way as described.\n *     - If it's an object, any value at the given `key` is entered recursively,\n *         with the given `props`, `key`, and `macros[key]`.\n *     - Otherwise, returns `null` to indicate macros should be handled here.\n *\n * @returns {string|null|*} Either the result of the macros handled elsewhere,\n *     or `null` if macros should be handled here.\n */\nexport function hasMacros(props, key, on = '', macros = props?.macros) {\n    if((macros ?? true) === true) { return null; }\n    else if(!macros) { return ''; }\n\n    const t = type(macros);\n\n    return ((t === 'Function')? macros(props, key, on, macros)\n        : ((t === 'String')? macros\n        : (((macros instanceof Object) && (key in macros))?\n            hasMacros(props, key, on, macros[key])\n        : ((on)? hasMacros(props, (key || '')+(key && on && '_')+on, '', macros)\n        :   null))));\n}\n\n/**\n * Generates an array-like declaration, as a GLSL syntax string compatible with\n * all versions.\n * Workaround for lack of `const` arrays in GLSL < 3.\n * Used as the base for the other GLSL version list types, ensuring a standard\n * basis while offering further language features where available.\n *\n * @export\n * @example\n *     getGLSLListBase('float', 'list', [0, 1, 2], 'const'); // =>\n *     'const int list_l = 3; '+\n *     'const int list_0 = float(0); '+\n *     'const int list_1 = float(1); '+\n *     'const int list_2 = float(2);';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 1 array-like declaration string.\n */\nexport const getGLSLListBase = (type, name, a, qualify = '', init = type) =>\n    `const int ${name}_l = ${a.length};`+\n    reduce((s, v, i) =>\n            `${s} ${(qualify && qualify+' ')+type} ${name}_${i} = ${\n                init}(${v.join?.(', ') ?? v});`,\n        a, '');\n\n/**\n * Generates an array-like declaration, as a GLSL 1 syntax string.\n * Workaround for lack of `const` arrays in GLSL < 3.\n * Adds a lookup macro function; slow here, but standard.\n *\n * @export\n * @example\n *     getGLSL1ListLike('float', 'list', [0, 1, 2], 'const'); // =>\n *     'const int list_l = 3; '+\n *     'const int list_0 = float(0); '+\n *     'const int list_1 = float(1); '+\n *     'const int list_2 = float(2);\\n'+\n *     '// `list_i` index macro (e.g: `list_i(0)`) may be slow, `+\n *         'prefer direct reference (e.g: `list_0`) where possible.\\n'+\n *     '#define list_i(i) ((i == 2)? list_2 : ((i == 1)? list_1 : list_0))\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 1 array-like declaration string.\n */\nexport const getGLSL1ListLike = (type, name, a, qualify = '', init = type) =>\n    getGLSLListBase(type, name, a, qualify, init)+'\\n'+\n    // `#define ${name}_i(i) ${name}_##i`;\n    `// \\`${name}_i\\` index macro (e.g: \\`${name}_i(0)\\`) may be slow, `+\n        `prefer direct reference (e.g: \\`${name}_0\\`) where possible.\\n`+\n    `#define ${name}_i(i) ${reduce((s, v, i) =>\n            ((i)? `((i == ${i})? ${name}_${i} : ${s})` : `${name}_${i}`),\n        a, '')}\\n`;\n\n/**\n * Generates an array declaration, as a GLSL 1 syntax string.\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @export\n * @example\n *     getGLSL1ListArray('vec3', 'list', [[1, 0, 0], [0, 2, 0], [0, 0, 3]]);\n *     // =>\n *     'const int list_l = 3; '+\n *     'vec3 list_0 = vec3(1, 0, 0); '+\n *     'vec3 list_1 = vec3(0, 2, 0); '+\n *     'vec3 list_2 = vec3(0, 0, 3); '+\n *     'vec3 list[list_l]; '+\n *     'list[0] = list_0; '+\n *     'list[1] = list_1; '+\n *     'list[2] = list_2;\\n'+\n *     '#define list_i(i) list[i]\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 1 array declaration string.\n */\nexport const getGLSL1ListArray = (type, name, a, qualify = '', init = type) =>\n    getGLSLListBase(type, name, a, qualify, init)+' '+\n    (qualify && qualify+' ')+`${type} ${name}[${name}_l];`+\n    reduce((s, _, i) => `${s} ${name}[${i}] = ${name}_${i};`, a, '')+'\\n'+\n    `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Generates an array declaration, as a GLSL 3 syntax string.\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @export\n * @example\n *     getGLSL3List('int', 'list', [0, 1, 2], 'const'); // =>\n *     'const int list_l = 3; '+\n *     'const int list_0 = int(0); '+\n *     'const int list_1 = int(1); '+\n *     'const int list_2 = int(2); '+\n *     'const int list[list_l] = int[list_l](list_0, list_1, list_2);\\n'+\n *     '#define list_i(i) list[i]\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 3 array declaration string.\n */\nexport const getGLSL3List = (type, name, a, qualify = '', init = type) =>\n    getGLSLListBase(type, name, a, qualify, init)+' '+\n    `${(qualify && qualify+' ')+type} ${name}[${name}_l] = ${init}[${name}_l](${\n        reduce((s, _, i) => (s && s+', ')+name+'_'+i, a, '')});\\n`+\n    `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Creates a GLSL definition of an array, and initialises it with the given\n * values, type, and variable name.\n * The initialisation is valid GLSL 1.0 or greater syntax; but is written with\n * escaped new-lines so it may be used in a single-line - e.g: for preprocessor\n * macros.\n * For a `qualify` of `const` on any `glsl` less than `3`, falls back to using\n * non-array variables with the index appended to `name`, since `const` arrays\n * aren't supported before GLSL 3.0.\n *\n * @example\n *     getGLSLList('int', 'test', [0, 1]); // =>\n *     'const int test_l = 2; '+\n *     'int test_0 = int(0); '+\n *     'int test_1 = int(1); '+\n *     'int test[test_l]; '+\n *     'test[0] = test_0; '+\n *     'test[1] = test_1;\\n'+\n *     '#define test_i(i) test[i]\\n';\n *\n *     getGLSLList('ivec2', 'vecs', [[1, 0], [0, 1]], 'const', 3); // =>\n *     'const int vecs_l = 2; '+\n *     'ivec2 vecs_0 = ivec2(1, 0); '+\n *     'ivec2 vecs_1 = ivec2(0, 1); '+\n *     'const ivec2 vecs[vecs_l] = ivec2[vecs_l](vecs_0, vecs_1);\\n'+\n *     '#define vecs_i(i) vecs[i]\\n';\n *\n *     getGLSLList('int', 'listLike', [0, 1], 'const', 1); // =>\n *     'const int listLike_l = 2; '+\n *     'const int listLike_0 = int(0); '+\n *     'const int listLike_1 = int(1);\\n'+\n *     '// `listLike_i` index macro (e.g: `listLike_i(0)`) may be slow, `+\n *         'prefer direct reference (e.g: `listLike_0`) where possible.\\n'+\n *     '#define listLike_i(i) ((i == 1)? listLike_1 : listLike_0)\\n';\n *\n * @export\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed (e.g: `const`).\n * @param {number} [glsl=1] The GLSL version to target, if specified.\n * @param {string} [init] A data-type initialiser.\n *\n * @returns {string} The GLSL (1 or 3) array or array-like declaration string.\n */\nexport const getGLSLList = (type, name, a, qualify = '', glsl = 1, init) =>\n    ((glsl >= 3)? getGLSL3List\n    : ((qualify.trim() === 'const')? getGLSL1ListLike\n    :   getGLSL1ListArray))(type, name, a, qualify, init);\n\n/**\n * Defines the values within textures per-step, as GLSL preprocessor macros.\n * These macros define mappings from values to their textures and channels.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     macroValues({\n *         steps: Array(2),\n *         maps: mapGroups({ values: [4, 2, 1], texturesMax: 1 })\n *     }); // =>\n *     '#define texture_0 0\\n'+ // Value 0's texture.\n *     '#define channels_0 rgba\\n'+ // Value 0's channels.\n *     '\\n'+\n *     '#define texture_1 1\\n'+ // Value 1's texture.\n *     '#define channels_1 rg\\n'+ // Value 1's channels.\n *     '\\n'+\n *     '#define texture_2 1\\n'+ // Value 2's texture.\n *     '#define channels_2 b\\n'+ // Value 2's channels.\n *     '\\n'+\n *     // General metadata.\n *     '#define textures 2\\n'+\n *     '#define passes 2\\n'+\n *     '#define stepsPast 1\\n'+\n *     '#define steps 2\\n';\n *\n * @export\n * @param {object} state Properties used to generate the macros. See `getState`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled\n *     or prefixed. See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step.\n * @param {array<number>} state.maps.values How values of each data item are\n *     grouped into textures. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures The groupings of values\n *     into textures. See `mapGroups`.\n * @param {array} state.maps.passes The passes drawn per-step. See `mapGroups`.\n * @param {array} state.steps The states drawn across frames. See `getState`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *     unavailable as inputs.\n * @param {object} [state.size] Any size information about the GL resources.\n * @param {number} [state.size.count] The number of data entries per texture\n *     (the texture's area), if given. See `getState`.\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings from\n *     values to textures/channels.\n */\nexport function macroValues(state, on) {\n    const key = hooks.macroValues;\n    const hook = hasMacros(state, key, on);\n\n    if(hook !== null) { return hook; }\n\n    const { maps, steps, bound = boundDef, size, pre: n = preDef } = state;\n    const { values, textures, passes: { length: passesL } } = maps;\n    const stepsL = steps.length;\n    const count = size?.count;\n\n    const c = key+':'+\n        JSON.stringify({ n, bound, values, textures, stepsL, passesL, count });\n\n    return (cache[c] ??=\n        reduce((s, texture, t, _, i = 0) => reduce((s, v) => s+\n                    `#define ${n}texture_${v} ${t}\\n`+\n                    `#define ${n}channels_${v} ${\n                        rgba.slice(i, (i += values[v]))}\\n\\n`,\n                texture, s),\n            textures, '')+\n        ((count)? `#define count ${count}\\n` : '')+\n        `#define ${n}textures ${textures.length}\\n`+\n        `#define ${n}passes ${passesL}\\n`+\n        `#define ${n}stepsPast ${stepsL-bound}\\n`+\n        `#define ${n}steps ${stepsL}\\n`);\n}\n\n/**\n * Defines the outputs being drawn to per-pass, as GLSL preprocessor macros.\n * These macros define mappings from values to their outputs, if bound.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     const state = {\n *         passNow: 0, maps: mapGroups({ values: [4, 2, 1], texturesMax: 1 })\n *     };\n *\n *     macroOutput(state); // =>\n *     '#define passNow 0\\n'+\n *     '\\n'+\n *     '#define bound_0 0\\n'+\n *     '#define attach_0 0\\n'+\n *     '#define output_0 gl_FragData[attach_0].rgba\\n';\n *\n *     ++state.passNow;\n *\n *     macroOutput(state); // =>\n *     '#define passNow 1\\n'+\n *     '\\n'+\n *     '#define bound_1 1\\n'+\n *     '#define attach_1 0\\n'+\n *     '#define output_1 gl_FragData[attach_1].rg\\n'+\n *     '\\n'+\n *     '#define bound_2 1\\n'+\n *     '#define attach_2 0\\n'+\n *     '#define output_2 gl_FragData[attach_2].b\\n';\n *\n * @export\n * @param {object} state Properties for generating the macros. See `getState`:\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *     See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `pre` if not given.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<number>} state.maps.values How values of each data item may be\n *     grouped into textures across passes. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures The groupings of values\n *     into textures. See `mapGroups`.\n * @param {array<array<number>>} state.maps.passes The groupings of textures\n *     into passes. See `mapGroups`.\n *\n * @returns {string} The GLSL preprocessor macros defining the bound outputs.\n */\nexport function macroOutput(state, on) {\n    const key = hooks.macroOutput;\n    const hook = hasMacros(state, key, on);\n\n    if(hook !== null) { return hook; }\n\n    const { passNow: p, maps, pre: n = preDef } = state;\n    const { values, textures, passes } = maps;\n    const pass = passes[p];\n    const c = key+':'+JSON.stringify({ n, p, values, textures, passes });\n\n    return (cache[c] ??=\n        `#define ${n}passNow ${p}\\n`+\n        reduce((s, texture, bound, _, i = 0) => reduce((s, v) => `${s}\\n`+\n                    `#define ${n}bound_${v} ${texture}\\n`+\n                    `#define ${n}attach_${v} ${bound}\\n`+\n                    `#define ${n}output_${v} gl_FragData[${n}attach_${v}].${\n                        rgba.slice(i, (i += values[v]))}\\n`,\n                textures[texture], s),\n            pass, ''));\n}\n\n/**\n * Defines the texture samples/reads per-pass, as GLSL preprocessor macros.\n * The macros define the mapping between the values and the minimum texture\n * samples for the data they derive from. They're set up as function-like macros\n * that may be called from the shader to initialise the mappings arrays with a\n * given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see getGLSLList\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [mapSamples]{@link ./maps.js#mapSamples}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     macroSamples({\n *         passNow: 0,\n *         maps: mapSamples(mapGroups({\n *             values: [4, 2, 1], channelsMax: 4, texturesMax: 1,\n *             derives: [[1, 0], , [3, [1, 0]]]\n *         }))\n *     }); // =>\n *     '#define useSamples '+\n *         'const int samples_l = 2; '+\n *         'const ivec2 samples_0 = ivec2(0, 1); '+\n *         'const ivec2 samples_1 = ivec2(0, 0);\\n'+\n *     '// `samples_i` index macro (e.g: `samples_i(0)`) may be slow, `+\n *         'prefer direct reference (e.g: `samples_0`) where possible.\\n'+\n *     '#define samples_i(i) ((i == 1)? samples_1 : samples_0)\\n'+\n *     '\\n'+\n *     '#define tapSamples(states, uv, textures, by) '+\n *         'const int data_l = 2; '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = texture2D('+\n *             'states[((samples_0.s+by.s)*textures)+samples_0.t+by.t], uv); '+\n *         'data[1] = texture2D('+\n *             'states[((samples_1.s+by.s)*textures)+samples_1.t+by.t], uv); '+\n *         '// `data_i` index macro (e.g: `data_i(0)`) may be slow, `+\n *             'prefer direct reference (e.g: `data_0`) where possible.\\n'+\n *         '#define data_i(i) data[i]\\n'+\n *     '#define tapSamples(states, uv, textures) '+\n *         'tapSamplesShift(states, uv, textures, ivec2(0))\\n'+\n *     '\\n'+\n *     '#define useReads_0 '+\n *         'const int reads_0_l = 2; '+\n *         'const int reads_0_0 = int(0); '+\n *         'const int reads_0_1 = int(1);\\n'+\n *     '// `reads_0_i` index macro (e.g: `reads_0_i(0)`) may be slow, `+\n *         'prefer direct reference (e.g: `reads_0_0`) where possible.\\n'+\n *     '#define reads_0_i(i) ((i == 1)? reads_0_1 : reads_0_0)\\n';\n *\n * @param {object} state Properties used to generate the macros. See `getState`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *     See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps  How `values` are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<array<array<number>>>} [state.maps.samples] The minimal set of\n *     texture samples to use. See `mapSamples`.\n * @param {array<array<array<number>>>} [state.maps.reads] The mappings from\n *     values to the corresponding `state.samples`. See `mapSamples`.\n * @param {number} [state.glsl=1] The GLSL language version. See `getGLSLList`.\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings for\n *     samples and reads, for each value.\n */\nexport function macroSamples(state, on) {\n    const key = hooks.macroSamples;\n    const hook = hasMacros(state, key, on);\n\n    if(hook !== null) { return hook; }\n\n    const { passNow: p = 0, maps, glsl, pre: n = preDef } = state;\n    const { samples, reads } = maps;\n    const passSamples = samples?.[p];\n    const passReads = reads?.[p];\n    // Whether to generate GLSL preprocessor macros for the lookup logic.\n    const tap = hasMacros(state, hooks.macroSamplesTap, on);\n\n    const c = key+':'+\n        JSON.stringify({ n, p, passSamples, passReads, glsl, tap });\n\n    return (cache[c] ??=\n        ((!passSamples)? ''\n        :   `#define ${n}useSamples `+\n                getGLSLList('ivec2', n+'samples', passSamples, 'const', glsl)+\n            '\\n'+\n            // The texture-sampling logic.\n            (tap ??\n                // Data may be sampled by adding step/texture lookup shifts.\n                `#define ${n}tapSamplesAdd(states, uv, textures, by) ${\n                    // 2D-to-1D indexing, as textures are a flat array.\n                    getGLSLList('vec4', n+'data',\n                        map((_, s) =>\n                                'texture2D(states['+\n                                        `((${n}samples_${s}.s+by.s)*textures)+`+\n                                        `${n}samples_${s}.t+by.t`+\n                                    '], uv)',\n                            passSamples),\n                        '', glsl)}\\n`+\n                // Data is usually sampled without step/texture lookup shifts.\n                `#define ${n}tapSamples(states, uv, textures) `+\n                    `${n}tapSamplesAdd(states, uv, textures, ivec2(0))\\n`+\n                '\\n'))+\n        ((!passReads)? ''\n        :   reduce((s, reads, v) =>\n                    `${s}#define ${n}useReads_${v} ${\n                        getGLSLList('int', n+'reads_'+v, reads, 'const', glsl)\n                    }\\n`,\n                passReads, '')));\n}\n\n/**\n * Defines all GLSL preprocessor macro values, texture samples, and outputs for\n * the active pass.\n * The macros define the mapping between the active values, their textures and\n * channels, bound outputs, and other macros useful for a draw pass.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see macroValues\n * @see macroOutput\n * @see macroSamples\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     const state = {\n *         steps: Array(2), passNow: 0,\n *         maps: mapSamples(mapGroups({\n *             values: [4, 2, 3], channelsMax: 4, texturesMax: 1,\n *             derives: [[1, 0], [2, [1, 0]]]\n *         }))\n *     };\n *\n *     macroPass(state); // =>\n *     '#define texture_0 0\\n'+\n *     '#define channels_0 rgba\\n'+\n *     '\\n'+\n *     '#define texture_1 1\\n'+\n *     '#define channels_1 rg\\n'+\n *     '\\n'+\n *     '#define texture_2 2\\n'+\n *     '#define channels_2 rgb\\n'+\n *     '\\n'+\n *     '#define textures 3\\n'+\n *     '#define passes 3\\n'+\n *     '#define steps 2\\n'+\n *     '\\n'+\n *     '#define passNow 0\\n'+\n *     '\\n'+\n *     '#define bound_0 0\\n'+\n *     '#define attach_0 0\\n'+\n *     '#define output_0 gl_FragData[attach_0].rgba\\n'+\n *     '\\n'+\n *     '#define useSamples '+\n *         'const int samples_l = 2; '+\n *         'const ivec2 samples_0 = ivec2(0, 1); '+\n *         'const ivec2 samples_1 = ivec2(0, 0);\\n'+\n *     '#define samples_i(i) ((i == 1)? samples_1 : samples_0)\\n'+\n *     '\\n'+\n *     '#define tapSamples(states, uv, textures) '+\n *         'const int data_l = 2; '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = texture2D(states[(0*textures)+1], uv); '+\n *         'data[1] = texture2D(states[(0*textures)+0], uv);\\n'+\n *         '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define useReads_0 '+\n *         'const int reads_0_l = 2; '+\n *         'const int reads_0_0 = int(0); '+\n *         'const int reads_0_1 = int(1);\\n'+\n *     '#define reads_0_i(i) ((i == 1)? reads_0_1 : reads_0_0)\\n';\n *\n *     ++state.passNow;\n *     state.pre = 'draw_';\n *     state.steps.push(null);\n *     Object.assign(state.maps, mapSamples(mapGroups({\n *         values: [4, 2, 3, 1], channelsMax: 4, texturesMax: 2,\n *         derives: [[1, 0], , [2, [1, 0]]]\n *     })));\n *\n *     macroPass(state); // =>\n *     '#define draw_texture_0 0\\n'+\n *     '#define draw_channels_0 rgba\\n'+\n *     '\\n'+\n *     '#define draw_texture_1 1\\n'+\n *     '#define draw_channels_1 rg\\n'+\n *     '\\n'+\n *     '#define draw_texture_2 2\\n'+\n *     '#define draw_channels_2 rgb\\n'+\n *     '\\n'+\n *     '#define draw_texture_3 2\\n'+\n *     '#define draw_channels_3 a\\n'+\n *     '\\n'+\n *     '#define draw_textures 3\\n'+\n *     '#define draw_passes 2\\n'+\n *     '#define draw_steps 3\\n'+\n *     '\\n'+\n *     '#define draw_passNow 1\\n'+\n *     '\\n'+\n *     '#define draw_bound_2 2\\n'+\n *     '#define draw_attach_2 0\\n'+\n *     '#define draw_output_2 gl_FragData[draw_attach_2].rgb\\n'+\n *     '\\n'+\n *     '#define draw_bound_3 2\\n'+\n *     '#define draw_attach_3 0\\n'+\n *     '#define draw_output_3 gl_FragData[draw_attach_3].a\\n'+\n *     '\\n'+\n *     '#define draw_useSamples '+\n *         'const ivec2 draw_samples_0 = ivec2(0, 2); '+\n *         'const ivec2 draw_samples_1 = ivec2(1, 0); '+\n *         'const int draw_samples_l = 2;\\n'+\n *     '#define draw_samples_i(i) '+\n *         '((i == 1)? draw_samples_1 : draw_samples_0)\\n'+\n *     '\\n'+\n *     '#define draw_tapSamples(states, uv, textures) '+\n *         'const int data_l = 2; '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = texture2D(states[(0*textures)+2], uv); '+\n *         'data[1] = texture2D(states[(1*textures)+0], uv);\\n'+\n *         '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define draw_useReads_2 '+\n *         'const int draw_reads_2_l = 2; '+\n *         'const int draw_reads_2_0 = int(0); '+\n *         'const int draw_reads_2_1 = int(1);\\n'+\n *     '#define draw_reads_2_i(i) '+\n *         '((i == 1)? draw_reads_2_1 : draw_reads_2_0)\\n';\n *\n * @export\n * @param {object} state Properties for generating the macros. See `getState`\n *     and `mapGroups`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *     the hook key and this specifier are checked (e.g: `key` and `key_on`).\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings for\n *     values, textures, channels, bound outputs of the active pass, etc. See\n *     `macroValues`, `macroOutput`, and `macroSamples`.\n */\nexport const macroPass = (state, on) =>\n    (hasMacros(state, hooks.macroPass, on) ??\n        macroValues(state)+'\\n'+macroOutput(state)+'\\n'+macroSamples(state));\n\nexport default macroPass;\n","const [{ length: start}, { length: end }] = '[object {type}]'.split('{type}');\n\n/**\n * Gives the type of a given input.\n *\n * @see https://stackoverflow.com/a/17772086/716898\n *\n * @param {*} x Any input to test.\n *\n * @returns {string} The type of `x`.\n */\nexport const type = (x) => toString.call(x).slice(start, -end);\n\nexport default type;\n","/**\n * GPGPU inputs (uniforms, attributes, indexes, etc).\n */\n\nimport { setC2 } from '@thi.ng/vectors/setc';\nimport map from '@epok.tech/fn-lists/map';\nimport range from '@epok.tech/fn-lists/range';\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap-index';\n\nimport { boundDef, preDef } from './const';\n\n/**\n * Common uniform inputs for GPGPU `step` and `draw`.\n * Uniforms are defined as callback hooks pulling from given `context` and\n * `props` properties, allowing different APIs or author-defined hooks.\n *\n * @see [getState]{@link ./state.js#getState}\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n *\n * @export\n * @param {object} state The GPGPU state to use. See `getState` and `mapGroups`.\n * @param {array} state.steps The steps of state. See `getState`.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures How values are grouped into\n *     textures. See `mapGroups`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *     unavailable as inputs.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n * @param {object} [to=(state.uniforms ?? {})] The object to contain the\n *     uniforms; `state.uniforms` or a new object if not given.\n *\n * @returns {object<function>} `to` The uniform hooks for the given `state`.\n *     Each is a function taking 2 arguments: a `context` object of general\n *     or global properties, and a `props` object of local properties (such as\n *     the given `state`).\n */\nexport function getUniforms(state, to = (state.uniforms ?? {})) {\n    const {\n            steps: { length: stepsL }, maps: { textures: textureMap },\n            bound = boundDef, pre: n = preDef\n        } = state;\n\n    const texturesL = textureMap.length;\n    const cache = { viewShape: [] };\n\n    to[n+'stepNow'] = (_, { stepNow: s }) => s;\n    to[n+'dataShape'] = (_, { size: { shape: s } }) => s;\n    to[n+'viewShape'] = ({ viewportWidth: w, viewportHeight: h }) =>\n        setC2(cache.viewShape, w, h);\n\n    // Set up the past steps, as the number of steps into the past from the\n    // currently bound step ([1...(steps-1)]).\n\n    const addTexture = (past, texture) =>\n        // Hook to pull a given texture from the latest `props`.\n        to[`${n}states[${(past*texturesL)+texture}]`] =\n            (_, { stepNow: s, bound: b = bound, textures }) =>\n                wrap.get(s-b-past, textures)[texture].texture;\n\n    // Flatten all input textures, as uniforms are stored in flat arrays.\n    for(let past = 0, pl = stepsL-bound; past < pl; ++past) {\n        each((v, texture) => addTexture(past, texture), textureMap);\n    }\n\n    return to;\n}\n\n/**\n * Gives the number of indexes to draw a full state, for various parameters.\n *\n * @see [getState]{@link ./state.js#getState}\n *\n * @param {object|array<number>|number} size Size/type information of data\n *     resources, or a shape array of width and height numbers, or width if\n *     height is given as a second parameter.\n * @param {number} [size.count] The number of entries of each data-texture.\n * @param {number} [size[0]] The width of each data-texture.\n * @param {number} [size[1]] The height of each data-texture.\n * @param {number} [size.width] The width of each data-texture.\n * @param {number} [size.height] The height of each data-texture.\n * @param {number} [size.x] The width of each data-texture.\n * @param {number} [size.y] The height of each data-texture.\n * @param {number} [size.shape] The shape of each data-texture.\n * @param {number} [size.shape[0]] The width of each data-texture.\n * @param {number} [size.shape[1]] The height of each data-texture.\n *\n * @param {number} [height] The height of each data-texture.\n *\n * @returns {number} The number of indexes needed to draw a full state; each\n *     entry of a data-texture (its area, equivalent to `state.size.count`).\n */\nexport const countDrawIndexes = (size, height) => (size.count ??\n    ((size[0] ?? size.width ?? size.x ?? size.shape?.[0] ?? size)*\n        (size[1] ?? size.height ?? size.y ?? size.shape?.[1] ?? height)));\n\n/**\n * Gives the array of indexes needed to draw a full state.\n *\n * @param {number|object<number>} size The number of entries in each\n *     data-texture; or an object of size/type information on data resources.\n *\n * @returns {array<number>} An array of indexes for drawing all data-texture\n *     entries.\n */\nexport const getDrawIndexes = (size) => map((v, i) => i,\n    range(Number.isInteger(size)? size : countDrawIndexes(size)), 0);\n","export const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);\nexport const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);\nexport const setC4 = (out, x, y, z, w) => (!out && (out = []),\n    (out[0] = x),\n    (out[1] = y),\n    (out[2] = z),\n    (out[3] = w),\n    out);\nexport const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),\n    (out[0] = a),\n    (out[1] = b),\n    (out[2] = c),\n    (out[3] = d),\n    (out[4] = e),\n    (out[5] = f),\n    out);\nexport const setC = (out, ...xs) => {\n    !out && (out = []);\n    for (let i = 0, n = xs.length; i < n; i++) {\n        out[i] = xs[i];\n    }\n    return out;\n};\n","/**\n * How many vertexes for pairs of line segments linking each entry's states,\n * using `gl.LINES`.\n * If fewer than 2 states are given, lines can't be drawn, assumes `gl.POINTS`.\n * Every pair of indexes is a line-segment connecting each state to its past\n * state, making one continuous line back through steps using `gl.LINES`;\n * iterating each start index and its past index.\n * Corresponds to the indexing logic in the `indexPairs` GLSL function.\n *\n * @see [readme]{@link ./readme.md}\n * @see `gl.LINES` at https://webglfundamentals.org/webgl/lessons/webgl-points-lines-triangles.html\n * @see [indexPairs]{@link ./index.glsl#indexPairs}\n *\n * @param {number} states The number of steps of state to link by pairs of line\n *     segments.\n *\n * @returns {number} The number of points needed to link all steps of state\n *     by pairs of line segments. May be multiplied with the number of entries\n *     in each step.\n */\nexport const indexPairs = (states) => Math.max(1, (states-1)*2);\n\nexport default indexPairs;\n","/**\n * The update step for a GPGPU particle simulation.\n * Requires setup with preprocessor macros - see `macroPass`.\n * Written as several individual shaders that may be combined into one or more\n * passes; `gpgpu` preprocessor macros control the combination according to\n * which `values` are currently bound for `output` to the next `state`.\n *\n * @see [getStep]{@link ../../step.js#getStep}\n * @see [macroPass]{@link ../../macros.js#macroPass}\n */\n\n#ifdef GL_EXT_draw_buffers\n    #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\n// Setting up the macros and aliases.\n// Note that these `texture_i`/`channels_i`/`reads_i_j` indexes correspond to\n// the value at that index in the `values`/`derives` arrays provided to `gpgpu`;\n// they are defined here to match the arrangement in `./index.js`.\n\n// The texture channels each of the `values` is stored in.\n#define posChannels channels_0\n#define accChannels channels_1\n#define lifeChannels channels_2\n// Set up sampling logic.\nuseSamples\n\n// Set up minimal texture reads logic; only read what a value with a currently\n// bound output `derives` from other `values` for its next state.\n// See `derives` for indexing (`reads_${bound value index}_${derives index}`).\n#ifdef output_0\n    #define posOutput output_0\n    useReads_0\n    #define posReadPos0 reads_0_0\n    #define posReadPos1 reads_0_1\n    #define posReadAcc reads_0_2\n    #define posReadLife reads_0_3\n#endif\n#ifdef output_1\n    #define accOutput output_1\n    useReads_1\n    #define accReadAcc reads_1_0\n    #define accReadLife reads_1_1\n#endif\n#ifdef output_2\n    #define lifeOutput output_2\n    useReads_2\n    #define lifeReadLifeOldest reads_2_0\n    #define lifeReadLife1 reads_2_1\n#endif\n\n// The main shader.\n\n// States from `gl-gpgpu`.\nuniform sampler2D states[stepsPast*textures];\nuniform vec2 dataShape;\n// Custom inputs for this demo.\nuniform float dt;\nuniform float time;\nuniform float loop;\nuniform vec2 lifetime;\nuniform vec2 force;\nuniform float useVerlet;\nuniform vec3 g;\nuniform vec3 source;\n\nvarying vec2 uv;\n\n#pragma glslify: map = require(glsl-map);\n\n#ifdef posOutput\n    #pragma glslify: verlet = require(@epok.tech/glsl-verlet);\n#endif\n\n#ifdef accOutput\n    #pragma glslify: tau = require(glsl-constants/TWO_PI);\n\n    // @see https://observablehq.com/@rreusser/equally-distributing-points-on-a-sphere\n    vec3 randomOnSphere(vec2 randoms) {\n        float a = randoms[0]*tau;\n        float u = (randoms[1]*2.0)-1.0;\n\n        return vec3(sqrt(1.0-(u*u))*vec2(cos(a), sin(a)), u);\n    }\n#endif\n\n#if defined(accOutput) || defined(lifeOutput)\n    #pragma glslify: random = require(glsl-random);\n#endif\n\n#pragma glslify: le = require(glsl-conditionals/when_le);\n\nvoid main() {\n    // Sample textures.\n    // Add pixel offset to sample from the pixel's center and avoid errors.\n    vec2 st = uv+(vec2(0.25)/dataShape);\n\n    // Sample the desired state values - creates the `data` array.\n    tapSamples(states, st, textures)\n\n    // Read values.\n\n    // If reads all map to the same value sample, any of them will do.\n    #if defined(posOutput)\n        #define readLife posReadLife\n    #elif defined(lifeOutput)\n        #define readLife lifeReadLife\n    #elif defined(accOutput)\n        #define readLife accReadLife\n    #endif\n\n    float life = data[readLife].lifeChannels;\n    float spawn = le(life, 0.0);\n\n    #ifdef posOutput\n        vec3 pos0 = data[posReadPos0].posChannels;\n        vec3 pos1 = data[posReadPos1].posChannels;\n    #endif\n\n    // If reads all map to the same value sample, any of them will do.\n    #if defined(posOutput) || defined(accOutput)\n        #if defined(posOutput)\n            #define readAcc posReadAcc\n        #elif defined(accOutput)\n            #define readAcc accReadAcc\n        #endif\n\n        vec3 acc = data[readAcc].accChannels;\n    #endif\n\n    #ifdef lifeOutput\n        float lifeOldest = data[lifeReadLifeOldest].lifeChannels;\n    #endif\n\n    // Output updated values.\n    #ifdef posOutput\n        // Use either Euler or Verlet integration.\n        vec3 pos = mix(pos1+(acc*dt), verlet(acc, pos0, pos1, dt), useVerlet);\n\n        posOutput = mix(pos, source, spawn);\n    #endif\n    #ifdef lifeOutput\n        float lifeNew = map(random(uv*loop), 0.0, 1.0, lifetime.s, lifetime.t);\n\n        // Only spawn life once the oldest step reaches the end of its lifetime\n        // (past and current life are both 0).\n        lifeOutput = mix(max(0.0, life-dt), lifeNew, spawn*le(lifeOldest, 0.0));\n    #endif\n    #ifdef accOutput\n        // To help accuracy of very small numbers, pass force as `[S, T] = SeT`.\n        float f = force.s*pow(10.0, force.t);\n\n        acc += g*f*dt;\n\n        vec2 randoms = vec2(random((uv+loop)/dt), random((uv-loop)*dt));\n        vec3 accNew = randomOnSphere(randoms)*random(loop-(uv*dt))*f*5e3;\n\n        accOutput = mix(acc, accNew, spawn);\n    #endif\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see [macroPass]{@link ../../macros.js#macroPass}\n * @see [macroValues]{@link ../../macros.js#macroValues}\n */\n\nprecision highp float;\n\n// The texture channels each of the `values` is stored in.\n#define posChannels channels_0\n#define accChannels channels_1\n#define lifeChannels channels_2\n// Set up sampling logic.\nuseSamples\n// Only the first value derives from all values, giving these minimal `reads`.\nuseReads_0\n// All `derives` here are in one pass (`0`), and in the same order as `values`.\n// See `values` for indexing (`reads_0_${derives index == values index}`).\n#define readPos reads_0_0\n#define readAcc reads_0_1\n#define readLife reads_0_2\n\nattribute float index;\n\nuniform sampler2D states[stepsPast*textures];\nuniform vec2 dataShape;\nuniform vec2 viewShape;\nuniform float pointSize;\nuniform vec2 lifetime;\nuniform vec2 force;\nuniform float dt;\nuniform float scale;\n\nvarying vec4 color;\n\n#pragma glslify: aspect = require(@epok.tech/glsl-aspect/contain)\n#pragma glslify: gt = require(glsl-conditionals/when_gt)\n\n#if stepsPast > 1\n    // If multiple steps are given, shift into past steps.\n    #pragma glslify: indexPairs = require(../../index-pairs)\n#endif\n\nvoid main() {\n    float stepsPastF = float(stepsPast);\n\n    #if stepsPast > 1\n        // If multiple steps are given, find past step and entry, and shift.\n        vec2 stepEntry = indexPairs(index, stepsPastF);\n        float stepPast = stepEntry.s;\n        float entry = stepEntry.t;\n        ivec2 tapShift = ivec2(int(stepPast), 0);\n    #else\n        // If only 1 step is given, past step and entry are known, don't shift.\n        float stepPast = 0.0;\n        float entry = index;\n        ivec2 tapShift = ivec2(0);\n    #endif\n\n    // Turn the 1D index into a 2D texture UV.\n    // Add pixel offset to sample from the pixel's center and avoid errors.\n    vec2 uv = vec2(mod(entry+0.25, dataShape.x)/dataShape.x,\n        (floor(entry/dataShape.x)+0.25)/dataShape.y);\n\n    // Can also use the `reads` logic to take the minimum possible samples here.\n    // Sample the desired state values - creates the `data` array.\n    tapSamplesAdd(states, uv, textures, tapShift)\n\n    // Read values.\n    vec3 pos = data[readPos].posChannels;\n    float life = data[readLife].lifeChannels;\n    vec3 acc = data[readAcc].accChannels;\n\n    float ratioPast = stepPast/max(stepsPastF-1.0, 1.0);\n    float alive = gt(life, 0.0);\n    vec2 ar = aspect(viewShape);\n    vec4 vertex = vec4(vec3(pos.xy*ar, pos.z)*scale, 1.0);\n\n    gl_Position = alive*vertex;\n\n    gl_PointSize = alive*pointSize*clamp(1.0-(vertex.z/vertex.w), 0.1, 1.0)*\n        mix(1.0, 0.1, ratioPast);\n\n    float a = pow(life/lifetime.t, 0.1);\n    // To help accuracy of very small numbers, pass force as `[S, T] = SeT`.\n    float f = force.s*pow(10.0, force.t);\n\n    color = a*vec4(ratioPast, entry/float(count),\n        clamp((length(acc)/f/dt)*scale, 0.0, 1.0), a);\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see [macroPass]{@link ../../macros.js#macroPass}\n * @see [macroValues]{@link ../../macros.js#macroValues}\n */\n\nprecision highp float;\n\nvarying vec4 color;\n\nvoid main() { gl_FragColor = color; }\n"],"names":["_console","_console1","ref","ref1","reglProps","pixelRatio","Math","max","floor","devicePixelRatio","extensions","$hBMe5","extensionsFloat","optionalExtensions","regl","self","$parcel$interopDefault","$3Cmit","console","log","$ksHHi","default","o","e","hasExtension","canvas","document","querySelector","classList","add","valuesMap","Map","set","values","valuesIndex","forEach","v","k","push","_limits","limits","maxTextureUnits","maxTextureSize","lineWidthDims","pointSizeDims","steps","s","scale","log2","niceScale","min","getQuery","param","search","location","URLSearchParams","setQuery","entries","param1","query","$9yAa9","_param","tmp","delete","query1","$lKPpF","apply","parseInt","get","concat","$kxEDL","stepsPast","scale1","usePoints","has","timestepDef","timestep","parseFloat","flat","href","derives","position","acceleration","life","canVerlet","cache","state","$e3wLf","gpgpu","props","timer","$8g7pT","step","now","rate","loop","useVerlet","lifetime","g","source","forces","bound","maps","macros","vert","frag","$jYFPA","frags","uniforms","dt","_","_props","time","sin","PI","prop","$9pabq","i","force","u","group","packed","textures","valueToTexture","groupEnd","drawCount","size","count","$i7NAh","drawIndexes","$gyl7y","getDrawIndexes","drawState","$9BYky","output","$4MXss","getMaps","texturesMax","drawWidth","drawCommand","$1tr74","macroPass","$57MSl","$7Lnkd","attributes","index","getUniforms","pointSize","lineWidth","depth","enable","blend","func","src","dst","primitive","draw","clearView","color","frame","run","stepNow","clear","addEventListener","stopPropagation","preventDefault","x","clientX","y","clientY","innerWidth","innerHeight","module","hot","accept","call","reload","obj","key","value","Object","defineProperty","enumerable","configurable","writable","target","arguments","length","ownKeys","keys","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","$gHSxu","arr","$km6mS","$3rVPa","$iWEHp","Array","isArray","iter","Symbol","iterator","prototype","toString","from","TypeError","$kJ5JC","$f24YN","arr2","exports","$60359228a7d3fb28$export$be3f796aed065412","diff","pause","$60359228a7d3fb28$export$7548f4bc1b09ff22","$60359228a7d3fb28$export$85b884786400d38f","$60359228a7d3fb28$export$eb8a9b7a1ebec59a","Date","$60359228a7d3fb28$export$2e2bcd8739ae039","out","t0","n","_step","t","t1","isNaN","$ee5851911330bf41$var$r","reduce","$ee5851911330bf41$export$533b26079ad0b4b","f","a","to","undefined","$ee5851911330bf41$export$2e2bcd8739ae039","$6d8e5906de1cf303$export$2e2bcd8739ae039","to1","$6f535731e26073af$var$e","$6f535731e26073af$export$2e2bcd8739ae039","_maps1","$a3bac22a2cec4520$export$a8489f67fe30ef76","api","maxDrawbuffers","glsl","_maps","match","_texturesMax","$20H3c","getState","$4NSvD","getStep","_cache","_reads","_passReads","$37c9c43fd5907c13$export$69a3209f1a06c04d","$37c9c43fd5907c13$export$5ca26c99531348ec","channelsMax","channelsMaxDef","error","$37c9c43fd5907c13$export$96707a1f51900f3d","param2","_values","valuesDef","_channelsMax","texturesMaxDef","_packed","channels","fitIndex","fitSize","Infinity","i1","fit","pack","$37c9c43fd5907c13$export$9d1d9285bd6d8c57","passes","valueToPass","textureToPass","getValue","getIndex","p","pass","texture","$37c9c43fd5907c13$export$574963e692b662ec","param3","reads","all","getAddSample","derive","d","Number","isFinite","findIndex","passReads","_pass","_value","samples","valueDerives","getAddSamples","$37c9c43fd5907c13$export$e8886fdb6718f96","$cd1b4d1540633814$export$ac0cd3cc21f80dfc","$cd1b4d1540633814$export$4bceda1224fc5ab8","$cd1b4d1540633814$export$b4781c2237bde956","$cd1b4d1540633814$export$26945b8c914b7fc","$cd1b4d1540633814$export$154f256b9eac9103","$cd1b4d1540633814$export$4d253b84ce5f5f8e","$cd1b4d1540633814$export$b029aceb5666f022","$cd1b4d1540633814$export$71c6d8e332d66a75","$cd1b4d1540633814$export$617a37502ff8853","$cd1b4d1540633814$export$ff01eb58fe4e69","$cd1b4d1540633814$export$cfdc3a7c4cb854c6","$fAgvn","positions","$cd1b4d1540633814$export$27fb0dad99ae5dd2","$cd1b4d1540633814$export$47b10f415de592b1","$cd1b4d1540633814$export$1fb689c67b965bff","$cd1b4d1540633814$export$8d7f4a48e1f2b2a","$cd1b4d1540633814$export$a211ab2c8ecded9a","$cd1b4d1540633814$export$a1b7c201e9365814","$b587055a99d7210b$export$ba60520149d1328e","$b587055a99d7210b$export$878041e1e4cd4218","_textures","_passes","$176cf9cb32bd006b$export$50fdfeece43146fd","framebuffer","radius","w","width","h","height","_scale","scaleDef","_steps","stepsDef","passNow","_type","type","typeDef","_min","minDef","_mag","mag","magDef","_wrap","wrap","wrapDef","_depth","depthDef","_stencil","stencil","stencilDef","_channelsMin","channelsMin","channelsMinDef","texturesMap","_length","pow","textureProps","frameProps","shape","textures1","passes1","addPass","passProps","max1","_step1","entry","map","addTexture","$88hlK","$5ebc876929a0439f$export$2e2bcd8739ae039","start","end","fill","_step2","$37f6056e300b6832$var$scale","$37f6056e300b6832$export$89e7bec3b8bce705","buffer","_command","command","_pre","pre","preDef","step1","_positions","positionsDef","passCommand","_vert","$dAkAi","verts","_count","stateCache","_obj","tmp1","vs","tmp2","fs","ss","$6qjSx","wrapGet","onPass","onStep","$4ad49746d3e88695$export$acb6ab09ed1b7b8b","l","$4ad49746d3e88695$export$ea134dcc07e79c49","$4ad49746d3e88695$export$2e2bcd8739ae039","_cache1","_cache2","$112d87fa33ebb5f5$export$4e46ac54fc82cf3b","$112d87fa33ebb5f5$export$69a3209f1a06c04d","$112d87fa33ebb5f5$export$11949c6f5fba7dcd","$112d87fa33ebb5f5$export$feaf5ffc92c2af94","on","$ayMqI","$112d87fa33ebb5f5$export$83d01c7b88bc16d5","name","qualify","init","ref2","join","$112d87fa33ebb5f5$export$45db4de6da38aa8d","$112d87fa33ebb5f5$export$3df19e70a88cb8cd","param4","$112d87fa33ebb5f5$export$1c7039c93eddfba","param5","$112d87fa33ebb5f5$export$c346962e7dd3191","param6","trim","$112d87fa33ebb5f5$export$d38b14fb9031108e","hook","_bound","boundDef","passesL","stepsL","c","JSON","stringify","_c","s1","slice","$112d87fa33ebb5f5$export$84186522bf5a7d4d","s2","$112d87fa33ebb5f5$export$49873e279ff642c0","reads1","passSamples","tap","$112d87fa33ebb5f5$export$9cb6037fa2a40c2e","$7b02a589e8d7c18a$var$start","$7b02a589e8d7c18a$var$end","split","$7b02a589e8d7c18a$export$bf9fb029d174d554","_uniforms","ref3","ref4","ref5","ref6","ref7","$c0d0347db9b941ce$export$4e06fab977536f8e","past","textureMap","texturesL","viewportWidth","viewportHeight","$fnH3v","setC2","b","pl","_loop","$c0d0347db9b941ce$export$87ed20f81f3c66ff","isInteger","ref9","ref8","$c0d0347db9b941ce$export$a495db45d4904b10","$b32a66f4c5b7b75f$export$dcfbb7940cfb3a48","$0367bb3900f2b1c9$export$2e2bcd8739ae039","states"],"version":3,"file":"index.06fb6d4c.js.map"}