{"mappings":"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","sources":["node_modules/clamp/index.js","node_modules/@epok.tech/fn-time/dist/es/index.js","node_modules/@epok.tech/fn-lists/reduce.js","node_modules/@epok.tech/fn-lists/map.js","node_modules/@epok.tech/fn-lists/each.js","node_modules/@epok.tech/fn-lists/range.js","node_modules/@epok.tech/fn-lists/wrap-index.js","node_modules/@epok.tech/fn-lists/wrap.js","node_modules/@epok.tech/gl-screen-triangle/dist/esm/index.js","src/const.js","src/index.vert.glsl","src/maps.js","src/size.js","src/data.js","node_modules/@thi.ng/vectors/setc.js","src/uniforms.js","node_modules/@epok.tech/is-type/type.js","src/macros.js","src/step.js","src/index.js","src/index-forms/index.js","demo/particles-regl/index.js","demo/particles-regl/step.frag.glsl","demo/particles-regl/draw.vert.glsl","demo/particles-regl/draw.frag.glsl"],"sourcesContent":["module.exports = clamp\n\nfunction clamp(value, min, max) {\n  return min < max\n    ? (value < min ? min : value > max ? max : value)\n    : (value < max ? max : value > min ? min : value)\n}\n","/**\n * Simple time-stepping - frame, real-time, constant-step - via any API.\n */\n\nexport const steps = {\n    diff: '-', dt: '-', '⏳': '-',\n    pause: 0, '⏸': 0,\n    add: '+', '⏭': '+'\n};\n\nexport const stepDef = steps.diff;\nexport const startDef = 0;\nexport const nowDef = { [steps.diff]: Date.now, [steps.add]: 1e3/60 };\n\n/**\n * Sets up properties needed to track time, starts/steps time in various ways:\n * - Time-difference or time-advance stepping.\n * - Step forwards or backwards in time or pause it.\n * - Current time can be a number or function; or the object's fixed time-step.\n * - Override property, pass the result to new objects.\n *\n * @example\n *     // Initial call sets up properties.\n *     const diff0 = timer({ step: '-' }, 200);\n *     // => { step: '-', time: 200, dt: 200 };\n *     const add0 = timer({ step: 200 });\n *     // => { step: 200, time: 200, dt: 200 };\n *\n *     // Subsequent calls advance time and track difference.\n *\n *     // No time difference here.\n *     timer(diff0, 200); // => { step: '-', time: 200, dt: 0 };\n *     timer(add0, 0); // => { step: 200, time: 200, dt: 0 };\n *\n *     // Time-difference here with a change or step, into a new result target.\n *     const diff1 = timer(diff0, 300, {});\n *     // => { step: '-', time: 300, dt: 100 };\n *     const add1 = timer(add0, null, {});\n *     // => { step: 200, time: 400, dt: 200 };\n *\n *     diff1.time-diff0.time === diff1.dt; // => true;\n *     add1.time-add0.time === add1.dt; // => true;\n *\n * @param {object} state The state being tracked.\n * @param {number} [state.time=startDef] The initial time.\n * @param {string|number} [state.step=stepDef] How time advances:\n *     - Difference since last `time`: `'diff'`/`'dt'`/`'-'`/`'⏳'`.\n *     - Pause: `'pause'`/`'⏸'`, or number zero (`0`).\n *     - Add `time` step: `'add'`/`'+'`/`'⏭'`, or non-zero number (step size).\n * @param {number|function} [now] The time now (clock/frame/step/etc), or a\n *     function giving it; if not given, uses `state.step` if numeric or\n *     `nowDef[state.step]` otherwise.\n * @param {object|false} [out=state] The state to set up; modifies `state` if\n *     not given.\n *\n * @returns {object|number} The given `out` set up with its initial `time`; or\n *     if `out` is falsey, returns the relevant calculated unknown value:\n *     - The difference since last `time` for `diff` step.\n *     - The updated `time` for `add` or `pause` step.\n */\nexport function timer(state, now, out = state) {\n    // Get the initial time and step-step.\n    const { time: t0 = startDef, step = stepDef, now: n } = state;\n    // Get the step mode - from a key into `steps` or a numerical value.\n    const s = (steps[step] ?? step);\n    const diff = (s === steps.diff);\n    const t = (now ?? n ?? nowDef[s] ?? s);\n\n    // Step by `s`:\n    // - `0` or falsey to `pause`\n    // - `steps.diff` for difference since last `time`\n    // - `steps.add` or a number to add a `time` step\n    const t1 = ((!s)? t0 : ((diff)? 0 : t0)+((isNaN(t))? t() : t));\n    const dt = t1-t0;\n\n    // If only returning a value, return the relevant calculated unknown.\n    if(!out) { return ((diff)? dt : t1); }\n\n    out.time = t1;\n    out.dt = dt;\n    out.step = step;\n\n    return out;\n}\n\nexport default timer;\n","const r = Array.prototype.reduce;\n\n/**\n * Reduce an array-like list.\n * Similar to native, but with iteratee-first arguments.\n * Supports the native single-argument behaviour.\n *\n * @see Array.prototype.reduce\n *\n * @param {function} f Iteratee function, called as `Array`'s `reduce` does.\n * @param {array|*} a List to reduce over, array or array-like.\n * @param {*} [to] The initial accumulator, if any; handled like `Array`'s\n *     `reduce` does, given or not.\n *\n * @returns {*} The result of running the reducer iteratee function over all\n *     elements of the list.\n */\nexport const reduce = (f, a, to) =>\n    // Needs separate `call` because native detects even `undefined` parameter.\n    ((to === undefined)? r.call(a, f) : r.call(a, f, to));\n\nexport default reduce;\n","import { reduce } from './reduce';\n\n/**\n * Map an array-like list.\n * Similar to native, but with iteratee-first arguments; and allows the object\n * into which properties will be mapped to be defined (a new array, by default),\n * avoiding always creating new arrays.\n *\n * @see Array.prototype.map\n * @see [reduce]{@link ./reduce.js}\n *\n * @param {function} f The iteratee function, given standard `Array.map`\n *     arguments, and any given `to`.\n * @param {array|*} a The list to map over, array or array-like.\n * @param {false|*} [to=[]] The initial accumulator, if given; `a` if falsey; or\n *     a new array if not given.\n *\n * @returns {*} The result of mapping `to` through the iteratee function over\n *     the `a` list.\n */\nexport const map = (f, a, to = []) => reduce((to, v, i) => {\n        to[i] = f(v, i, a, to);\n\n        return to;\n    },\n    a, (to || a));\n\nexport default map;\n","const e = Array.prototype.forEach;\n\n/**\n * Iterates a function over every element of a list, returning the list.\n *\n * @see Array.prototype.forEach\n *\n * @param {function} f The iteratee function.\n * @param {array|*} a List to iterate over, array or array-like.\n *\n * @returns {array|*} The given list.\n */\nexport const each = (f, a) => {\n    e.call(a, f);\n\n    return a;\n}\n\nexport default each;\n","const { fill } = Array.prototype;\nconst { isFinite } = Number;\nconst { floor } = Math;\n\n/**\n * Fills list with the given items filled via `Array`'s `fill`.\n *\n * @see Array.constructor\n * @see Array.prototype.fill\n * @see Number.isFinite\n *\n * @param {number|array|*} [l=0] How many items to create, or existing list.\n * @param {*} [value] A value to fill the array with; for `Array`'s `fill`.\n * @param {number} [start] Start index, inclusive; for `Array`'s `fill`.\n * @param {number} [end] End index, exclusive; for `Array`'s `fill`.\n *\n * @returns {array|*} List with items filled as given.\n */\nexport const range = (l = 0, value, start, end) =>\n    fill.call(((isFinite(l))? Array(floor(l)) : l), value, start, end);\n\nexport default range;\n","/**\n * Wraps an index over a given length, so that indexes greater than the length\n * loop back past `0`, and indexes less than `0` loop backward from the length.\n * Similar to the indexing behaviour of `Array`'s `slice`.\n * Indexing is the equivalent of a true _modulo_ operator, where JavaScript's\n * `%` operator is actually a _remainder_ operator.\n *\n * @see Array.prototpye.slice\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\n *\n * @param {number} i Index to wrap.\n * @param {number} l Length to wrap the index over.\n *\n * @returns {number} The index wrapped over the length.\n */\nexport const wrapIndex = (i, l) => ((i%l)+l)%l;\n\nexport default wrapIndex;\n","import wrapIndex from './wrap-index';\n\n/**\n * Gives an index wrapped over a given length, or the entry at the wrapped\n * index in a given list; wrapped backwards, forwards, never exceeding bounds.\n *\n * @see [wrapIndex]{@link ./wrap-index.js}\n *\n * @param {number} i The index to wrap.\n * @param {number|array|*} l List to index, array or array-like; or numeric\n *     length for a numeric `wrapIndex` result instead.\n * @param {number} [end=l.length] Length to wrap the index over; allows wrapping\n *     over a sub-range of a list; if not given, tries the list's length.\n *\n * @returns {number|*} The index wrapped over the given length by `wrapIndex`;\n *     or the list entry at the wrapped index, if given a list.\n */\nexport const wrap = (i, l, end = l.length) =>\n    ((end || (end === 0))? l[wrapIndex(i, end)] : wrapIndex(i, l));\n\nexport default wrap;\n","/**\n * The 3 vertices of a 2D triangle covering the viewport in NDC coordinates ([-1, 1]).\n *\n * @export\n * @type {array.<array.<number>>}\n */\nexport const vertices = [[-1, -1], [-1, 4], [4, -1]];\n\nexport const count = vertices.length;\nexport const dim = 2;\n\n/**\n * The flat array of the above triangle, to be bound as a WebGL attribute buffer for\n * rendering the triangle in the vertex shader.\n * These positions will result in clipped NDC coordinates ([-1, 1]) over the\n * viewport's width and height.\n *\n * @export\n * @type {array.<number>}\n */\nexport const positions = vertices.flat();\n\nexport default positions;\n","/**\n * Default properties for `gpgpu` and `GL` capabilities and resources.\n *\n * @module\n * @category JS\n */\nimport { positions, count } from '@epok.tech/gl-screen-triangle';\n\nimport vertGLSL from './index.vert.glsl';\n\n/** Default vertex shader `GLSL` code. */\nexport const vertDef = vertGLSL;\n\n/**\n * Default vertex positions `attribute`; 3 points of a large flat triangle.\n *\n * @see {@link step.toStep}\n */\nexport const positionsDef = positions;\n\n/**\n * Default vertex `count`; 3 points of a large flat triangle.\n *\n * @see {@link step.toStep}\n */\nexport const countDef = count;\n\n// The required and optional `GL` extensions for a `gpgpu` state.\n\n/** Default required `GL` extensions; none. */\nexport const extensions = [];\n\n/** Default required `GL` extensions to render to `float` buffers. */\nexport const extensionsFloat =\n  ['oes_texture_float', 'webgl_color_buffer_float'];\n\n/** Default required `GL` extensions to render to `half float` buffers. */\nexport const extensionsHalfFloat =\n  ['oes_texture_half_float', 'ext_color_buffer_half_float'];\n\n/** Default optional `GL` extensions; update more data in one render pass. */\nexport const optionalExtensions = ['webgl_draw_buffers'];\n\n/**\n * Prefix namespace to avoid naming clashes; recommended.\n *\n * @see {@link index.vert.glsl}\n */\nexport const preDef = 'gpgpu_';\n\n/**\n * Default minimum allowable channels for `framebuffer` attachments.\n * This avoids `RGB32F` `framebuffer` attachments, which errors on Firefox.\n *\n * @see {@link state.framebuffer}\n * @see [Firefox `RGB32F` bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1448632)\n */\nexport const channelsMinDef = 4;\n\n/**\n * Default minimum allowable channels for `framebuffer` attachments.\n * This avoids `RGB32F` `framebuffer` attachments, which errors on Firefox.\n *\n * @see {@link state.framebuffer}\n * @see [Firefox `RGB32F` bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1448632)\n */\nexport const channelsMaxDef = 4;\n\n/**\n * Default maximum `texture`s bound per pass.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const buffersMaxDef = 1;\n\n/**\n * Default how many steps are bound as outputs, unavailable as input; for\n * platforms forbidding read/write of same buffer.\n */\nexport const boundDef = 1;\n\n/**\n * Default length of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to this power.\n */\nexport const scaleDef = 9;\n\n/**\n * Default width of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to the default scale.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const widthDef = 2**scaleDef;\n\n/**\n * Default height of the data `texture`s sides to allocate; gives a square\n * power-of-two `texture` raising 2 to the default scale.\n *\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n */\nexport const heightDef = 2**scaleDef;\n\n/** Default number steps of state to track. */\nexport const stepsDef = 2;\n/** Default values to track; gives 1 set of `texture` channels. */\nexport const valuesDef = [channelsMaxDef];\n\n// `GL` resource format defaults.\n\n/**\n * Default `texture` data type.\n *\n * @see {@link state.texture}\n */\nexport const typeDef = 'float';\n\n/**\n * Default `texture` minification filter.\n *\n * @see {@link state.texture}\n */\nexport const minDef = 'nearest';\n\n/**\n * Default `texture` magnification filter.\n *\n * @see {@link state.texture}\n */\nexport const magDef = 'nearest';\n\n/**\n * Default `texture` wrap mode, avoid `WebGL1` needing power-of-2 `texture`.\n *\n * @see {@link state.texture}\n */\nexport const wrapDef = 'clamp';\n\n/**\n * Default `framebuffer` depth attachment.\n *\n * @see {@link state.framebuffer}\n */\nexport const depthDef = false;\n\n/**\n * Default `framebuffer` stencil attachment.\n *\n * @see {@link state.framebuffer}\n */\nexport const stencilDef = false;\n\n/** Whether states merge into one `texture`; one merged `texture` by default. */\nexport const mergeDef = true;\n\n/**\n * A `RegExp` to find the `GLSL` version `number` in a `GL` parameter\n * `SHADING_LANGUAGE_VERSION` formatted `string`.\n */\nexport const glslRx = /[0-9\\.]+/;\n\n/**\n * Set a maximum to guard against number overflow.\n *\n * @see [SO](https://stackoverflow.com/a/67791670/716898)\n */\nexport const stepMaxDef = (2**15)-1;\n\n/**\n * Default clear settings to clear each pass's `framebuffer`.\n *\n * @see {@link step.toStep}\n * @see {@link api.clear}\n * @see {@link api.framebuffer}\n *\n * @type {{color:[0,0,0,0],depth:1,stencil:0,framebuffer?:framebuffer}}\n * @prop {framebuffer} [framebuffer] Any `framebuffer` to clear, set upon each\n *   pass.\n */\nexport const clearPassDef = { color: [0, 0, 0, 0], depth: 1, stencil: 0 };\n\n/**\n * Default `getFramebuffer` options, to bind a given `color` to it.\n *\n * @see {@link step.updateMerge}\n * @see {@link api.framebuffer}\n * @see {@link api.getFramebuffer}\n *\n * @prop {texture|null} color Any `texture` to bind as a `framebuffer` output.\n */\nexport const copyFrameDef = { color: null };\n\n/**\n * Default `texture.subimage` options, to bind a given `color`.\n *\n * @see {@link step.updateMerge}\n * @see {@link api.texture}\n * @see {@link api.subimage}\n *\n * @prop {true} copy Indicates `texture.subimage` should copy data from the\n *   currently-bound `framebuffer`.\n */\nexport const copyImageDef = { copy: true };\n","/**\n * Default `gpgpu` vertex shader.\n *\n * @see [@epok.tech/gl-screen-triangle/uv-texture.vert.glsl](https://github.com/keeffEoghan/gl-screen-triangle/tree/master/uv-texture.vert.glsl)\n */\n\nprecision highp float;\n\n/**\n * Uses the default prefix namespace; replaced with any given prefix if this\n * shader's used during `toStep`.\n *\n * @see {@link const.preDef}\n * @see {@link step.toStep}\n */\nattribute vec2 gpgpu_position;\n\nvarying vec2 uv;\n\nvoid main() {\n  // Texture coordinates, range `[0, 1]`, y-axis points upwards.\n  uv = (gpgpu_position*0.5)+0.5;\n  gl_Position = vec4(gpgpu_position, 0, 1);\n}\n","/**\n * The `gpgpu` maps of data for optimal inputs/outputs on a platform.\n *\n * These maps show how to make optimal use of a platform's supported features,\n * how to pack/unpack their data from `framebuffer`s/`texture`s, perform minimal\n * needed samples to retrieve any past values they must derive from, etc.\n *\n * Shaders may declare values they output, values they derive from, groupings of\n * in/dependent values - without handling how these concerns map to the\n * particular platform resources they're using.\n *\n * Platform limits/features/extensions are accounted for, to produce the most\n * efficient mappings available with the least I/O when it comes to drawing\n * (draw passes, `texture` samples, etc).\n *\n * @module\n * @category JS\n *\n * @todo Allow passes within/across `texture`s; separate data/`texture` shapes.\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport each from '@epok.tech/fn-lists/each';\n\nimport { valuesDef, channelsMaxDef, buffersMaxDef } from './const';\n\nconst { isInteger } = Number;\n\n/**\n * Determines whether a given value is valid and can be stored within the\n * channels available.\n *\n * @param {number} value A value to validate.\n * @param {number} [channelsMax] The maximum channels available to store values.\n *\n * @returns {boolean} Whether the given `value` is valid.\n */\nexport const validValue = (value, channelsMax = channelsMaxDef) =>\n  ((1 <= value) || (value <= channelsMax) ||\n    !!console.error(`\\`gl-gpgpu\\`: the given value (${value}) exceeds the `+\n      `range of channels available, \\`[1, ${channelsMax}]\\` inclusive.`,\n      value, channelsMax));\n\n/**\n * Minimise resource usage, order `values` to pack into blocks of `channelsMax`;\n * interpreted as indexes into the given `values`.\n *\n * @see {@link mapGroups}\n *\n * @example ```\n *   packValues([1, 2, 3], 4, []); // =>\n *   [2, 0, 1];\n *\n *   packValues([3, 2, 1], 4, []); // =>\n *   [0, 2, 1];\n *\n *   packValues([4, 3, 2], 4, []); // =>\n *   [0, 1, 2];\n *\n *   packValues([1, 1, 4, 2], 4, []); // =>\n *   [2, 3, 0, 1];\n * ```\n *\n * @param {array.<number>} values Each entry is how many interdependent channels\n *   are grouped into one texture in one pass, separate entries may be across\n *   one or more textures/passes. See `mapGroups`.\n * @param {number} [channelsMax=channelsMaxDef] The maximum number of channels\n *   per texture. See `mapGroups`.\n * @param {array} [to=[]] An `array` to store the result; a new `array` if not\n *   given.\n *\n * @returns {array.<number>} `to` The indexes of the given `values`, reordered\n *   to pack into the fewest buckets of `channelsMax` size or less; stored in\n *   the given `to` array.\n */\nexport function packValues(values, channelsMax = channelsMaxDef, to = []) {\n  // Fill `to` with indexes of `values`, and ensure it's the same length.\n  map((_, i) => i, values, to).length = values.length;\n\n  /** Counts the number of empty channels in the current group. */\n  let channels = channelsMax;\n  /** How many values have already been packed. */\n  let packed = 0;\n  /** Tracks the value that best fits the free channels (fills it tightest). */\n  let fitIndex = 0;\n  let fitSize = Infinity;\n\n  for(let i = 0; packed < values.length;) {\n    const v = packed+i;\n    const value = values[to[v]];\n\n    if(!validValue(value, channelsMax)) { return to; }\n\n    // Check how value fits the channels - valid is >= 0, perfect is 0.\n    const fit = channels-value;\n\n    if((fit >= 0) && (fit < fitSize)) {\n      fitSize = fit;\n      fitIndex = v;\n    }\n\n    // Not a perfect fit and can keep searching for better fits - continue.\n    if((fitSize !== 0) && (v < values.length-1)) { ++i; }\n    else {\n      // Got a perfect fit or the search ended - swap in best fit value.\n      const pack = to[fitIndex];\n\n      to[fitIndex] = to[packed];\n      to[packed] = pack;\n\n      // Reduce the free channels by the best value, reset if needed.\n      ((channels -= values[pack]) > 0) || (channels = channelsMax);\n      // Start the search again over the remaining unpacked entries.\n      fitIndex = ++packed;\n      fitSize = Infinity;\n      i = 0;\n    }\n  }\n\n  return to;\n}\n\n/**\n * Groups the `values` of `gpgpu` data across draw passes and data textures.\n *\n * @see {@link packValues}\n *\n * @example ```\n *   const x = 2;\n *   const y = 4;\n *   const z = 1;\n *   const maps = { values: [x, y, z], channelsMax: 4 };\n *\n *   // No optimisations - values not packed, single texture output per pass.\n *   mapGroups({ ...maps, buffersMax: 1, packed: false }); // =>\n *   {\n *     ...maps, packed: false,\n *     textures: [[0], [1], [2]], // length === 3\n *     passes: [[0], [1], [2]], // length === 3\n *     valueToTexture: [0, 1, 2], valueToPass: [0, 1, 2],\n *     textureToPass: [0, 1, 2]\n *   };\n *\n *   // Automatically packed values - values across fewer textures/passes.\n *   mapGroups({ ...maps, buffersMax: 1 }); // =>\n *   {\n *     ...maps, packed: [1, 0, 2],\n *     textures: [[1], [0, 2]], // length === 2\n *     passes: [[0], [1]], // length === 2\n *     valueToTexture: [1, 0, 1], valueToPass: [1, 0, 1],\n *     textureToPass: [0, 1]\n *   };\n *\n *   // Can bind more texture outputs per pass - values across fewer passes.\n *   mapGroups({ ...maps, buffersMax: 4 }); // =>\n *   {\n *     ...maps, packed: [1, 0, 2],\n *     textures: [[1], [0, 2]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [1, 0, 1], valueToPass: [0, 0, 0],\n *     textureToPass: [0, 0]\n *   };\n *\n *   // Custom packed values - fuller control.\n *   mapGroups({ ...maps, buffersMax: 4, packed: [0, 2, 1] }); // =>\n *   {\n *     ...maps, packed: [0, 2, 1],\n *     textures: [[0, 2], [1]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [0, 1, 0], valueToPass: [0, 0, 0],\n *     textureToPass: [0, 0]\n *   };\n *\n *   // Merge dependent values - fuller control, but no map for merged values.\n *   mapGroups({ ...maps, values: [x+z, y], buffersMax: 4 }); // =>\n *   {\n *     ...maps, packed: [1, 0],\n *     textures: [[1], [0]], // length === 2\n *     passes: [[0, 1]], // length === 1\n *     valueToTexture: [1, 0], valueToPass: [0, 0],\n *     textureToPass: [0, 0]\n *   };\n * ```\n *\n * @param {object} [maps=\\{\\}] Initial maps settings; new `object` if not given.\n *\n * @param {array.<number>} [maps.values=valuesDef()] An `array` where each\n *   `number` denotes how many value channels are grouped into one data-texture\n *   in one draw pass (where any value map logic isn't handled here); each\n *   separate number may be computed across one or more data-textures/passes.\n *\n *   Each value denotes the number of dependent channels to compute together;\n *   separate values denote channels that are independent, and may be drawn in\n *   the same or separate passes, depending on settings/support.\n *\n *   The order may affect the number of textures/passes needed; can maintain\n *   order as-is, or use a more efficient `packed` order. See `packValues`.\n *\n * @param {number} [maps.channelsMax=channelsMaxDef] Maximum channels per\n *   texture.\n * @param {number} [maps.buffersMax=buffersMaxDef] Maximum textures bound per\n *   pass.\n * @param {array.<number>} [maps.packed] An `array` of indexes into `values`\n *   packed into an order that best fits into blocks of `channelsMax` to\n *   minimise resources; or `false`y to use `values` in their given order; uses\n *   `packValues` if not given.\n * @param {object} [to=maps] An `object` to contain the results; modifies `maps`\n *   if not given.\n *\n * @returns {object} `to` The given `to` `object`; how `values` are grouped\n *   per-texture per-pass per-step, meta information, and given parameters.\n * @returns {array.<array.<number>>} `to.passes` Textures grouped into passes,\n *   as `arrays` corresponding to `framebuffer`s in separate draw passes; whose\n *   values are indexes into `to.textures`.\n * @returns {array.<array.<number>>} `to.textures` Values grouped into\n *   textures, as `array`s corresponding to `framebuffer` attachments, into\n *   which `values` are drawn; whose values are indexes into `to.values`.\n * @returns {array.<number>} `to.values` The `values`, as given.\n * @returns {number} `to.buffersMax` The max textures per pass, as given.\n * @returns {number} `to.channelsMax` The max channels per-texture, as given.\n * @returns {array.<number>} `to.valueToTexture` Inverse map from each index of\n *   `to.values` to the index of the data-texture containing it.\n * @returns {array.<number>} `to.valueToPass` Inverse map from each index of\n *   `to.values` to the index of the pass containing it.\n * @returns {array.<number>} `to.textureToPass` Inverse map from each index of\n *   `to.textures` to the index of the pass containing it.\n */\nexport function mapGroups(maps = {}, to = maps) {\n  const {\n      values = valuesDef(),\n      buffersMax = buffersMaxDef, channelsMax = channelsMaxDef,\n      // Pack `values` into blocks of `channelsMax` to minimise resources.\n      packed = packValues(values, channelsMax)\n    } = maps;\n\n  // Ensure any properties changed are included.\n  to.values = values;\n  to.buffersMax = buffersMax;\n  to.channelsMax = channelsMax;\n  to.packed = packed;\n\n  const passes = to.passes = [[]];\n  const textures = to.textures = [[]];\n  const valueToTexture = to.valueToTexture = [];\n  const valueToPass = to.valueToPass = [];\n  const textureToPass = to.textureToPass = [];\n  /** Counts the number of channels written in a single draw pass. */\n  let channels = 0;\n  // Get the value, via `packed` if valid, or directly as given in `values`.\n  const getValue = ((packed)? ((_, i) => values[i]) : ((v) => v));\n  const getIndex = ((packed)? ((i) => packed[i]) : ((i) => i));\n\n  return reduce((to, v, i) => {\n      const index = getIndex(i);\n      const value = getValue(v, index);\n\n      if(!validValue(value, channelsMax)) { return to; }\n\n      let p = passes.length-1;\n      let pass = passes[p];\n      let t = textures.length-1;\n      let texture = textures[t];\n\n      if((channels += value) > channelsMax) {\n        channels = value;\n        t = textures.push(texture = [])-1;\n        (pass.length >= buffersMax) && (p = passes.push(pass = [])-1);\n        pass.push(t);\n        textureToPass.push(p);\n      }\n      else if(pass.length === 0) {\n        pass.push(t);\n        textureToPass.push(p);\n      }\n\n      texture.push(index);\n      valueToTexture[index] = t;\n      valueToPass[index] = p;\n\n      return to;\n    },\n    values, to);\n}\n\n/**\n * Maps the minimal set of texture reads to derive the next state of values from\n * a past state of values they depend upon.\n *\n * @see {@link mapGroups}\n *\n * @example ```\n *   const maps = mapGroups({\n *     // See `mapGroups` examples for resulting maps.\n *     values: [2, 4, 1], channelsMax: 4, buffersMax: 1, packed: false,\n *     // Derived step/value indexes, per-value; sample entries include:\n *     derives: [\n *       // Single...\n *       2,\n *       // Empty...\n *       ,\n *       // Multiple...\n *       [\n *         // Defined step...\n *         [1, 0],\n *         // All values at any given level/step...\n *         true\n *       ]\n *     ]\n *   });\n *\n *   mapSamples(maps); // =>\n *   {\n *     ...maps,\n *     // Minimum texture samples for values; nested per-pass, per-value.\n *     // Deepest arrays are step/texture index pairs into `maps.textures`.\n *     samples: [\n *       [[0, 2]],\n *       null,\n *       [[1, 0], [0, 0], [0, 1], [0, 2]]\n *     ],\n *     // Value indexes into `to.samples`; nested per-pass, per-value.\n *     // Map from a value index to data it needs in the minimal samples.\n *     reads: [\n *       [[0]],\n *       null,\n *       [null, null, [0, 1, 2, 3]]\n *     ]\n *   };\n * ```\n *\n * @param {object} maps How values are grouped per-`texture` per-pass per-step.\n *   See `mapGroups`.\n * @param {true|array} [maps.derives] How any new values derive from past\n *   values. If not given `false`y, this returns with no changes.\n * @param {true|number|array} [maps.derives.[]] L1\n * @param {true|number|array} [maps.derives.[].[]] L2\n * @param {true|number} [maps.derives.[].[].[]] L3\n *\n * @param {true|array.<true,number,array.<true,number,array.<true,number>>>} [maps.derives]\n *   How values derive from past values.\n *\n *   If given as a sparse array, each entry relates the corresponding value to\n *   any past value steps/indexes it derives from - a value not derived from\n *   past values may have an empty/null entry; a value derives from past\n *   values where its entry has:\n *   - Numbers; deriving from the most recent state at the given value index.\n *   - Lists of numbers; deriving from the given past state index (1st number\n *     denotes how many steps ago), at the given value index (2nd number).\n *\n *   The nested hierarchy thus has any `pass,[values,[value,[step, value]]]`.\n *   If any level is given as `true`, maps to sample all values, at the given\n *   step (or most recent step, if none given).\n *\n *   If no `derives` given, no samples are mapped, `to` is returned unchanged.\n *\n * @param {array.<array.<number>>} maps.passes Textures grouped into passes. See\n *   `mapGroups`.\n * @param {array.<array.<number>>} maps.textures Values grouped into textures. See\n *   `mapGroups`.\n * @param {array.<number>} maps.valueToTexture Inverse map from each value index\n *   to the data texture index containing it.\n * @param {object} [to=maps] The object to store the result in; `maps` if not\n *   given.\n *\n * @returns {object} `to` The given `to` object, with resulting maps added for\n *   any given `maps.derives`.\n * @returns {array.<array.<array.<number>>>} `[to.samples]` Map of the minimum\n *   set of indexes into `maps.textures` that need to be sampled per-pass,\n *   to get all `derives` needed for each value of `maps.values` of each\n *   pass of `maps.passes`.\n * @returns {array.<array.<array.<number>>>} `[to.reads]` Sparse map from\n *   each value of `derives` to its step and texture indexes in `to.samples`.\n * @returns {true|array.<true,number,array.<true,number,array.<true,number>>>}\n *   `[to.derives]` How new values derive from past values, as given.\n */\nexport function mapSamples(maps = {}, to = maps) {\n  const { derives, passes, textures, valueToTexture } = maps;\n\n  if(!derives) { return to; }\n\n  const reads = to.reads = [];\n  const cache = {};\n\n  const all = (step = 0) =>\n    cache[step] ??= map((t, v) => [step, v], valueToTexture);\n\n  const getAddSample = (pass, value) => function add(set, derive, d) {\n    let step = 0;\n    let texture;\n\n    if(derive === true) { return reduce(add, all(step), set); }\n    else if(isInteger(derive)) { texture = valueToTexture[derive]; }\n    else if(derive[1] === true) { return reduce(add, all(derive[0]), set); }\n    else {\n      step = derive[0];\n      texture = valueToTexture[derive[1]];\n    }\n\n    if(!(isInteger(step) && isInteger(texture))) {\n      return console.error('`mapSamples`: invalid map for sample',\n        derives, maps, pass, value, derive, d, step, texture);\n    }\n\n    // Create the set if not already created.\n    const to = (set || []);\n    // Check for any existing matching step/texture read in the set.\n    const i = to.findIndex(([s, t]) => (s === step) && (t === texture));\n\n    // Add the read for this value in this pass; creating any needed maps.\n    ((reads[pass] ??= [])[value] ??= [])\n      // A new read as needed, or any existing matching read.\n      .push((i < 0)? to.push([step, texture])-1 : i);\n\n    return to;\n  };\n\n  const getAddSamples = (pass) => (set, value) => {\n    const valueDerives = ((derives === true)? derives : derives[value]);\n\n    return ((!valueDerives && (valueDerives !== 0))? set\n      : (((valueDerives === true) || isInteger(valueDerives))?\n        getAddSample(pass, value)(set, valueDerives)\n      : reduce(getAddSample(pass, value), valueDerives, set)));\n  }\n\n  to.samples = map((pass, p) => reduce((set, texture) =>\n        reduce(getAddSamples(p), textures[texture], set),\n      pass, null),\n    passes, []);\n\n  return to;\n}\n\n/**\n * Maps a full step, creates maps grouping given values per-`texture` per-pass\n * per-step, and minimal samples and reads if new values derive from past ones.\n *\n * @see {@link mapGroups}\n * @see {@link mapSamples}\n *\n * @param {object} [maps] Input value maps and settings.\n * @param {object} [to=maps] An `object` to contain the results; modifies `maps`\n *   if not given.\n *\n * @returns {object} `to` The given `to` object; how `values` are grouped\n *   per-`texture` per-pass per-step, meta information, and given parameters;\n *   and minimal samples and reads for any given `maps.derives`.\n */\nexport const mapStep = (maps, to = maps) => mapSamples(mapGroups(maps, to), to);\n\nexport default mapStep;\n","/**\n * @module\n * @category JS\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport range from '@epok.tech/fn-lists/range';\n\nconst { isFinite, isInteger } = Number;\n\n/**\n * Returns the given width, for various properties in order of precedence.\n *\n * @see {@link data.toData}\n *\n * @param {object} value Size (width) `number`, or an `object` containing it.\n * @param {number} [value.width] Width; supersedes further aliases.\n * @param {number} [value.w] Alias of `width`; supersedes further aliases.\n * @param {number} [value.x] Alias of `width`; supersedes further aliases.\n * @param {object} [value.shape] Shape (width) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {object} [value.size] Size (width) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {number} [value.side] Width and height; supersedes further aliases.\n * @param {number} [value.ʼ0ʼ] Alias of `width`; supersedes `value` itself.\n *\n * @returns {number} The width as given in one of the expected properties, or\n *   any given `value` number, or `null`ish if no width could be resolved.\n */\nexport function getWidth(value) {\n  const { width, w, x, shape, size, side, 0: v0 } = value;\n\n  return width ?? w ?? x ??\n    (shape && getWidth(shape)) ?? (size && getWidth(size)) ??\n    side ?? v0 ?? ((isFinite(value))? value : null);\n}\n\n/**\n * Returns the given height, for various properties in order of precedence.\n *\n * @see {@link data.toData}\n *\n * @param {object} value Size (height) `number`, or an `object` containing it.\n * @param {number} [value.height] Height; supersedes further aliases.\n * @param {number} [value.h] Alias of `height`; supersedes further aliases.\n * @param {number} [value.y] Alias of `height`; supersedes further aliases.\n * @param {object} [value.shape] Shape (height) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {object} [value.size] Size (height) `number`, or an `object`\n *   containing it; supersedes further aliases.\n * @param {number} [value.side] Width and height; supersedes further aliases.\n * @param {number} [value.ʼ1ʼ] Alias of `height`; supersedes `value` itself.\n *\n * @returns {number} The height as given in one of the expected properties, or\n *   any given `value` number, or `null`ish if no height could be resolved.\n */\nexport function getHeight(value) {\n  const { height, h, y, shape, size, side, 1: v1 } = value;\n\n  return height ?? h ?? y ??\n    (shape && getHeight(shape)) ?? (size && getHeight(size)) ??\n    side ?? v1 ?? ((isFinite(value))? value : null);\n}\n\n/**\n * Gives the number of entries to draw a full state, for various parameters.\n * Effectively equivalent to `gl_VertexID` in `WebGL2`.\n *\n * @see {@link getWidth}\n * @see {@link getHeight}\n * @see {@link data.toData}\n *\n * @param {object} [size=1] Size `number` of data resources, or an `object`\n *   containing it; width if `height` is given as a second parameter.\n *   See `getWidth` and `getHeight`.\n * @param {number} [size.entries] The `number` of entries of data resources.\n * @param {object} [height=1] Height `number` of data resources, or an `object`\n *   containing it.\n *\n * @returns {number} The number of entries needed to draw a full state; each\n *   entry of a data-texture (its area, equivalent to `state.size.entries`).\n */\nexport const countDrawEntries = (size = 1, height = 1) =>\n  size?.entries ?? (getWidth(size) ?? 1)*(getHeight(height) ?? 1);\n\n/**\n * Gives the `array` of indexes needed to draw a full state.\n *\n * @param {object} size The `number` of entries in each data-`texture`; or an\n *   `object` of size/type of data resources.\n *\n * @returns {array.<number>} An `array` of indexes for drawing all\n *   data-`texture` entries, numbered `0` to `size-1`.\n */\nexport const getDrawIndexes = (size) =>\n  map((_, i) => i, range(isInteger(size)? size : countDrawEntries(size)), 0);\n\n/**\n * 2 raised to the given numeric power, or `null` if not given.\n *\n * @param {number} [scale] The power to raise 2 to.\n *\n * @returns 2 raised to the given numeric power, or `null` if not given.\n */\nexport const getScaled = (scale) => ((isFinite(scale))? 2**scale : null);\n","/**\n * The `gpgpu` state and `GL` data resources.\n *\n * Handles `framebuffer`s, `texture`s; and the main meta info.\n *\n * @module\n * @category JS\n *\n * @todo Allow passes into or across `texture`s; separate shapes of data and\n *   `texture`s.\n * @todo In-place updates of complex resources and meta info.\n */\n\nimport range from '@epok.tech/fn-lists/range';\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\n\nimport { getWidth, getHeight, getScaled } from './size';\n\nimport {\n    widthDef, heightDef, stepsDef, valuesDef, channelsMinDef, typeDef,\n    minDef, magDef, wrapDef, depthDef, stencilDef, mergeDef\n  } from './const';\n\nconst { isInteger } = Number;\n\n/**\n * Set up the `gpgpu` resources and meta info for a state of a number data.\n *\n * @example ```\n *   const api = {\n *     framebuffer: ({ depth, stencil, width, height, color }) => null,\n *     texture: ({ type, min, mag, wrap, width, height, channels }) => null\n *   };\n *\n *   // Example with `webgl_draw_buffers` extension support, for 4 buffers.\n *   let maps = mapGroups({ values: [1, 2, 3], buffersMax: 4, packed: 0 });\n *   let state = { steps: 2, side: 10, maps };\n *\n *   const s0 = toData(api, state, {}); // =>\n *   {\n *     ...state,\n *     size: {\n *       steps: 2, passes: 2, textures: 4,\n *       width: 10, height: 10, shape: [10, 10], entries: 100\n *     },\n *     steps: [[s0.passes[0][0].framebuffer], [s0.passes[1][0].framebuffer]],\n *     // This setup results in fewer passes, as more buffers can be bound.\n *     passes: [\n *       [\n *         {\n *           framebuffer: api.framebuffer(s0.passes[0][0]),\n *           color: [s0.textures[0][0].texture, s0.textures[0][1].texture],\n *           map: [0, 1], // maps.passes[0]\n *           entry: 0, index: 0, step: 0,\n *           depth: false, stencil: false, width: 10, height: 10\n *         }\n *       ],\n *       [\n *         {\n *           framebuffer: api.framebuffer(s0.passes[1][0]),\n *           color: [s0.textures[1][0].texture, s0.textures[1][1].texture],\n *           map: [0, 1], // maps.passes[0]\n *           entry: 1, index: 0, step: 1,\n *           depth: false, stencil: false, width: 10, height: 10\n *         }\n *       ]\n *     ],\n *     textures: [\n *       [\n *         {\n *           texture: api.texture(s0.textures[0][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 0, index: 0, step: 0, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s0.textures[0][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 1, index: 1, step: 0, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ],\n *       [\n *         {\n *           texture: api.texture(s0.textures[1][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 2, index: 0, step: 1, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s0.textures[1][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 3, index: 1, step: 1, pass: 0,\n *           type: 'float', width: 10, height: 10, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ]\n *     ]\n *   };\n *\n *   // Example with no `webgl_draw_buffers` extension support, only 1 buffer.\n *   maps = mapGroups({ values: [1, 2, 3], buffersMax: 1, packed: 0 });\n *   state = { type: 'uint8', steps: 2, scale: 5, maps };\n *\n *   const s1 = toData(api, state, {}); // =>\n *   {\n *     ...state,\n *     size: {\n *       steps: 2, passes: 4, textures: 4,\n *       width: 32, height: 32, shape: [32, 32], entries: 1024\n *     },\n *     steps: [\n *       [s1.passes[0][0].framebuffer, s1.passes[0][1].framebuffer],\n *       [s1.passes[1][0].framebuffer, s1.passes[1][1].framebuffer]\n *     ],\n *     // This setup results in more passes, as fewer buffers can be bound.\n *     passes: [\n *       [\n *         {\n *           framebuffer: api.framebuffer(s1.passes[0][0]),\n *           color: [s1.textures[0][0].texture],\n *           map: [0], // maps.passes[0]\n *           entry: 0, index: 0, step: 0,\n *           depth: false, stencil: false, width: 32, height: 32\n *         },\n *         {\n *           framebuffer: api.framebuffer(s1.passes[0][1]),\n *           color: [s1.textures[0][1].texture],\n *           map: [1], // maps.passes[1]\n *           entry: 1, index: 1, step: 0,\n *           depth: false, stencil: false, width: 32, height: 32\n *         }\n *       ],\n *       [\n *         {\n *           framebuffer: api.framebuffer(s1.passes[1][0]),\n *           color: [s1.textures[1][0].texture],\n *           map: [0], // maps.passes[0]\n *           entry: 2, index: 0, step: 1,\n *           depth: false, stencil: false, width: 32, height: 32\n *         },\n *         {\n *           framebuffer: api.framebuffer(s1.passes[1][1]),\n *           color: [s1.textures[1][1].texture],\n *           map: [1], // maps.passes[1]\n *           entry: 3, index: 1, step: 1,\n *           depth: false, stencil: false, width: 32, height: 32\n *         }\n *       ]\n *     ],\n *     textures: [\n *       [\n *         {\n *           texture: api.texture(s1.textures[0][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 0, index: 0, step: 0, pass: 0,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s1.textures[0][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 1, index: 1, step: 0, pass: 1,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ],\n *       [\n *         {\n *           texture: api.texture(s1.textures[1][0]),\n *           map: [0, 1], // maps.textures[0]\n *           entry: 2, index: 0, step: 1, pass: 0,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         },\n *         {\n *           texture: api.texture(s1.textures[1][1]),\n *           map: [2], // maps.textures[1]\n *           entry: 3, index: 1, step: 1, pass: 1,\n *           type: 'uint8', width: 32, height: 32, channels: 4,\n *           min: 'nearest', mag: 'nearest', wrap: 'clamp'\n *         }\n *       ]\n *     ]\n *   };\n * ```\n *\n * @todo Example using `merge`.\n *\n * @see {@link api.texture}\n * @see {@link api.framebuffer}\n * @see {@link maps.mapGroups}\n * @see {@link maps.mapSamples}\n * @see {@link step.toStep}\n * @see {@link macros.macroSamples}\n * @see {@link macros.macroTaps}\n * @see {@link macros.macroPass}\n * @see {@link size.getWidth}\n * @see {@link size.getHeight}\n * @see {@link size.getScaled}\n *\n * @see [`sampler array index must be a literal expression`](https://stackoverflow.com/a/60110986/716898)\n * @see [`sampler2DArray`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_2d_array.html)\n * @see [`sampler3D`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html)\n *\n * @param {object} api The API for `GL` resources.\n * @param {texture} [api.texture] Function creating `GL` `texture`s.\n * @param {framebuffer} [api.framebuffer] Function creating `GL` `framebuffer`s.\n * @param {object} [state=\\{\\}] The state parameters.\n *\n * @param {number} [state.width=widthDef] Data width, aliases follow in order\n *   of precedence. See `getWidth`.\n * @param {number} [state.w] Alias of `state.width`. See `getWidth`.\n * @param {number} [state.x] Alias of `state.width`. See `getWidth`.\n * @param {number} [state.ʼ0ʼ] Alias of `state.width`. See `getWidth`.\n *\n * @param {number} [state.height=heightDef] Data height, aliases follow in order\n *   of precedence. See `getHeight`.\n * @param {number} [state.h] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.y] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.ʼ1ʼ] Alias of `state.height`. See `getHeight`.\n * @param {number} [state.shape] Data size. See `getWidth` and `getHeight`.\n * @param {number} [state.size] Data size. See `getWidth` and `getHeight`.\n * @param {number} [state.side] Data size of width/height.\n *   See `getWidth` and `getHeight`.\n * @param {number} [state.scale=scaleDef] Data size of width/height as a square\n *   power-of-two size, 2 raised to this power. See `getScaled`.\n *\n * @param {number|array} [state.steps=stepsDef] How many steps of state to\n *   track, or the list of states if already set up.\n * @param {object} [state.maps] How `state.maps.values` are grouped\n *   per-`texture` per-pass per-step. See `mapGroups`.\n * @param {array.<number>} [state.maps.values=valuesDef()] How values of each\n *   data item may be grouped into `texture`s across passes; set up here if not\n *   given. See `mapGroups`.\n * @param {number} [state.maps.channelsMin=channelsMinDef] The minimum allowed\n *   channels for `framebuffer` attachments; allocates unused channels as needed\n *   to reach this limit.\n * @param {number} [state.maps.textures] How values are grouped into `texture`s.\n *   See `mapGroups`.\n *\n * @param {string} [state.type=typeDef] Any `texture` data type value.\n * @param {string} [state.min=minDef] Any `texture` minification filter value.\n * @param {string} [state.mag=magDef] Any `texture` magnification filter value.\n * @param {string} [state.wrap=wrapDef] Any `texture` wrap mode value.\n * @param {object} [state.depth=depthDef] Any `framebuffer` depth attachment, or\n *   a flag for whether it should be created.\n * @param {object} [state.stencil=stencilDef] Any `framebuffer` stencil\n *   attachment, or a flag for whether it should be created.\n *\n * @param {object} [state.merge=mergeDef] Whether to merge states into\n *   one `texture`; `true`y handles merging here, with any given properties used\n *   as-is (the merged `texture` already set up); `false`y uses un-merged\n *   `array`s of `texture`s.\n *\n *   Merging allows shaders to access past steps by non-constant lookups; e.g:\n *   attributes cause `\"sampler array index must be a literal expression\"` on\n *   `GLSL3` spec and some platforms (e.g: `D3D`); but takes more work to copy\n *   the last pass's bound `texture`/s to merge into the past `texture`, so\n *   should be used to variably access past steps or avoid limits of `array`s of\n *   `texture`s.\n *   Only this merged past `texture` and those bound in an active pass are\n *   created, as upon each pass the output will be copied to the past `texture`,\n *   and bound `texture`s reused in the next pass.\n *   If not merging, all state is as output by its pass in its own one of the\n *   `array`s of `texture`s.\n *\n *   The default merged `texture` is laid out as `[texture, step]` on the\n *   `[x, y]` axes, respectively; if other layouts are needed, the merge\n *   `texture` can be given here to be used as-is, and the merging/copying and\n *   lookup logic in their respective hooks. See `toStep` and `macroTaps`.\n *   If a merge `texture` is given, size information is interpreted in a similar\n *   way and precedence as it is from `state`. See `getWidth` and `getHeight`.\n *\n * @param {number} [state.merge.width] Merged data width, aliases follow in\n *   order of precedence. See `state`.\n * @param {number} [state.merge.w] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.x] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.ʼ0ʼ] Alias of `state.merge.width`. See `state`.\n * @param {number} [state.merge.height] Merged data height, aliases follow in\n *   order of precedence. See `state`.\n * @param {number} [state.merge.h] Alias of `state.merge.height`. See `state`.\n * @param {number} [state.merge.y] Alias of `state.merge.height`. See `state`.\n *   See `state`.\n * @param {number} [state.merge.ʼ1ʼ] Alias of `state.merge.height`. See `state`.\n * @param {number} [state.merge.shape] Merged data size. See `state`.\n * @param {number} [state.merge.size] Merged data size. See `state`.\n * @param {number} [state.merge.side] Merged data size of width/height.\n * @param {number} [state.merge.scale] Merged data size of width/height as a\n *   square power-of-two size, 2 raised to this power. See `state`.\n *\n * @param {object} [to=state] The state object to set up. Modifies the given\n *   `state` object by default.\n *\n * @returns {object} `to` The state object, set up with the data resources and\n *   meta information, for use with `toStep` and drawing:\n * @returns {object.<number,array.<number,array.<number>>>} `to.maps` Any given\n *   `state.maps`. See `mapGroups`.\n * @returns {array.<array.<object.<texture,string,number,array.<number>>>>}\n *   `to.textures` The `texture`s per-step, as `array`s of objects of `texture`s\n *   and meta info. See `to.maps.textures`.\n * @returns {array.<array.<object.<framebuffer,number,array.<number>>>>}\n *   `to.passes` Passes per step, as `array`s of objects of `framebuffer`s,\n *   referencing `to.textures`, and meta info. See `to.maps.passes`.\n * @returns {array.<framebuffer<array.<texture>>>} `to.steps`\n *   Hierarchy of steps of state, as an `array` of `framebuffer`s from\n *   `to.passes`, with `array`s of `texture`s from `to.textures`, and meta\n *   information; set up here, or the given `state.steps` if it's an `array`.\n *   State data may be drawn into the `framebuffer`s accordingly.\n *   See `mapGroups` and `toStep`.\n * @returns {object|undefined} `[to.merge]` If merging, a given or new merged\n *   `texture` and copier `framebuffer`, with meta info. See `toStep` and\n *   `macroTaps`.\n * @returns {object.<texture,string,number>|undefined} `[to.merge.all]` Any\n *   given `state.merge.all`, or newly-created merged `texture` and meta info.\n * @returns {object.<framebuffer,string,number>|undefined} `[to.merge.next]` Any\n *   given `state.merge.next`, or newly-created `framebuffer` and meta info; for\n *   copying each pass's data into the `merge`d `texture`.\n * @returns {object} `to.size` Size/type information of the created resources.\n * @returns {string} `to.size.type` Data type of `framebuffer`s and `texture`s.\n * @returns {boolean} `to.size.depth` Whether `framebuffer`s attach depth.\n * @returns {boolean} `to.size.stencil` Whether `framebuffer`s attach stencil.\n * @returns {number} `to.size.channelsMin` Minimum channels in any `texture`.\n * @returns {number} `to.size.steps` Number of `to.steps` in the main flow.\n * @returns {number} `to.size.passes` Number of `to.passes` in `to.steps`.\n * @returns {number} `to.size.framebuffers` Number of `framebuffer`s created.\n * @returns {number} `to.size.textures` Number of `to.textures` in `to.passes`.\n * @returns {number} `to.size.colors` Number of `texture`s created.\n * @returns {number} `to.size.width` Width of `framebuffer`s and `texture`s.\n * @returns {number} `to.size.height` Height of `framebuffer`s and `texture`s.\n * @returns {array.<number>} `to.size.shape` Shape of `framebuffer`s and\n *   `texture`s, as `[to.size.width, to.size.height]`.\n * @returns {number} `to.size.entries` Number of entries in each `texture`.\n * @returns {object.<number,string,array.<number>>|undefined} `[to.size.merge]`\n *   Any size/type information about any created or given `merge`d `texture`.\n */\nexport function toData({ texture, framebuffer }, state = {}, to = state) {\n  const {\n      maps, scale, steps = stepsDef, merge = mergeDef,\n      // Resource format settings.\n      type = typeDef, min = minDef, mag = magDef, wrap = wrapDef,\n      depth = depthDef, stencil = stencilDef\n    } = state;\n\n  const scaled = getScaled(scale);\n  const width = Math.floor(getWidth(state) ?? scaled ?? widthDef);\n  const height = Math.floor(getHeight(state) ?? scaled ?? heightDef);\n\n  // Ensure any properties changed are included.\n  to.steps = steps;\n  to.merge = merge;\n  to.type = type;\n  to.min = min;\n  to.mag = mag;\n  to.wrap = wrap;\n  to.depth = depth;\n  to.stencil = stencil;\n  to.width = width;\n  to.height = height;\n\n  const {\n      values = (maps.values = valuesDef),\n      channelsMin = (maps.channelsMin = channelsMinDef),\n      textures: texturesMap\n    } = maps;\n\n  /**\n   * All `framebuffer` attachments need the same number of channels; enough to\n   * hold all values a pass holds, or all passes hold if merging and reusing.\n   */\n  const passChannels = (pass, min) =>\n    reduce((min, t) =>\n        Math.max(min, reduce((sum, v) => sum+values[v], texturesMap[t], 0)),\n      pass, min);\n\n  /**\n   * If merging past `texture`s and reusing `texture` attachments in each pass's\n   * `framebuffer`, pre-compute the minimum channels for a reusable pool of\n   * `texture` attachments that can hold any pass's values; since all a\n   * `framebuffer`'s attachments also need the same number of channels, this is\n   * also the same number of channels across all passes.\n   */\n  const mergeChannels = ((!merge)? null\n    : reduce((min, p) => passChannels(p, min), maps.passes, channelsMin));\n\n  /** Size of the created resources. */\n  const size = to.size = {\n    type, depth, stencil, channelsMin: mergeChannels ?? channelsMin,\n    steps: steps.length ?? steps,\n    passes: 0, framebuffers: 0, textures: 0, colors: 0,\n    width, height, shape: [width, height], entries: width*height\n  };\n\n  /** The `texture`s created for the `step`/`pass` render flow. */\n  const textures = to.textures = [];\n  /** The passes created for the `step`/`pass` render flow. */\n  const passes = to.passes = [];\n  /** The `texture`s bound to the next pass; reused if merging. */\n  let colorPool;\n\n  /**\n   * Add a `texture` attachment and meta info to `texture`s if applicable; to\n   * return its new `texture` or a reused one to bind to a pass in `passes`.\n   */\n  const addTexture = (channels, w, h, step, pass) => (index, c, _, color) => {\n    /** Properties passed for `texture` creation, then meta info. */\n    const to = { channels, width: w, height: h, type, min, mag, wrap };\n\n    // Resources.\n\n    /**\n     * Add/reuse `texture` color attachments as needed; add minimal `texture`s.\n     * If merging, passes may reuse any pass's existing `texture` attachments;\n     * otherwise, each pass has its own dedicated `texture` attachments.\n     */\n    let entry = c;\n    let t = color?.[entry];\n\n    // Only create new `texture`s if existing ones can't be reused.\n    if(!t) {\n      t = texture?.(to);\n      entry = size.textures++;\n    }\n\n    // Add meta info.\n\n    /** Check if this is bound to a pass. */\n    const s = isInteger(step);\n    const p = isInteger(pass);\n    const i = isInteger(index);\n\n    /** Denotes attached `texture`; if merging, `texture`s are reused. */\n    to.texture = t;\n    /** Denotes attached `texture` entry; if merging, `texture`s are reused. */\n    to.entry = entry;\n\n    s && (to.step = step);\n\n    if(p) {\n      /** Denotes `framebuffer` attachments; may reuse underlying `texture`s. */\n      to.color = size.colors++;\n      to.pass = pass;\n    }\n\n    i && (to.map = texturesMap[to.index = index]);\n\n    // Check whether this `texture` is part of the `step`/`pass` render flow.\n    // If so, add to `textures`, return its `texture` to bind to a pass.\n    // If not, return the entire object.\n    return ((s && p && i)? ((textures[step] ??= [])[index] = to).texture : to);\n  };\n\n  /**\n   * Add a pass to `passes`, with its `texture`s bound; to return its\n   * `framebuffer` to one of `steps`.\n   */\n  const addPass = (step, color) => (pass, index) => {\n    /**\n     * All a `framebuffer`'s attachments need the same number of channels;\n     * ignored if a `color`'s given as it'll be defined there instead.\n     */\n    const channels = color ?? mergeChannels ??\n      ((pass)? passChannels(pass, channelsMin) : channelsMin);\n\n    // Resources.\n\n    /** Properties passed for `framebuffer` creation, then meta info. */\n    const to = {\n      depth, stencil, width, height,\n      /** Map the pass's `texture` color attachments and their meta info. */\n      color: color ??\n        map(addTexture(channels, width, height, step, index), pass,\n          // Reuse any existing color attachments if merging; otherwise make\n          // dedicated color attachments for each pass.\n          ((merge)? (colorPool ??= []) : []))\n    };\n\n    /** The `framebuffer` for this pass. */\n    to.framebuffer = framebuffer?.(to);\n\n    // Add meta info.\n\n    /** Denotes attached `framebuffer` entry. */\n    to.entry = size.framebuffers++;\n\n    if(pass) {\n      to.map = pass;\n      to.pass = size.passes++;\n    }\n\n    const s = isInteger(step);\n    const i = isInteger(index);\n\n    s && (to.step = step);\n    i && (to.index = index);\n\n    // Check whether this pass is part of the `step`/`pass` render flow.\n    // If so, add to `passes`, return its `framebuffer` for its step.\n    return ((pass && s && i)? ((passes[step] ??= [])[index] = to).framebuffer\n        // If not, return the entire object.\n      : to);\n  };\n\n  /**\n   * Set up resources needed to store data per-`texture` per-pass per-step.\n   * Use any given steps/passes or create new ones.\n   */\n  to.steps = map((passes, step) => passes || map(addPass(step), maps.passes),\n    ((isInteger(steps))? range(steps) : steps), 0);\n\n  // Finish here if merge is disabled.\n  if(!merge) { return to; }\n\n  // Set up the `texture` for states to be merged into.\n\n  /** Use any size info given in `merge`, as with `state` above. */\n  const mScaled = getScaled(merge.scale);\n  /** Use any given size info, or merge along `[texture, step]` axes. */\n  const mw = getWidth(merge) ?? mScaled ?? maps.textures.length*width;\n  const mh = getHeight(merge) ?? mScaled ?? size.steps*height;\n\n  to.merge = {\n    /** New merge `texture` and info, or use any given merge `texture`. */\n    all: merge.all ?? addTexture(mergeChannels, mw, mh)(),\n    /** Empty `framebuffer`, to copy data from each `texture` of each pass. */\n    next: merge.next ?? addPass(null, false)()\n  };\n\n  size.merge = { width: mw, height: mh, shape: [mw, mh], entries: mw*mh };\n\n  return to;\n}\n\nexport default toData;\n","export const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);\nexport const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);\nexport const setC4 = (out, x, y, z, w) => (!out && (out = []),\n    (out[0] = x),\n    (out[1] = y),\n    (out[2] = z),\n    (out[3] = w),\n    out);\nexport const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),\n    (out[0] = a),\n    (out[1] = b),\n    (out[2] = c),\n    (out[3] = d),\n    (out[4] = e),\n    (out[5] = f),\n    out);\nexport const setC = (out, ...xs) => {\n    !out && (out = []);\n    for (let i = 0, n = xs.length; i < n; i++) {\n        out[i] = xs[i];\n    }\n    return out;\n};\n","/**\n * The `gpgpu` inputs for `GL` `uniform`s.\n *\n * @module\n * @category JS\n */\n\nimport { setC2, setC4 } from '@thi.ng/vectors/setc';\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap';\n\nimport { boundDef, preDef } from './const';\n\n/**\n * Sets up `GL` `uniform` inputs for `gpgpu` calls, such as in `toStep`.\n *\n * The `uniform`s are defined as callback hooks to be called on each render pass\n * with global context and local state `object`s, allowing the use of different\n * `GL` APIs or author-defined hooks.\n *\n * Handles inputs of states as `array`s of data-`texture`s, or merged into one\n * data-`texture`; for `array`s of `texture`s, this arranges them on each step\n * so `GLSL` can dynamically sample the flattened `array` of `texture`s by a\n * constant step index; otherwise the single merged `texture` is bound once, and\n * `GLSL` can use a dynamic step index to sample states.\n *\n * @example ```javascript\n * const state = { pre: '', steps: 2, maps: mapStep({ values: [1, 2, 3] }) };\n * const api = {};\n *\n * toUniforms(toData(api, { ...state, merge: false }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Separate state data-`texture`s in an `array` (e.g: `sampler2D[]`).\n *   // State data-`texture`s for the 1st step ago, not bound as outputs.\n *   'states[0]': (context, state) => {},\n *   'states[1]': (context, state) => {},\n *   // Merged `texture` not used.\n *   states: (context, state) => null\n * };\n *\n * toUniforms(toData(api, { ...state, steps: 3, merge: false }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Separate state data-`texture`s in an `array` (e.g: `sampler2D[]`).\n *   // State data-`texture`s for the 1st step ago, not bound as outputs.\n *   'states[0]': (context, state) => {},\n *   'states[1]': (context, state) => {}\n *   // State data-`texture`s for the 2nd step ago, not bound as outputs.\n *   'states[2]': (context, state) => {},\n *   'states[3]': (context, state) => {},\n *   // Merged `texture` not used.\n *   states: (context, state) => null\n * };\n *\n * toUniforms(toData(api, { ...state, merge: true }, {})); // =>\n * {\n *   stepNow: (context, state) => {},\n *   stateShape: (context, state) => {},\n *   viewShape: (context, state) => {},\n *   // Merged states in one data-`texture` upon every pass (e.g: `sampler2D`,\n *   // or `sampler3D`/`sampler2DArray` where supported).\n *   states: (context, state) => {},\n *   // Separate data-`texture`s not used.\n *   'states[0]': (context, state) => null,\n *   'states[1]': (context, state) => null\n * };\n * ```\n *\n * @see {@link step.toStep}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroSamples}\n * @see {@link macros.macroTaps}\n *\n * @param {object} state The `gpgpu` state. See `toData` and `mapGroups`.\n * @param {array|number} state.steps The `array` of steps, or number of steps.\n *   See `toData`.\n * @param {{textures?:number[][]}} state.maps How values are grouped into\n *   data-`texture`s (per-pass per-step). See `mapGroups`.\n * @param {string} [state.pre=preDef] Namespace prefix; `preDef` if not given.\n * @param {{all?:{texture?:object}}} [state.merge] Any merged state `texture`;\n *   uses separate state data-`texture`s if not given. See `toData`.\n *\n * @param {{shape?:number[],merge?:{shape?:number[]}}} [state.size] Any size of\n *   `state` data-`texture`s (as `vec2(width, height)`); with:\n *   - `shape`: Any `state` shape.\n *   - `merge.shape`: Any merged `states` shape, otherwise `state` shape.\n *\n *   See `toData`.\n *\n * @param {number} [state.bound=boundDef] Number of steps bound for output, not\n *   used for input; for platforms preventing read/write of the same `texture`.\n * @param {uniforms|object} [state.uniforms] Any `object` to merge the new\n *   `uniforms` into. See `to`.\n * @param {uniforms|object} [to=state.uniforms] Any `object` to contain the\n *   `uniform` hooks; modifies any `state.uniforms`, or a new `object` if not\n *   given. See `state.uniforms` and `uniforms`.\n *\n * @returns {{\n *     stepNow:(c,state:{stepNow:number})=>number,\n *     stateShape:(c,state:{size:{number}})=>[number,number,number,number],\n *     viewShape:(\n *       context:{drawingBufferWidth:number,drawingBufferHeight:number},s?\n *     )=>[number,number],\n *     states:()=>([])\n *   }}\n *\n * @param {{\n *     stepNow?:number,\n *     bound?:number,\n *     merge?:{texture:object},\n *     textures:{texture:object}[][]\n *   }} state Local properties (the `gpgpu` `state`); with:\n *   - `stepNow`: The current step of the `gpgpu` `state`.\n *   - `bound`: Number of steps bound to output; can't be bound as inputs.\n *   - `merge`: Any `object` containing merged data-`texture`.\n *     - `texture`: Any merged data-`texture`.\n *   - `textures`: Textures per-step, as `array`s of `object`s with a `texture`\n *     property. See `toData`.\n *\n *   The `to` set up with `uniform` callback hooks for the given `state`, to\n *   be called on each render pass for the latest `uniform` values; with:\n *   - `stepNow`: Gives any current step. See `toStep`.\n *   - `stateShape`: Gives any shape of any data-`texture`s; as\n *     `vec4(vec2(width, height), vec2(width, height))`; channels are `null`ish\n *     if there's no valid shape; with:\n *     - Any `state` shape; in `xy` channels.\n *     - Any merged `states` shape, otherwise `state` shape; in `zw` channels.\n *   - `viewShape`: Gives the `GL` viewport shape; as `vec2(width, height)`;\n *     given a `context` parameter with:\n *     - `drawingBufferWidth`: Current `GL` viewport width in pixels.\n *     - `drawingBufferHeight`: Current `GL` viewport height in pixels.\n *   - `states`: Gives the past steps data-`texture`s; as either:\n *     - Any merged data-`texture` as a single `GLSL` `sampler` (e.g: `2D`/\n *       `2DArray`/`3D`; up to to the `GL` API for `texture`); otherwise `null`.\n *     - Any separate data-`texture`s as a `GLSL` `array` of `sampler`s (e.g:\n *       `sampler2D[]`), each part/all of a `gpgpu` step's data and accessible\n *       by constant index (steps ago); otherwise `null`.\n *\n *   These property names may be prefixed with any given `state.pre`.\n *   See `toData` and `toStep`.\n */\nexport function toUniforms(state = {}, to = state.uniforms ??= {}) {\n  const { steps, maps, pre: n = preDef, bound = boundDef } = state;\n  const { textures } = maps;\n  const stepsL = steps.length ?? steps;\n  const texturesL = textures.length;\n  // Local caches.\n  const stateShape = [];\n  const viewShape = [];\n\n  /** Gives any current step. */\n  to[n+'stepNow'] = (_, s) => s.stepNow;\n\n  /** Gives any shape of `state` and any merged `states` data-`texture`s. */\n  to[n+'stateShape'] = (_, { size: { shape: s, merge: m } }) =>\n    ((s)? setC4(stateShape, ...s, ...(m?.shape ?? s)) : setC4(stateShape));\n\n  /** Gives the shape of the `GL` viewport. */\n  to[n+'viewShape'] = ({ drawingBufferWidth: w, drawingBufferHeight: h }) =>\n    setC2(viewShape, w, h);\n\n  /**\n   * Gives all `states` merged in one `texture`, if using `merge`;\n   * otherwise gives `null`.\n   */\n  to[n+'states'] = (_, s) => s.merge?.all?.texture ?? null;\n\n  /**\n   * Past steps, each some steps `ago`, from the current active step at `0`, as\n   * `[0,... stepsL-1-bound]`.\n   */\n  const addTextures = (ago) =>\n    /**\n     * Hooks to pull a given `texture` by the active pass `state`; lets `GLSL`\n     * access the `array` of `texture`s by constant index (steps ago).\n     * Only returns a value if not using a `merge`d `texture`; otherwise `null`.\n     */\n    each((_, t) => to[n+`states[${(ago*texturesL)+t}]`] =\n        (_, { merge: m, stepNow: s, bound: b = bound, textures: ts }) =>\n          ((m)? null : wrap(s-b-ago, ts)?.[t]?.texture),\n      textures);\n\n  /** Flatten all input `texture`s, as `uniform`s are kept in flat `array`s. */\n  for(let ago = 0, pl = stepsL-bound; ago < pl; ++ago) { addTextures(ago); }\n\n  return to;\n}\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback getUniform\n * A `function` hook to update a `GL` `uniform` value for a render pass.\n *\n * **See**\n * - {@link toUniforms}\n * - {@link data.toData}\n * - {@link api.texture}\n *\n * **Returns**\n * A `GL` uniform to be bound via a `GL` API.\n *\n * @param {{\n *     drawingBufferWidth:number,\n *     drawingBufferHeight:number\n *   }} context General or global properties; with:\n *   - `drawingBufferWidth`: Current `GL` viewport width in pixels.\n *   - `drawingBufferHeight`: Current `GL` viewport height in pixels.\n *\n * @param {{\n *     stepNow?:number,\n *     bound?:number,\n *     merge?:{texture:object},\n *     textures:{texture:object}[][]\n *   }} state Local properties (the `gpgpu` state); with:\n *   - `stepNow`: The current step of the `gpgpu` state.\n *   - `bound`: Number of steps bound to output; can't be bound as inputs.\n *   - `merge`: Any `object` containing merged data-`texture`.\n *     - `texture`: Any merged data-`texture`.\n *   - `textures`: Textures per-step, as `array`s of `object`s with a `texture`\n *     property. See `toData`.\n *\n * @returns {number|number[]|texture|object}\n */\n","const [{ length: start}, { length: end }] = '[object {type}]'.split('{type}');\n\n/**\n * Gives the type of a given input.\n *\n * @see https://stackoverflow.com/a/17772086/716898\n *\n * @param {*} x Any input to test.\n *\n * @returns {string} The type of `x`.\n */\nexport const type = (x) => toString.call(x).slice(start, -end);\n\nexport default type;\n","/**\n * The `GLSL` preprocessor macros for working with the `gpgpu` state and maps.\n *\n * Each set of different macros will result in new shader compilations - for\n * optimal performance, the fewest macros possible should be created, one per\n * each given set of inputs, ideally; caches here can be used for efficiency.\n *\n * @module\n * @category JS\n *\n * @todo Redo examples, especially `macroTaps` and `macroPass`.\n * @todo Ensure the `output_N` in `macroOutput` can work with `WebGL2`; look at\n *   using `layout(location=attach_N) out data_N`, not `gl_FragData[attach_N]`.\n *   - [SO: Multiple output textures from the same program](https://stackoverflow.com/questions/51793336/multiple-output-textures-from-the-same-program)\n *   - [SO: GL FragData must be constant zero](https://stackoverflow.com/questions/46740817/gl-fragdata-must-be-constant-zero)\n *   - [SO: How are layout qualifiers better than getAttribLocation in WebGL2](https://stackoverflow.com/questions/50258822/how-are-layout-qualifiers-better-than-getattriblocation-in-webgl2)\n */\n\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport { type } from '@epok.tech/is-type/type';\n\nimport { preDef, boundDef } from './const';\n\n/** Escaped line-feed for easier reading. */\nexport const lineFeed = ' \\\\\\n';\nconst lf = lineFeed;\n\n/** The channels denoted for texture input/output. */\nexport const rgba = 'rgba';\n/** Simple shared cache for temporary or reusable objects. */\nexport const cacheDef = {};\n/** Gives cache keys from simple plain `object` inputs. */\nconst id = JSON.stringify;\n\n/** Names for each part of the macro handling process available to hooks. */\nexport const hooks = {\n  /** The full set of macros. */\n  macroPass: '',\n  /** Each part of the set of macros. */\n  macroValues: 'values', macroOutput: 'output',\n  macroSamples: 'samples', macroTaps: 'taps'\n};\n\n/**\n * Whether handling macros here; or the result of a given hook to handle it.\n *\n * Allows macros of the given key to be handled by external named hooks, to\n * replace any part of the functionality here in overall or granular ways.\n *\n * The macro names checked in this module are found in `hooks`.\n *\n * @example ```javascript\n * // Macros to be handled here, the default.\n * [hasMacros(), hasMacros({}), hasMacros({ macros: true })]]\n *   .every((m) => m == null);\n *\n * // Macros to be handled here, with prefix `'pre_'` instead of `'preDef'`.\n * hasMacros({ pre: 'pre_' }) == null;\n *\n * // Macros not created.\n * [hasMacros({ macros: false }), hasMacros({ macros: 0 })]\n *   .every((m) => m === '');\n *\n * // Macros for `'a'` handled by external `string` hook, not here.\n * hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'a') === '//A\\n';\n * // Macros for `'b'` handled by external `function` hook, not here.\n * hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'b') === '//B\\n';\n * // Macros specified `on` a `'frag'` not created.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, '', 'frag') === '';\n * // Macros specified `on` a `'vert'` handled here.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, '', 'vert') == null;\n * // Macros of `'values'`/`hooks.values` handled here.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, 'values', '') == null;\n * // Macros of `'values'`/`hooks.values` specified `on` a `'vert'` not created.\n * hasMacros({ macros: { frag: 0, values_vert: 0 } }, 'values', 'vert') === '';\n * ```\n *\n * @see hooks\n *\n * @param {object} [state] Any `object` whose properties may handle macros.\n * @param {string} [key] Any name to check granularly within `macros`. See `hooks`.\n * @param {string} [on=''] Any further macro name specifier; if given, `key`\n *   itself and with this specifier are checked (i.e: `key` then `key+'_'+on`).\n *\n * @param {false|string|((...)=>string|null)|{}} [macros=state.macros] How\n *   macros should be handled, according to their type, in order of precedence:\n *   - `null`ish: macros to be handled here, `null`ish returned.\n *   - `true`: macros to be handled here, `null`ish returned.\n *   - `false`y: no macros to be handled here, empty `''` `string` returned.\n *   - `string`: no macros to be handled here, this hook value's used instead.\n *   - `function`: external `hasMacros`-like `function` hook, called with\n *     `macros(state, key, on, macros)`, the returned value used as shown here.\n *   - `object`: recurses with any value at the given `key`, with\n *     `hasMacros(state, key, on, macros[key])`.\n *   - Otherwise, macros to be handled here, `null`ish returned.\n *\n * @returns {null|string} Either the result of the macros handled elsewhere,\n *   or `null`ish if macros should be handled here.\n */\nexport function hasMacros(state, key, on = '', macros = state?.macros) {\n  if((macros ?? true) === true) { return null; }\n  else if(!macros) { return ''; }\n\n  const t = type(macros);\n\n  return ((t === 'String')? macros\n    : ((t === 'Function')?\n      hasMacros(state, key, on, macros(state, key, on, macros))\n    : (((macros instanceof Object) && (key in macros))?\n      hasMacros(state, key, on, macros[key])\n    : ((on)? hasMacros(state, ((key)? key+'_'+on : on), '', macros)\n    : null))));\n}\n\n/**\n * Generates an `array`-like declaration, as a `GLSL` syntax `string` compatible\n * with versions 1-3.\n *\n * Works around the lack of `const` `array`s in `GLSL` < 3. Used as the base for\n * the other `GLSL` version list types, ensuring a common standard while\n * offering further language features where available.\n *\n * @example ```javascript\n * getGLSLListBase('float', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = float(0);'+lf+\n * 'const int list_1 = float(1);'+lf+\n * 'const int list_2 = float(2);';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,number[]>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array-like declaration string.\n */\nexport const getGLSLListBase = (type, name, a, qualify = '', init = type) =>\n  `const int ${name}_l = ${a.length};`+\n  reduce((s, v, i) =>\n      s+lf+(qualify && qualify+' ')+type+\n        ` ${name}_${i} = ${init}(${v.join?.(', ') ?? v});`,\n    a, '');\n\n/**\n * Generates an array-like declaration, as a `GLSL1` syntax string.\n *\n * Workaround for lack of `const` arrays in `GLSL` < 3. Adds a lookup macro\n * function; slow here, but standard.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL1ListLike('float', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = float(0);'+lf+\n * 'const int list_1 = float(1);'+lf+\n * 'const int list_2 = float(2);\\n'+\n * '// Index macro `list_i` (e.g: `list_i(0)`) may be slow, `+\n *   'use name (e.g: `list_0`) if possible.\\n'+\n * '#define list_i(i) ((i == 2)? list_2 : ((i == 1)? list_1 : list_0))\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array-like declaration string.\n */\nexport const getGLSL1ListLike = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+'\\n'+\n  // @todo Would ideally use the concatenation macro, but can't in GLSL 1.\n  // `#define ${name}_i(i) ${name}_##i`;\n  `// Index macro \\`${name}_i\\` (e.g: \\`${name}_i(0)\\`) may be slow, `+\n    `use name (e.g: \\`${name}_0\\`) if possible.\\n`+\n  `#define ${name}_i(i) ${reduce((s, v, i) =>\n      ((i)? `((i == ${i})? ${name}_${i} : ${s})` : `${name}_${i}`),\n    a, '')}\\n`;\n\n/**\n * Generates an array declaration, as a `GLSL1` syntax string.\n *\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL1ListArray('vec3', 'list', [[1, 0, 0], [0, 2, 0], [0, 0, 3]]); // =>\n * 'const int list_l = 3;'+lf+\n * 'vec3 list_0 = vec3(1, 0, 0);'+lf+\n * 'vec3 list_1 = vec3(0, 2, 0);'+lf+\n * 'vec3 list_2 = vec3(0, 0, 3);'+lf+\n * 'vec3 list[list_l];'+lf+\n * 'list[0] = list_0;'+lf+\n * 'list[1] = list_1;'+lf+\n * 'list[2] = list_2;\\n'+\n * '#define list_i(i) list[i]\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL1` array declaration string.\n */\nexport const getGLSL1ListArray = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+lf+\n  (qualify && qualify+' ')+type+` ${name}[${name}_l];`+\n  reduce((s, _, i) => s+lf+name+`[${i}] = ${name}_${i};`, a, '')+'\\n'+\n  `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Generates an array declaration, as a `GLSL3` syntax string.\n *\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @see {@link getGLSLListBase}\n *\n * @example ```javascript\n * getGLSL3List('int', 'list', [0, 1, 2], 'const'); // =>\n * 'const int list_l = 3;'+lf+\n * 'const int list_0 = int(0);'+lf+\n * 'const int list_1 = int(1);'+lf+\n * 'const int list_2 = int(2);'+lf+\n * 'const int list[list_l] = int[list_l](list_0, list_1, list_2);\\n'+\n * '#define list_i(i) list[i]\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The `GLSL3` array declaration string.\n */\nexport const getGLSL3List = (type, name, a, qualify = '', init = type) =>\n  getGLSLListBase(type, name, a, qualify, init)+lf+\n  (qualify && qualify+' ')+type+` ${name}[${name}_l] = ${init}[${name}_l](${\n    reduce((s, _, i) => (s && s+', ')+name+'_'+i, a, '')});\\n`+\n  `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Creates a `GLSL` definition of an array, and initialises it with the given\n * values, type, and variable name.\n *\n * The initialisation is valid `GLSL1` or greater syntax; but is written with\n * escaped new-lines so it may be used in a single-line (e.g: for preprocessor\n * macros).\n *\n * For a `qualify` of `const` on any `GLSL` < 3, falls back to using non-array\n * variables with the index appended to `name`, since `const` arrays aren't\n * supported before `GLSL3`.\n *\n * @see {@link getGLSL3List}\n * @see {@link getGLSL1ListLike}\n * @see {@link getGLSL1ListArray}\n *\n * @example ```javascript\n * getGLSLList('int', 'test', [0, 1]); // =>\n * 'const int test_l = 2;'+lf+\n * 'int test_0 = int(0);'+lf+\n * 'int test_1 = int(1);'+lf+\n * 'int test[test_l];'+lf+\n * 'test[0] = test_0;'+lf+\n * 'test[1] = test_1;\\n'+\n * '#define test_i(i) test[i]\\n';\n *\n * getGLSLList('ivec2', 'vecs', [[1, 0], [0, 1]], 'const', 3); // =>\n * 'const int vecs_l = 2;'+lf+\n * 'ivec2 vecs_0 = ivec2(1, 0);'+lf+\n * 'ivec2 vecs_1 = ivec2(0, 1);'+lf+\n * 'const ivec2 vecs[vecs_l] = ivec2[vecs_l](vecs_0, vecs_1);\\n'+\n * '#define vecs_i(i) vecs[i]\\n';\n *\n * getGLSLList('int', 'listLike', [0, 1], 'const', 1); // =>\n * 'const int listLike_l = 2;'+lf+\n * 'const int listLike_0 = int(0);'+lf+\n * 'const int listLike_1 = int(1);\\n'+\n * '// Index macro `listLike_i` (e.g: `listLike_i(0)`) may be slow, `+\n *   'use name (e.g: `listLike_0`) if possible.\\n'+\n * '#define listLike_i(i) ((i == 1)? listLike_1 : listLike_0)\\n';\n * ```\n *\n * @param {string} type The `GLSL` list data-type.\n * @param {string} name The name of the `GLSL` list variable.\n * @param {array.<number,array.<number>>} a The list of `GLSL` values.\n * @param {string} [qualify=''] A `GLSL` qualifier, if needed (e.g: `const`).\n * @param {number} [glsl=1] The `GLSL` version to target, if specified.\n * @param {string} [init] A data-type initialiser.\n *\n * @returns {string} The `GLSL` (1 or 3) array or array-like declaration string.\n */\nexport const getGLSLList = (type, name, a, qualify = '', glsl = 1, init) =>\n  ((glsl >= 3)? getGLSL3List\n  : ((qualify.trim() === 'const')? getGLSL1ListLike : getGLSL1ListArray))\n    (type, name, a, qualify, init);\n\n/**\n * Defines the values within textures per-step, as `GLSL` preprocessor macros.\n *\n * These macros define mappings from values to their textures and channels.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link maps.mapGroups}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const state = { pre: '', steps: 2 };\n * const maps = { values: [2, 4, 1], channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * state.maps = mapGroups({ ...maps, buffersMax: 1, packed: 0 });\n * macroValues(state); // =>\n * '#define texture_0 0\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_1 1\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_2 2\\n'+\n * '#define channels_2 r\\n'+\n * '\\n'+\n * '#define textures 3\\n'+\n * '#define passes 3\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 1 });\n * state.size = { entries: 2**5 };\n * macroValues(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 2\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n *\n * // Can bind more texture outputs per pass - values across fewer passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * macroValues(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 1\\n'+\n * '#define stepsPast 1\\n'+\n * '#define steps 2\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled\n *   or prefixed. See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {object} state.maps How values are grouped per-`texture` per-pass\n *   per-step.\n * @param {array.<number>} state.maps.values How values of each data item are\n *   grouped into `texture`s. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.textures The groupings of values\n *   into `texture`s. See `mapGroups`.\n * @param {array} state.maps.passes Passes drawn per-step. See `mapGroups`.\n * @param {array|number} state.steps States drawn across frames. See `toData`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *   unavailable as inputs.\n * @param {object} [state.size] Any size information about the GL resources.\n * @param {number} [state.size.entries] The number of data entries per `texture`\n *   (the `texture`'s area), if given. See `toData`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} The `GLSL` preprocessor macros defining the maps from\n *   values to `texture`s and channels.\n */\nexport function macroValues(state, on) {\n  const key = hooks.macroValues;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      maps, steps, bound = boundDef, size, pre: n = preDef,\n      cache = cacheDef\n    } = state;\n\n  const { values, textures, passes: { length: passesL } } = maps;\n  const stepsL = steps.length ?? steps;\n  const entries = size?.entries;\n\n  const c = cache &&\n    `macro@${key}@${n\n      }|${bound}|${id(values)}|${id(textures)}|${stepsL}|${passesL}|${entries}`;\n\n  to = cache?.[c] ??\n    reduce((s, texture, t, _, i = 0) => reduce((s, v) =>\n          s+`#define ${n}texture_${v} ${t}\\n`+\n          `#define ${n}channels_${v} ${rgba.slice(i, i += values[v])}\\n\\n`,\n        texture, s),\n      textures, '')+\n    ((entries)? `#define ${n}entries ${entries}\\n` : '')+\n    `#define ${n}textures ${textures.length}\\n`+\n    `#define ${n}passes ${passesL}\\n`+\n    `#define ${n}stepsPast ${stepsL-bound}\\n`+\n    `#define ${n}steps ${stepsL}\\n`+\n    `#define ${n}bound ${bound}\\n\\n`;\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the outputs being drawn to per-pass, as `GLSL` preprocessor macros.\n *\n * These macros define mappings from values to their outputs, if bound.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link maps.mapGroups}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const maps = { values: [2, 4, 1], channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state = {\n *   pre: '', passNow: 0,\n *   maps: mapGroups({ ...maps, buffersMax: 1, packed: 0 })\n * };\n *\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_0 0\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 1 });\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_1 0\\n'+\n * '#define attach_1 0\\n'+\n * '#define output_1 gl_FragData[attach_1].rgba\\n'+\n * '\\n';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroOutput(state); // =>\n * '#define passNow 1\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 0\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n';\n *\n * // Can bind more texture outputs per pass - values across fewer passes.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroOutput(state); // =>\n * '#define passNow 0\\n'+\n * '\\n'+\n * '#define bound_1 0\\n'+\n * '#define attach_1 0\\n'+\n * '#define output_1 gl_FragData[attach_1].rgba\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 1\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 1\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties for generating the macros. See `toData`:\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `pre` if not given.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<number>} state.maps.values How values of each data item may be\n *   grouped into textures across passes. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.textures The groupings of values\n *   into textures. See `mapGroups`.\n * @param {array.<array.<number>>} state.maps.passes The groupings of textures\n *   into passes. See `mapGroups`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} `GLSL` preprocessor macros for the pass's bound outputs.\n */\nexport function macroOutput(state, on) {\n  const key = hooks.macroOutput;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const { passNow: p, maps, pre: n = preDef, cache = cacheDef } = state;\n  const { values, textures, passes } = maps;\n  const pass = passes[p];\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(values)}|${id(textures)}|${id(passes)}`;\n\n  to = cache?.[c] ??\n    `#define ${n}passNow ${p}\\n`+\n    reduce((s, texture, bound, _, i = 0) => reduce((s, v) =>\n          s+'\\n'+\n          `#define ${n}bound_${v} ${texture}\\n`+\n          `#define ${n}attach_${v} ${bound}\\n`+\n          `#define ${n}output_${v} gl_FragData[${n}attach_${v}].${\n            rgba.slice(i, i += values[v])}\\n`,\n        textures[texture], s),\n      pass, '')+'\\n';\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the texture samples/reads per-pass, as `GLSL` preprocessor macros.\n *\n * The macros define the mapping between the values and those they derive from,\n * as step/texture locations in a `samples` list, and indexes to read values\n * from sampled data in a `reads` list (once sampled into a `data` list, as in\n * `macroTaps` or similar).\n *\n * They're set up as function-like macros that may be called from the shader to\n * initialise the mappings arrays with a given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link macroTaps}\n * @see {@link hasMacros}\n * @see {@link getGLSLList}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n * const maps = { values, derives, channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state =\n *   { pre: '', maps: mapStep({ ...maps, buffersMax: 1, packed: 0 }) };\n *\n * // Uses the first pass by default.\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 1;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 2);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) samples_0\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n';\n *\n * // Next pass in this step - no derives, no samples nor reads.\n * state.passNow = 1;\n * macroSamples(state); // =>\n * '';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 4;'+lf+\n *   'const ivec2 samples_0 = ivec2(1, 0);'+lf+\n *   'const ivec2 samples_1 = ivec2(0, 0);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_3 = ivec2(0, 2);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) ((i == 3)? samples_3 : ((i == 2)? samples_2 '+\n *   ': ((i == 1)? samples_1 : samples_0)))\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(0);'+lf+\n *   'const int reads_2_1 = int(1);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(3);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * // Can bind more texture outputs per pass - values across fewer passes.\n * // Also fewer samples where values share derives or textures.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroSamples(state); // =>\n * '#define useSamples'+lf+\n *   'const int samples_l = 3;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_1 = ivec2(1, 1);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i) '+\n *   '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(1);'+lf+\n *   'const int reads_2_1 = int(0);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(0);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both the\n *   hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {number} [state.passNow=0] The index of the currently active pass;\n *   uses the first pass if not given.\n * @param {object} state.maps  How `values` are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<array.<array.<number>>>} [state.maps.samples] The minimal set\n *   of texture samples to use. See `mapSamples`.\n * @param {array.<array.<array.<number>>>} [state.maps.reads] The mappings from\n *   values to the corresponding `state.samples`. See `mapSamples`.\n * @param {number} [state.glsl=1] The `GLSL` language version.\n *   See `getGLSLList`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} `GLSL` preprocessor macros defining the mappings for\n *   samples and reads, for each value.\n */\nexport function macroSamples(state, on) {\n  const key = hooks.macroSamples;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      passNow: p = 0, maps, glsl, pre: n = preDef, cache = cacheDef\n    } = state;\n\n  const { samples, reads } = maps;\n  const passSamples = samples?.[p];\n  const passReads = reads?.[p];\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(passSamples)}|${id(passReads)}|${glsl}`;\n\n  to = cache?.[c] ??\n    ((!passSamples)? ''\n    : `#define ${n}useSamples${lf+\n        getGLSLList('ivec2', n+'samples', passSamples, 'const', glsl)}\\n`)+\n    ((!passReads)? ''\n    : reduce((s, reads, v) =>\n          `${s}#define ${n}useReads_${v}${lf+\n            getGLSLList('int', n+'reads_'+v, reads, 'const', glsl)}\\n`,\n        passReads, ''));\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines the samples of textures per-pass, as `GLSL` preprocessor macros.\n *\n * The macros define the minimal sampling of textures for the data the active\n * pass's values derive from; creates a `data` list containing the samples; the\n * `samples` list variable names are required as created by `macroSamples`.\n *\n * Handles sampling states in a flat array of textures, or merged in one texture\n * (in both `sampler2D`, and `sampler3D`/`sampler2DArray` where supported).\n * Merging allows shaders to access past steps by non-constant lookups; e.g:\n * attributes cause `sampler array index must be a literal expression` on\n * `GLSL3` spec and other platforms (e.g: `D3D`); note these need texture repeat\n * wrapping.\n *\n * They're set up as function-like macros that may be called from the shader to\n * initialise the mappings arrays with a given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see [`sampler array index must be a literal expression`](https://stackoverflow.com/a/60110986/716898)\n * @see [`sampler2DArray`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_2d_array.html)\n * @see [`sampler3D`](https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html)\n *\n * @see {@link macroSamples}\n * @see {@link hasMacros}\n * @see {@link getGLSLList}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n * @see {@link inputs.toUniforms}\n * @see {@link cacheDef}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n * const maps = { values, derives, channelsMax: 4 };\n *\n * // No optimisations - values not packed, single texture output per pass.\n * const state =\n *   { pre: '', maps: mapStep({ ...maps, buffersMax: 1, packed: 0 }) };\n *\n * // Uses the first pass by default.\n * macroTaps(state); // =>\n * '@todo';\n *\n * // Next pass in this step - no derives, no samples nor reads.\n * state.passNow = 1;\n * macroTaps(state); // =>\n * '';\n *\n * // Next pass in this step.\n * ++state.passNow;\n * macroTaps(state); // =>\n * '@todo';\n *\n * // Automatically packed values - values across fewer textures/passes.\n * // Can bind more texture outputs per pass - values across fewer passes.\n * // Also fewer samples where values share derives or textures.\n * state.maps = mapGroups({ ...maps, buffersMax: 4 });\n * state.passNow = 0;\n * macroTaps(state); // =>\n * '@todo';\n * ```\n *\n * @param {object} state Properties used to generate the macros. See `toData`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n * @param {string|function|object|false} [state.macros] How macros are handled.\n *   See `hasMacros`.\n * @param {string} [state.pre=preDef] Macros prefix; `preDef` if not given.\n * @param {number} [state.passNow=0] The index of the currently active pass;\n *   uses the first pass if not given.\n * @param {object} state.maps  How `values` are grouped per-texture per-pass\n *   per-step. See `mapGroups`.\n * @param {array.<array.<array.<number>>>} [state.maps.samples] The minimal set\n *   of texture samples to use. See `mapSamples`.\n * @param {object} [state.merge] Any merged state texture; uses separate state\n *   textures if not given. See `toData`.\n * @param {number} [state.glsl=1] The `GLSL` language version.\n *   See `getGLSLList`.\n * @param {object|false} [state.cache=cacheDef] Any object to cache any inputs'\n *   results in, `false`y to skip caching; uses `cacheDef` if not given.\n *\n * @returns {string} The `GLSL` preprocessor macros defining the minimal\n *   sampling of textures, to suit how states are stored (array of textures, or\n *   all merged into one texture) and supported `GLSL` language features.\n */\nexport function macroTaps(state, on) {\n  const key = hooks.macroTaps;\n  let to = hasMacros(state, key, on);\n\n  if(to != null) { return to; }\n\n  const {\n      passNow: p = 0, maps, merge, glsl, pre: n = preDef,\n      cache = cacheDef\n    } = state;\n\n  const passSamples = maps.samples?.[p];\n  const index = !merge;\n\n  const c = cache &&\n    `macro@${key}@${n}|${p}|${id(passSamples)}|${index}|${glsl}`;\n\n  if((to = cache?.[c]) != null) { return to; }\n\n  const glsl3 = (glsl >= 3);\n  /** Which texture sampling function is available. */\n  const texture = 'texture'+((glsl3)? '' : '2D');\n  /** Short and common names for functions and parameters. */\n  const f = n+'tapState';\n  const tap = '#define '+f;\n  /** Common parameters, passed as `(..., stepBy, textureBy)` */\n  const by = `stepBy, textureBy`;\n  /** Aliases default names for brevity, main functions offer more control. */\n  const aka = `#define ${f}(uv)`+lf+f;\n  const akaBy = `#define ${f}By(uv, ${by})`+lf+f;\n  /** The current `sample`, as `[step, texture]`. */\n  const st = n+'samples_';\n  /** Prefix for private temporary variables. */\n  const t = '_'+n;\n  /** A temporary `array` to pass to `getGLSLList`. */\n  const tapsSamples = cache[key+':tapsSamples'] ??= [];\n  const tapsL = tapsSamples.length = passSamples?.length ?? 0;\n\n  /** The main `texture`-sampling logic. */\n  to = ((index)? '' : `#define ${n}mergedStates\\n\\n`)+\n    ((!tapsL)? ''\n    : ((index)?\n      /** Separate un-merged `texture`s accessed by constant index. */\n      '// States in a `sampler2D[]`; looks up 1D index and 2D `uv`; '+lf+\n        'past steps go later in the list.\\n'+\n      `// Pass constant array index values; \\`textures\\`.\\n`+\n      `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      tap+`s(uv, states, textures)`+lf+\n        // Compute before the loop for lighter work.\n        `const int ${t}tlI = int(textures);`+lf+\n        `vec2 ${t}uvI = vec2(uv);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          map((_, i) => texture+\n              // Offset step, `texture`.\n              `(states[(int(${st+i}.s)*${t}tlI)+int(${st+i}.t)], ${t}uvI)`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      '// States may also be sampled by shifted step/texture.\\n'+\n      `// Pass constant array index values; \\`textures, ${by}\\`.\\n`+\n      `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      tap+`sBy(uv, states, textures, ${by})`+lf+\n        // Compute before the loop for lighter work.\n        `const int ${t}tlIB = int(textures);`+lf+\n        `ivec2 ${t}byIB = ivec2(${by});`+lf+\n        `vec2 ${t}uvIB = vec2(uv);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          map((_, i) =>\n              texture+'(states['+\n                  // Offset step.\n                  `((int(${st+i}.s)+${t}byIB.s)*${t}tlIB)+`+\n                  // Offset `texture`.\n                  `int(${st+i}.t)+${t}byIB.t`+\n                `], ${t}uvIB)`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      '// Preferred aliases: index suits states array constant access.\\n'+\n      aka+`s(uv, ${n}states, ${n}textures)\\n`+\n      akaBy+`sBy(uv, ${n}states, ${n}textures, ${by})\\n`\n    : /** Merged 2D `texture`. */\n      '// States merged to a `sampler2D`, scales 2D `uv` over '+\n        '`[textures, steps]`.\\n'+\n      '// Step from now into the past going upwards in the texture.\\n'+\n      `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      tap+`2(uv, states, stepNow, steps, textures)`+lf+\n        // Compute before the loop for lighter work.\n        `vec2 ${t}l2 = vec2(textures, steps);`+lf+\n        `vec2 ${t}uv2 = vec2(uv)/${t}l2;`+lf+\n        // Steps advance in reverse, top-to-bottom.\n        `vec2 ${t}s2 = vec2(1, -1)/${t}l2;`+lf+\n        // Offset `texture`, step.\n        // Each step stored in `texture` top downward at `-stepNow`.\n        // Most recent step to look up is at `-stepNow+1`.\n        `vec2 ${t}i2 = vec2(0, 1)-vec2(0, stepNow);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          // Would repeat wrap; but `WebGL1` needs power-of-2.\n          map((_, i) =>\n              texture+`(states, `+\n                // Offset `texture`, step.\n                `fract(${t}uv2+fract((vec2(${st+i}).ts+${t}i2)*${t}s2)))`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      '// States may also be sampled by shifted step/texture.\\n'+\n      `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n      tap+`2By(uv, states, stepNow, steps, textures, ${by})`+lf+\n        // Compute before the loop for lighter work.\n        `vec2 ${t}l2B = vec2(textures, steps);`+lf+\n        `vec2 ${t}uv2B = vec2(uv)/${t}l2B;`+lf+\n        // Steps advance in reverse, top-to-bottom.\n        `vec2 ${t}s2B = vec2(1, -1)/${t}l2B;`+lf+\n        // Offset `texture`, step.\n        // Each step stored in `texture` top downward at `-stepNow`.\n        // Most recent step to look up is at `-stepNow+1`.\n        `vec2 ${t}i2B = vec2(${by}).ts+vec2(0, 1)-vec2(0, stepNow);`+lf+\n        // Sample into the `data` output list.\n        getGLSLList('vec4', n+'data',\n          // Would repeat wrap; but `WebGL1` needs power-of-2.\n          map((_, i) =>\n              texture+`(states, `+\n                // Offset `texture`, step.\n                `fract(${t}uv2B+fract((vec2(${st+i}).ts+${t}i2B)*${t}s2B)))`,\n            passSamples, tapsSamples),\n          '', glsl)+'\\n'+\n      ((!glsl3)?\n        '// Preferred aliases: 2D suits merged texture in GLSL < 1.\\n'+\n        aka+`2(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures)\\n`+\n        akaBy+\n          `2By(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures, ${by})\\n`\n      : /**\n         * Merged 3D `texture` types, supported from `GLSL3`.\n         * @todo Check and finish this.\n         */\n        '// States merged to `sampler3D` or `sampler2DArray`; 2D `uv` '+\n          'to 3D; scales `x` over `textures`, `z` over `steps` as:\\n'+\n        '// - `sampler3D`: the number of steps; depth, `[0, 1]`.\\n'+\n        '// - `sampler2DArray`: `1` or less; layer, `[0, steps-1]`.\\n'+\n        `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n        tap+`3(uv, states, stepNow, steps, textures)`+lf+\n          /** @see `...2()` above. */\n          // Compute before the loop for lighter work.\n          `vec2 ${t}l3 = vec2(textures, steps);`+lf+\n          `vec2 ${t}uv3 = vec2(uv)/${t}l3;`+lf+\n          // Offset `texture`.\n          `float ${t}sx3 = 1.0/${t}l3.x;`+lf+\n          // Offset step.\n          `float ${t}s3 = -float(stepNow);`+lf+\n          `float ${t}sz3 = -1.0/${t}l3;`+lf+\n          // Sample into the `data` output list.\n          getGLSLList('vec4', n+'data',\n            // Would repeat wrap; but `sampler2DArray` layer can't.\n            map((_, i) =>\n                texture+'(states, fract(vec3('+\n                  // Offset `texture`.\n                  `${t}uv3.x+(float(${st+i}.t)*${t}sx3), ${t}uv3.y, `+\n                  // Offset step: `sampler3D` depth, `[0, 1]`;\n                  // `sampler2DArray` layer, `[0, steps-1]`.\n                  `(float(${st+i}.s)+${t}s3)*${t}sz3)))`,\n              passSamples, tapsSamples),\n            '', glsl)+'\\n'+\n        '// States may also be sampled by shifted step/`texture`.\\n'+\n        `// Use \\`${n}data\\` list; ignore temporary \\`${t}\\` names.\\n`+\n        tap+`3By(uv, states, stepNow, steps, textures, ${by})`+lf+\n          /** @see `...2By()` above. */\n          // Compute before the loop for lighter work.\n          `vec2 ${t}l3B = vec2(textures, steps);`+lf+\n          `vec2 ${t}uv3B = (vec2(uv)+vec2(textureBy, 0))/${t}l3B;`+lf+\n          // Offset `texture`.\n          `float ${t}sx3B = 1.0/${t}l3B.x;`+lf+\n          // Offset step.\n          `float ${t}s3B = float(stepBy)-float(stepNow);`+lf+\n          `float ${t}sz3B = -1.0/${t}l3B;`+lf+\n          // Sample into the `data` output list.\n          getGLSLList('vec4', n+'data',\n            // Would repeat wrap; but `sampler2DArray` layer can't.\n            map((_, i) =>\n                texture+'(states, fract(vec3('+\n                  // Offset `texture`.\n                  `${t}uv3B.x+(float(${st+i}.t)*${t}sx3B), ${t}uv3B.y, `+\n                  // Offset step: `sampler3D` depth, `[0, 1]`;\n                  // `sampler2DArray` layer, `[0, steps-1]`.\n                  `(float(${st+i}.s)+${t}s3B)*${t}sz3B)))`,\n              passSamples, tapsSamples),\n            '', glsl)+'\\n'+\n        '// Preferred aliases: 3D suits merged texture in `GLSL` 3+.\\n'+\n        aka+`3(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures)\\n`+\n        akaBy+\n          `3By(uv, ${n}states, ${n}stepNow, ${n}steps, ${n}textures, ${by})\\n`\n      ))+'\\n');\n\n  return ((cache)? cache[c] = to : to);\n}\n\n/**\n * Defines all `GLSL` preprocessor macro values, `texture` samples, and outputs\n * for the active pass.\n *\n * The macros define the mapping between the active values, their `texture`s and\n * channels, bound outputs, and other macros useful for a draw pass.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see {@link hasMacros}\n * @see {@link macroValues}\n * @see {@link macroOutput}\n * @see {@link macroTaps}\n * @see {@link macroSamples}\n * @see {@link maps.mapStep}\n * @see {@link data.toData}\n *\n * @example ```javascript\n * const values = [2, 4, 1];\n * const derives = [2, , [[1, 0], true]];\n *\n * // Automatically packed values - values across fewer `texture`s/passes.\n * // Only a single `texture` output per pass - values across more passes.\n * const state = {\n *   passNow: 0, steps: 2, size: { entries: 2**5 },\n *   maps: mapStep({ values, derives, channelsMax: 4, buffersMax: 1 })\n * };\n *\n * macroPass(state); // =>\n * '#define gpgpu_texture_1 0\\n'+\n * '#define gpgpu_channels_1 rgba\\n'+\n * '\\n'+\n * '#define gpgpu_texture_0 1\\n'+\n * '#define gpgpu_channels_0 rg\\n'+\n * '\\n'+\n * '#define gpgpu_texture_2 1\\n'+\n * '#define gpgpu_channels_2 b\\n'+\n * '\\n'+\n * '#define gpgpu_entries 32\\n'+\n * '#define gpgpu_textures 2\\n'+\n * '#define gpgpu_passes 2\\n'+\n * '#define gpgpu_stepsPast 1\\n'+\n * '#define gpgpu_steps 2\\n'+\n * '\\n'+\n * '#define gpgpu_passNow 0\\n'+\n * '\\n'+\n * '#define gpgpu_bound_1 0\\n'+\n * '#define gpgpu_attach_1 0\\n'+\n * '#define gpgpu_output_1 gl_FragData[gpgpu_attach_1].rgba\\n'+\n * '\\n';\n *\n * // Next pass and extra step.\n * ++state.steps;\n * ++state.passNow;\n * state.pre = '';\n * macroPass(state); // =>\n * '#define texture_1 0\\n'+\n * '#define channels_1 rgba\\n'+\n * '\\n'+\n * '#define texture_0 1\\n'+\n * '#define channels_0 rg\\n'+\n * '\\n'+\n * '#define texture_2 1\\n'+\n * '#define channels_2 b\\n'+\n * '\\n'+\n * '#define entries 32\\n'+\n * '#define textures 2\\n'+\n * '#define passes 2\\n'+\n * '#define stepsPast 2\\n'+\n * '#define steps 3\\n'+\n * '\\n'+\n * '#define passNow 1\\n'+\n * '\\n'+\n * '#define bound_0 1\\n'+\n * '#define attach_0 0\\n'+\n * '#define output_0 gl_FragData[attach_0].rg\\n'+\n * '\\n'+\n * '#define bound_2 1\\n'+\n * '#define attach_2 0\\n'+\n * '#define output_2 gl_FragData[attach_2].b\\n'+\n * '\\n'+\n * '#define useSamples'+lf+\n *   'const int samples_l = 3;'+lf+\n *   'const ivec2 samples_0 = ivec2(0, 1);'+lf+\n *   'const ivec2 samples_1 = ivec2(1, 1);'+lf+\n *   'const ivec2 samples_2 = ivec2(0, 0);\\n'+\n * '// Index macro `samples_i` (e.g: `samples_i(0)`) may be slow, '+\n *   'use name (e.g: `samples_0`) if possible.\\n'+\n * '#define samples_i(i)'+lf+\n *   '((i == 2)? samples_2 : ((i == 1)? samples_1 : samples_0))\\n'+\n * '\\n'+\n * '#define useReads_0'+lf+\n *   'const int reads_0_l = 1;'+lf+\n *   'const int reads_0_0 = int(0);\\n'+\n * '// Index macro `reads_0_i` (e.g: `reads_0_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_0_0`) if possible.\\n'+\n * '#define reads_0_i(i) reads_0_0\\n'+\n * '\\n'+\n * '#define useReads_2'+lf+\n *   'const int reads_2_l = 4;'+lf+\n *   'const int reads_2_0 = int(1);'+lf+\n *   'const int reads_2_1 = int(0);'+lf+\n *   'const int reads_2_2 = int(2);'+lf+\n *   'const int reads_2_3 = int(0);\\n'+\n * '// Index macro `reads_2_i` (e.g: `reads_2_i(0)`) may be slow, '+\n *   'use name (e.g: `reads_2_0`) if possible.\\n'+\n * '#define reads_2_i(i) ((i == 3)? reads_2_3 : ((i == 2)? reads_2_2 '+\n *   ': ((i == 1)? reads_2_1 : reads_2_0)))\\n'+\n * '\\n'+\n * '// States in a `sampler2D[]`; looks up 1D index and 2D `uv`.\\n'+\n * '@todo';\n * ```\n *\n * @param {object} state Properties for generating the macros. See `toData`\n *   and `mapGroups`.\n * @param {string} [on] Any further macro `hooks` specifier; if given, both\n *   the hook key and this specifier are checked (e.g: `key` and `key_on`).\n *\n * @returns {string} The `GLSL` preprocessor macros defining the mappings for\n *   values, `texture`s, channels, bound outputs of the active pass, etc. See\n *   `macroValues`, `macroOutput`, and `macroSamples`.\n */\nexport const macroPass = (state, on) =>\n  hasMacros(state, hooks.macroPass, on) ??\n    macroValues(state, on)+macroOutput(state, on)+macroSamples(state, on)+\n    macroTaps(state, on);\n\nexport default macroPass;\n","/**\n * The `gpgpu` update step.\n *\n * Connects inputs to the `GL` state and renders an update step.\n *\n * @module\n * @category JS\n *\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n */\n\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap';\n\nimport { macroPass } from './macros';\n\nimport {\n    vertDef, preDef, positionsDef, countDef, stepMaxDef,\n    clearPassDef, copyFrameDef, copyImageDef\n  } from './const';\n\n/**\n * Convenience to get the currently active `framebuffer`.\n *\n * @see {@link toStep}\n * @see {@link data.toData}\n *\n * @param {object} state The `gpgpu` state.\n * @param {object[][]} state.passes Passes per step. See `toData`.\n * @param {number} [state.stepNow] Any active state step index. See `toStep`.\n * @param {number} [state.passNow] Any active draw pass index. See `toStep`.\n *\n * @returns {object} Any active step's active pass object, of the given `state`.\n */\nexport const getPass = ({ passes: ps, stepNow: s, passNow: p }) =>\n  wrap(s, ps)?.[p];\n\n/**\n * Merged `texture` update, called upon each pass.\n *\n * Copies the active pass's output into the merged `texture`, from each of its\n * `framebuffer` attachments one by one (to support multiple draw buffers).\n * Matches the lookup logic defined in `macroTaps`.\n *\n * @todo Update docs.\n *\n * @see [SO reading from multiple `framebuffer`s](https://stackoverflow.com/a/34160982/716898)\n * @see {@link getPass}\n * @see {@link state.framebuffer}\n * @see {@link state.texture}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroTaps}\n *\n * @param {object} state A `gpgpu` state of the active pass.\n * @param {{color:texture[],map:number[]}[][]} state.passes Passes per\n *   step; any active one's found via `getPass`, with:\n *   - `color`: `array` of data-`texture`s.\n *   - `map`: `array` of `number`s, showing how the `texture`s are grouped\n *     per-pass. See `getPass`, `toData`, and `mapGroups`.\n * @param {merge} state.merge The merged `texture` to update.\n * @param {number} [state.stepNow] The currently active state step, if any.\n *\n * @returns {texture} The merged `texture`, updated by the active pass's output;\n *   matches the lookup logic defined in `macroTaps`.\n */\nexport function updateMerge(state) {\n  const {\n      merge, stepNow: s, size,\n      copyFrame: cf = copyFrameDef, copyImage: ci = copyImageDef\n    } = state;\n\n  const { color, map: pass } = getPass(state);\n  const { all: { texture }, next: { framebuffer } } = merge;\n  const to = texture?.subimage;\n  let f = framebuffer;\n\n  // Silent exit if there's not enough info ready now to perform the update.\n  if(!(to && f && color && pass && (s || (s === 0)))) { return texture; }\n\n  /** Handle `object`s or `regl`-like extended `function`s. */\n  (f.call !== Function.call) && (f = f.call);\n\n  const { steps: sl, width: w, height: h } = size;\n  /** Start at the top of the `texture`, move down row-per-step and wrap. */\n  const y = (s%sl)*h;\n\n  /**\n   * Reusable `framebuffer` binds and copies each of the pass `texture`s along\n   * the merged `texture`.\n   */\n  each((c, i) =>\n      (cf.color = c) &&\n        f.call(f, cf).use.call(f, () => to.call(texture, ci, pass[i]*w, y)),\n    color);\n\n  return texture;\n}\n\n/**\n * Creates a `gpgpu` update step function, for use with a `gpgpu` state object.\n *\n * @todo Make this fully and consistently extensible; improve `pipeline`.\n * @todo Example.\n *\n * @see {@link buffer}\n * @see {@link command}\n * @see {@link subimage}\n * @see {@link onStep}\n * @see {@link onPass}\n * @see {@link getPass}\n * @see {@link data.toData}\n * @see {@link maps.mapGroups}\n * @see {@link macros.macroPass}\n * @see {@link inputs.toUniforms}\n *\n * @param {object} api An API for `GL` resources.\n * @param {buffer} [api.buffer] Function to set up a `GL` buffer.\n * @param {clear} [api.clear] Function to clear `GL` view or `framebuffer`.\n * @param {command} [api.command=api] Function to create a `GL` render pass,\n *   given options, to be called later with options; `api` if not given.\n * @param {object} state The `gpgpu` state to use. See `toData` and `mapGroups`.\n * @param {object} state.maps How values are grouped per-`texture` per-pass\n *   per-step. See `mapGroups`.\n * @param {number[][]} state.maps.passes How textures are grouped into passes.\n *   See `mapGroups`.\n * @param {object} [state.merge] Any merged state `texture`; uses separate state\n *   textures if not given.\n * @param {object} [state.merge.texture] Any `GL` `texture` of `state.merge`.\n * @param {subimage} [state.merge.texture.subimage] A function to update part of\n *   the merge `GL` `texture` object data. See `subimage`.\n * @param {function} [state.merge.update] Hook to update, if any; if not given,\n *   `state.merge.texture` is updated here with active states upon each pass.\n *\n *   The default merged `texture` is laid out as `[texture, step]` on the\n *   `[x, y]` axes, respectively; if other layouts are needed, this merge update\n *   hook can be given to use as-is, and the setup and lookup logic in their\n *   respective hooks.\n *\n *   See `toData` and `macroTaps`.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n * @param {string} [state.vert=vertDef] The step vertex shader `GLSL`; a\n *   simple flat screen shader if not given.\n * @param {string} state.frag The step fragment shader `GLSL`.\n * @param {object} [state.uniforms=toUniforms(state)] The step uniforms;\n *   modifies any given. See `toUniforms`.\n * @param {number[]|buffer} [state.positions=positionsDef()] The step position\n *   `attribute`s; 3 points of a large flat triangle if not given.\n * @param {number} [state.count=state.positions.length*0.5] The `number` of\n *   elements/`attribute`s to draw.\n * @param {object} [state.pipeline] Any `GL` command properties to mix in\n *   overriding those ones added here; all passed to `api.command`.\n * @param {string} [state.vert=vertDef] Vertex `GLSL` code to prepend `macro`s.\n * @param {string[]} [state.verts] Preprocesses and caches vertex `GLSL`\n *   code per-pass if given, otherwise processes just-in-time before each pass.\n * @param {string} [state.frag] Fragment `GLSL` to prepend `macro`s.\n * @param {string[]} [state.frags] Preprocesses and caches fragment `GLSL`\n *   code per-pass, otherwise processes just-in-time before each pass.\n * @param {onStep} [onStep] Callback upon each step.\n * @param {onPass} [onPass] Callback upon each pass.\n * @param {object} [to=state] The `object` to set up. Modifies the given `state`\n *   `object` by default.\n *\n * @returns {object} `to` The given `to` `object`; set up with a `gpgpu` step\n *   `function` and related properties, to use with the `gpgpu` state.\n * @returns {string} `to.vert` The given/new `state.vert` vertex shader `GLSL`.\n * @returns {string} `to.frag` The given `state.frag` fragment shader `GLSL`.\n * @returns {string[]} `[to.verts]` Any cached pre-processed vertex shaders\n *   `GLSL`, if `state.verts` was given.\n * @returns {string[]} `[to.frags]` Any cached pre-processed fragment shaders\n *   `GLSL`, if `state.verts` was given.\n * @returns {object} `to.uniforms` The given `state.uniforms`.\n * @returns {number} `to.count` The given or new `state.count`.\n * @returns {buffer} `to.positions` The given or new `state.positions`; via\n *   `api.buffer`.\n * @returns {command} `to.pass` A `GL` command `function` to draw a given pass;\n *   via `api`/`api.command`.\n * @returns {function} `to.step` The main `function` to perform all the draw\n *   pass `GL` commands for a given state step.\n */\nexport function toStep(api, state = {}, to = state) {\n  /** Handle `object`s or `regl`-like extended `function`s, for `command`. */\n  const { buffer, clear, command = api } = api;\n\n  const {\n      merge, pipeline, verts, frag, frags, uniforms, attributes, maps,\n      // Update any default vertex `shader` to use the given `pre`.\n      pre: n = preDef, vert = vertDef.replaceAll(preDef, n || ''),\n      // Any vertex `count`, and `positions` to be passed to `buffer`.\n      count = countDef, positions = positionsDef\n    } = state;\n\n  // Ensure any properties changed are included.\n  to.pre = n;\n  to.vert = vert;\n  to.count = count;\n  to.positions = buffer(positions);\n\n  // May pre-process and keep the `shader`s for all passes in advance.\n  if(verts || frags) {\n    // Keep the current pass.\n    const { passNow } = state;\n\n    verts && (to.verts = verts);\n    frags && (to.frags = frags);\n\n    each((pass, p) => {\n        // Create `macro`s for this pass in advance.\n        state.passNow = p;\n        // Specify a `'vert'` type `shader` for any per-`shader` `macro` hooks.\n        verts && (verts[p] ??= macroPass(state, 'vert')+vert);\n        // Specify a `'frag'` type `shader` for any per-`shader` `macro` hooks.\n        frags && (frags[p] ??= macroPass(state, 'frag')+frag);\n      },\n      maps.passes);\n\n    // Set the pass back to what it was.\n    state.passNow = passNow;\n  }\n\n  /** A `command` to render `pass` updates via a `GL` `pipeline` description. */\n  to.pass = command(to.pipeline = {\n    // Uses the full-screen vertex `shader` state by default.\n    vert(_, s) {\n      const { passNow: p, step: { vert: v = vert, verts: vs = verts } } = state;\n\n      // Specify a `'vert'` type `shader` for any per-`shader` `macro` hooks.\n      return vs?.[p] ?? macroPass(s, 'vert')+v;\n    },\n    frag(_, s) {\n      const { passNow: p, step: { frag: f = frag, frags: fs = frags } } = state;\n\n      // Specify a `'frag'` type `shader` for any per-`shader` `macro` hooks.\n      return fs?.[p] ?? macroPass(s, 'frag')+f;\n    },\n    /** Need an active `pass` with `framebuffer`, or may draw to the screen. */\n    framebuffer: (_, s) => getPass(s)?.framebuffer,\n    count, uniforms,\n    attributes: {\n      [n+'position']: (_, s) => s.positions,\n      ...attributes\n    },\n    depth: { enable: false },\n    /** Any `pipeline` properties shallow-override others of the same name. */\n    ...pipeline\n  });\n\n  /** Any merged `texture`'s update, set up if not already given. */\n  merge && ((to.merge = merge).update ??= updateMerge);\n\n  /** Executes the next step and all its passes. */\n  to.step = (state = to) => {\n    const {\n        steps, merge, pass, onPass, onStep,\n        stepMax = stepMaxDef, clearPass = clearPassDef\n      } = state;\n\n    let { stepNow = 0 } = state;\n\n    /** Guard for number overflow; set to 0 to ignore or handle in `GLSL`. */\n    stepNow = state.stepNow = (stepNow+1)%(stepMax || Infinity);\n\n    const mergeUpdate = merge?.update;\n    const stepProps = onStep?.(state, wrap(stepNow, steps)) ?? state;\n\n    each((p, i) => {\n        stepProps.passNow = i;\n\n        const passProps = onPass?.(stepProps, p) ?? stepProps;\n\n        /** @todo Remove `clear` call if unnecessary? */\n        ((clearPass.framebuffer = getPass(passProps)?.framebuffer) &&\n          clear(clearPass));\n\n        pass(passProps);\n        // Update any merged `texture` upon each pass.\n        mergeUpdate?.(passProps);\n      },\n      stepProps.maps.passes);\n\n    delete clearPass.framebuffer;\n\n    return state;\n  };\n\n  return to;\n}\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback onStep\n * Callback upon each step.\n *\n * **See**\n * - {@link toStep}\n * - {@link data.toData}\n * - {@link state.framebuffer}\n *\n * **Returns**\n * - A `stepProps` object to use for each of the step's next passes; or\n *   `null`ish to use the given `props`.\n *\n * @param {object} [props] The `props` passed to `run`.\n * @param {framebuffer[]} step The `framebuffer`s for `props.stepNow` from\n *   `props.steps`, where the next state step will be drawn. See `toData`.\n *\n * @returns {object}\n */\n\n/**\n * @todo [Fix `@callback`/`@typedef`](https://github.com/TypeStrong/typedoc/issues/1896):\n *   nested `@param`; omits `@return`/`@see`/`@this`\n *\n * @callback onPass\n * Callback upon each pass.\n *\n * **See**\n * - {@link toStep}\n * - {@link maps.mapGroups}\n *\n * **Returns**\n * - A `passProps` object to use for the render `command` call; or `null`ish to\n *   use the given `stepProps`.\n *\n * @param {object} [stepProps] The `props` passed to `run` via any `onStep`.\n * @param {number[]} pass The maps for the next pass. See `mapGroups`.\n *\n * @returns {object}\n */\n\n/** A wrapper around `updateMerge`, handy for testing. */\nfunction updateMergeTest(state, update = updateMerge, after = 2) {\n  const { color, map: pass } = getPass(state);\n  const { merge: { all, next }, stepNow: s, passNow: p, size, maps } = state;\n  const { channels } = all;\n  const { steps: sl, shape: [w, h], merge: { shape: [wl, hl] } } = size;\n  const tl = maps.textures.length;\n  const y = (s%sl)*h;\n  const lc = y*tl*w;\n  const to = update(state);\n  let f = next?.framebuffer;\n\n  /** Handle `object`s or `regl`-like extended `function`s. */\n  (f.call !== Function.call) && (f = f?.call);\n\n  console.warn(s, p, pass, ':');\n  console.warn('- l', 0, 'r', tl*w, 'w', w, 'wl', wl);\n  console.warn('- t', y, 'b', y+h, 'h', h, 'hl', hl);\n  console.warn('- c', channels, 'lc', lc*channels, 'rc', (lc+(w*h))*channels,\n    'sc', w*h*channels, 'slc', wl*hl*channels);\n\n  f.call(f, { color: to }).use.call(f, () =>\n    console.warn(Array.prototype.reduce.call(regl.read(), (o, v, i) =>\n        o+((i)? ',\\t' : '')+\n        ((!i)? ''\n        : ((i%(tl*w*h*channels) === 0)?\n            `\\n${'='.repeat(100)}step${'='.repeat(100)}\\n`\n        : ((i%(tl*w*channels) === 0)? '\\n'\n        : ((i%(w*channels) === 0)? ' || \\t'\n        : ((i%channels === 0)? ' / \\t' : '')))))+\n        (i*1e-3).toFixed(3).slice(2)+': '+((v)? v.toFixed(2) : '___'),\n      '\\n')));\n\n  if(s && after && s%(sl*after) === 0) { debugger; }\n\n  return to;\n}\n\nexport default toStep;\n","/**\n * **Main `index.js` - see [`readme`](..)**\n *\n * [![`gl-gpgpu` particles demo](media://demo-particles-regl-frames.png)](..)\n *\n * [GPGPU](https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units)\n * state-stepping - declaratively maps optimal draw passes, shaders, `GL`\n * resources, inputs, outputs - lets you focus on your logic, BYO-renderer.\n *\n * Decouples logic from rendering approach/engine.\n * Each module and hook may be used as given, or piecemeal, or overridden.\n *\n * @module (root)\n * @category Root\n * @category JS\n */\n\nimport './api';\nimport { glslRx } from './const';\nimport { mapStep } from './maps';\nimport { toData } from './data';\nimport { toUniforms } from './uniforms';\nimport { toStep } from './step';\n\nconst { isFinite } = Number;\n\n/**\n * Parse a `GLSL` version into a `number`.\n *\n * @see {@link const.glslRx}\n *\n * @param {string|number} version A `GLSL` version `string`, expected in a `GL`\n *   parameter `SHADING_LANGUAGE_VERSION` format to parse into a `number`, from\n *   any first found version number or the full given `string` otherwise; or a\n *   `number`, to use as-is.\n *\n * @returns {number} A `GLSL` version `number`, parsed from the given `version`.\n */\nexport const getGLSL = (version) =>\n  ((isFinite(version))? version\n  : parseFloat(version?.match?.(glslRx)?.[0] ?? version, 10));\n\n/**\n * Sets up all the maps, data, inputs, and commands for a `gpgpu` process.\n *\n * Hooks up each main part in order into the complete process. Each part may\n * also be used individually for more custom behaviour; see their documentation.\n *\n * @see {@link maps.mapStep}\n * @see {@link maps.mapGroups}\n * @see {@link maps.mapSamples}\n * @see {@link data.toData}\n * @see {@link uniforms.toUniforms}\n * @see {@link step.toStep}\n * @see {@link macros.macroPass}\n *\n * @param {object} api An API for `GL` resources. See `toData` and `toStep`.\n * @param {object} [api.limits=api] A map of `GL` resource limits.\n * @param {number} [api.limits.maxDrawbuffers] The maximum number of `GL`\n *   `texture`s a `framebuffer` can bind in a single draw call.\n * @param {object} [state=\\{\\}] State properties to set up; a new `object` by\n *   default. See `toData`, `toUniforms`, and `toStep`.\n * @param {object} [state.maps] How values are grouped per-`texture` per-pass\n *   per-step. Sets up new maps if not given or missing its mapped properties.\n *   See `mapStep`.\n * @param {number} [state.maps.buffersMax=api.limits.maxDrawbuffers] Maximum\n *   number of `texture`s per draw pass. Uses more passes above this limit.\n * @param {object} [to=state] The `object` to set up. Modifies the given `state`\n *   object by default.\n *\n * @returns {object} The given `to` data `object`; set up with data resources\n *   for a `gpgpu` process. See `mapStep`, `toData`, `toUniforms`, `toStep`.\n */\nexport function gpgpu(api, state = {}, to = state) {\n  const { maxDrawbuffers, glsl: apiGLSL } = api.limits ?? api;\n  const { maps = {}, glsl = apiGLSL } = state;\n  const { buffersMax } = maps;\n\n  /** The parsed `GLSL` version. */\n  to.glsl = getGLSL(glsl);\n\n  // Temporary updates to set up `maps` then `state`.\n  /** Any `maps.buffersMax` supersedes any `maxDrawbuffers` from the `api`. */\n  maps.buffersMax ??= maxDrawbuffers;\n  state.maps = mapStep(maps, to.maps ??= {});\n\n  toData(api, state, to);\n  toUniforms(state, to.uniforms ??= {});\n  toStep(api, state, to);\n\n  // Undo any temporary changes made above to the given `maps` and `state`.\n  /** @todo Improve, this is awkward. */\n  (state.maps = maps).buffersMax = buffersMax;\n\n  return to;\n}\n\nexport default gpgpu;\n","/**\n * How many vertexes for a given form to cover each entry's steps of state:\n * - If 2 states or form are given, gives a setup of pairs for a line segment\n *   between each entry's steps of state using `gl.LINES`.\n * - If fewer than 2 states or form are given, gives a setup for a point at each\n *   entry's steps of state using `gl.POINTS`.\n *\n * Possibly useful for other forms too.\n *\n * Corresponds to the indexing logic in the `indexForms` `GLSL` function.\n *\n * @module\n * @category JS\n *\n * @see {@link index-forms/index-states.glsl!}\n * @see {@link index-forms/index-entries.glsl!}\n * @see [`gl.LINES`](https://webglfundamentals.org/webgl/lessons/webgl-points-lines-triangles.html)\n *\n * @param {number} [states=1] How many steps of state each entry has.\n * @param {number} [form=2] How many steps of state each form covers.\n * @param {number} [count=1] How many entries, if any; result to be multiplied\n *   externally if not given.\n *\n * @returns {number} The number of vertexes needed for the given `form` to cover\n *   all steps of `states`; over all `count` if given, to be multiplied\n *   externally if not given.\n *\n * @remarks [[include:src/index-forms/readme.md]]\n */\nexport const indexForms = (states = 1, form = 2, count = 1) =>\n  Math.max(1, (states-form)+1)*form*count;\n\nexport default indexForms;\n","/** Demo implementation of 3D particle Verlet/Euler integration simulation. */\n\nimport getRegl from 'regl';\nimport clamp from 'clamp';\nimport timer from '@epok.tech/fn-time';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport each from '@epok.tech/fn-lists/each';\nimport range from '@epok.tech/fn-lists/range';\nimport wrap from '@epok.tech/fn-lists/wrap';\n\nimport gpgpu from '../../src';\n\nimport { extensionsFloat, extensionsHalfFloat, optionalExtensions }\n  from '../../src/const';\n\nimport { macroPass } from '../../src/macros';\nimport { mapStep } from '../../src/maps';\nimport { toUniforms } from '../../src/uniforms';\nimport { getDrawIndexes } from '../../src/size';\nimport indexForms from '../../src/index-forms';\n\nimport stepFrag from './step.frag.glsl';\nimport drawVert from './draw.vert.glsl';\nimport drawFrag from './draw.frag.glsl';\n\nself.gpgpu = gpgpu;\nself.macroPass = macroPass;\nself.mapStep = mapStep;\nself.toUniforms = toUniforms;\nself.getDrawIndexes = getDrawIndexes;\nself.indexForms = indexForms;\n\nconst canvas = document.querySelector('canvas');\n\n// Scroll to the top.\nconst scroll = () => setTimeout(() => canvas.scrollIntoView(true), 0);\n\nscroll();\n\nfunction toggleError(e) {\n  canvas.classList[(e)? 'add' : 'remove']('hide');\n  document.querySelector('.error').classList[(e)? 'remove' : 'add']('hide');\n  document.querySelector('aside').classList[(e)? 'add' : 'remove']('show');\n  scroll();\n}\n\ntoggleError();\n\n// Handle query parameters.\n\nconst getQuery = (search = location.search) => new URLSearchParams(search);\n\nfunction setQuery(entries, query = getQuery()) {\n  each(([k, v = null]) => ((v === null)? query.delete(k) : query.set(k, v)),\n    entries);\n\n  return query;\n}\n\nlet query = getQuery();\nconst fragDepth = query.get('depth') === 'frag';\n\n// Set up GL.\n\nconst extend = {\n  required: extensionsHalfFloat,\n  optional: ((fragDepth)?\n      [...extensionsFloat, ...optionalExtensions, 'ext_frag_depth']\n    : [...extensionsFloat, ...optionalExtensions])\n};\n\nconst pixelRatio = Math.max(devicePixelRatio, 1.5) || 1.5;\n\nconst regl = self.regl = getRegl({\n  canvas, pixelRatio,\n  extensions: extend.required, optionalExtensions: extend.optional,\n  onDone: toggleError\n});\n\nconsole.group('Extensions');\n\nconsole.log('required',\n  (extend.required &&\n    reduce((o, e) => o+(o && '; ')+e+': '+regl.hasExtension(e),\n      extend.required, '')));\n\nconsole.log('optional',\n  (extend.optional &&\n    reduce((o, e) => o+(o && '; ')+e+': '+regl.hasExtension(e),\n      extend.optional, '')));\n\nconsole.groupEnd();\n\n/**\n * How many state values (channels) are tracked independently of others.\n * The order here is the order used in the shaders and generated macros, but for\n * optimal lookups may be `packed` into channels/textures/passes differently.\n */\nconst valuesMap = (new Map())\n  // Position, uses 3 channels.\n  .set('position', 3)\n  // Motion, uses 3 channels.\n  .set('motion', 3)\n  // Life, uses 1 channel.\n  .set('life', 1);\n\nconst values = [];\nconst valuesIndex = {};\n\nvaluesMap.forEach((v, k) => valuesIndex[k] = values.push(v)-1);\nconsole.log(values, '`values`');\n\n/** Limits of this device and these `values`. */\nconst { maxTextureUnits, maxTextureSize, lineWidthDims, pointSizeDims } =\n  regl.limits;\n\n/** Whether to merge states into one texture; separate textures if not given. */\nconst useMerge = query.get('merge');\n\n/**\n * Merge by default for maximum platform compatibility.\n * @todo Should work in one of these cases:\n * ```\n *   const merge = ((useMerge)? (useMerge !== 'false') : (stepsPast > 1));\n *   const merge = ((useMerge)? (useMerge !== 'false') : (form !== 1));\n * ```\n */\nconst merge = !useMerge || (useMerge !== 'false');\n\n/** How many steps are used for output at a given time. */\nconst bound = 1;\n\n/**\n * Better stay farther under maximum texture size, for errors/crashes.\n * @todo Drawing issues with `scale` and `steps` both over 10.\n */\nconst limits = { scale: [0, Math.log2(maxTextureSize)] };\n/** A scale that seems to work well from experimentation with `GL` limits. */\nconst niceScale = clamp(8, ...limits.scale);\n\n/** The data entries scale, from user input or default best-guess. */\nconst scale = clamp((parseFloat(query.get('scale'), 10) || niceScale),\n  ...limits.scale);\n\n/** The steps of state to track. */\nlimits.steps = [\n  1+bound,\n  ((merge)?\n      // Maximum steps must fit the maximum total texture size if merging.\n      Math.floor(maxTextureSize/(2**scale))\n      // Maximum steps must fit the maximum total texture units if separate.\n    : Math.floor((maxTextureUnits-bound)/reduce((s, v) => s+v, values)*4))\n];\n\nconsole.log('limits', limits, regl.limits);\n\n/**\n * 2 active states, as many others as can be bound; at least 2 past states\n * needed for Verlet integration, 1 for Euler integration.\n */\nconst steps = Math.floor(clamp(parseFloat(query.get('steps'), 10) || 2+bound,\n  ...limits.steps));\n\n/** How many past steps (not bound to outputs) are in the GPGPU state. */\nconst stepsPast = steps-bound;\n/** Whether to allow Verlet integration; within available resource limits. */\nconst canVerlet = stepsPast > 1;\n\n/**\n * Form vertexes to draw; if not given, uses trails of 'lines' if there are\n * enough steps, or 'points' if not.\n */\nconst form = Math.floor(parseFloat(query.get('form'), 10) || 0);\n\n/** How wide the form is; to be scaled by `viewScale`. */\nconst wide = parseFloat(query.get('wide'), 10) || 4e-3*pixelRatio;\n\n/** How much to shake around older state positions. */\nlet shake = parseFloat(query.get('shake'), 10);\n\n!shake && shake !== 0 && (shake = 1e-2);\n\n/**\n * Variable-step (delta-time) if given `false`y/`NaN`; fixed-step (add-step)\n * if given another number; uses default fixed-step if not given.\n */\nconst hasTimestep = query.has('timestep');\n\n/** Whether to use a fixed timestep or render variably as soon as possible. */\nconst timestep = ((hasTimestep)? parseFloat(query.get('timestep'), 10) || null\n  : 1e3/60);\n\nconsole.log(location.search+':\\n', ...([...query.entries()].flat()), '\\n',\n  'steps:', steps, 'scale:', scale, 'form:', form, 'wide:', wide,\n  'depth:', fragDepth, 'shake:', shake, 'timestep:', timestep, 'merge:', merge);\n\n// Set up the links.\n\ndocument.querySelector('#verlet').href = `?${\n  setQuery([['steps', 2+bound], ['scale', 9], ['wide'], ['depth']])}#verlet`;\n\ndocument.querySelector('#euler').href = `?${\n  setQuery([['steps', 1+bound], ['scale', 9], ['wide'], ['depth']])}#euler`;\n\ndocument.querySelector('#long').href = `?${\n  setQuery([['steps', 9+bound], ['scale', 8], ['wide'], ['depth']])}#long`;\n\ndocument.querySelector('#trace').href = `?${\n  setQuery([['steps', 3e2], ['scale', 4], ['wide'], ['depth']])}#trace`;\n\ndocument.querySelector('#trails').href =\n  `?${setQuery([['form', ((form)? ((form+1)%3 || null) : 1)]])}#trails`;\n\ndocument.querySelector('#timestep').href =\n  `?${setQuery([['timestep', ((hasTimestep)? null : '')]])}#timestep`;\n\ndocument.querySelector('#merge').href =\n  `?${setQuery([['merge',\n    ((!useMerge)? false : ((useMerge === 'false')? true : null))]])}#merge`;\n\n/**\n * How state values map to any past state values they derive from.\n * Denoted as an array, nested 1-3 levels deep:\n * 1. In `values` order, indexes `values` to derive from, 1 step past.\n * 2. Indexes `values` to derive from, 1 step past.\n * 3. Shows how many steps past, then indexes `values` to derive from.\n */\nconst derives = [];\n\n// Position value derives from:\nderives[valuesIndex.position] = [\n  // Position, 2 steps past.\n  [wrap(1, stepsPast), valuesIndex.position],\n  // Position, 1 step past.\n  valuesIndex.position,\n  // Motion, 1 step past.\n  valuesIndex.motion,\n  // Life, 1 step past.\n  valuesIndex.life\n];\n\n// Motion value derives from:\nderives[valuesIndex.motion] = [\n  // Motion, 1 step past.\n  valuesIndex.motion,\n  // Life, 1 step past.\n  valuesIndex.life,\n  // Position, 1 step past.\n  valuesIndex.position\n];\n\n// Life value derives from:\nderives[valuesIndex.life] = [\n  // Life, last step past.\n  [wrap(-1, stepsPast), valuesIndex.life],\n  // Life, 1 step past.\n  valuesIndex.life\n];\n\nconsole.log(derives, '`derives`');\n\n/** The main `gl-gpgpu` state. */\nconst state = gpgpu(regl, {\n  // Logic given as state values, `gl-gpgpu` maps optimal inputs and outputs.\n  maps: {\n    // How many state values (channels) are tracked independently of others.\n    values,\n    // How state values map to any past state values they derive from.\n    derives\n  },\n  // How many steps of state to track.\n  steps,\n  // How many states are bound to frame-buffer outputs at any step.\n  bound,\n  // How many entries to track, here encoded as the power-of-2 size per side\n  // of the data texture: `(2**scale)**2`; can also be given in other ways.\n  scale,\n  // Whether to merge states into one texture; separate textures if not given.\n  merge,\n  // Data type according to platform capabilities.\n  // @todo Seems to move differently with `'half float'` Verlet integration.\n  type: ((extensionsFloat.every(regl.hasExtension))? 'float' : 'half float'),\n  // Configure macro hooks, global or per-shader.\n  macros: {\n    // No macros needed for the `vert` shader; all other macros generated.\n    macroVert: false\n  },\n  // A fragment shader to compute each state step, with `gl-gpgpu` macros.\n  // Vertex shaders can also be given.\n  frag: stepFrag,\n  // Macros are prepended to `frag` shader per-pass, cached in `frags`.\n  frags: [],\n  // Custom uniforms in addition to those `gl-gpgpu` provides.\n  uniforms: {\n    dt: (_, { props: { timer: t, rate: r } }) => t.dt*r,\n    dt0: (_, { props: { timer: t, rate: r } }) => t.dts[0]*r,\n    dt1: (_, { props: { timer: t, rate: r } }) => t.dts[1]*r,\n    time: (_, { props: { timer: t, rate: r } }) => t.time*r,\n    loop: (_, { props: { timer: t, loop: l } }) => Math.sin(t.time/l*Math.PI)*l,\n\n    lifetime: regl.prop('props.lifetime'),\n    useVerlet: regl.prop('props.useVerlet'),\n    epsilon: regl.prop('props.epsilon'),\n    moveCap: regl.prop('props.moveCap'),\n    source: regl.prop('props.source'),\n    sink: regl.prop('props.sink'),\n    g: regl.prop('props.g'),\n    scale: regl.prop('props.scale'),\n\n    // One option in these arrays is used, by Euler/Verlet respectively.\n    spout: (_, { props: { spout: ss, useVerlet: u } }) => ss[+u],\n    // drag: (_, { props: { drag: ds, useVerlet: u } }) => ds[+u]\n  },\n  // Custom properties to be passed to shaders mixed in with `gl-gpgpu` ones.\n  props: {\n    // Set up the timer.\n    timer: timer((timestep)?\n        // Fixed-step (add-step).\n        { step: timestep, dts: range(2, 0) }\n        // Real-time (variable delta-time).\n      : { step: '-', now: () => regl.now()*1e3, dts: range(2, 0) }),\n\n    // Speed up or slow down the passage of time.\n    rate: 1,\n    // Loop time over this period to avoid instability of parts of the demo.\n    loop: 3e3,\n    // A particle's lifetime range, and whether it's allowed to spawn.\n    lifetime: [3e2, 4e3, +true],\n    // Whether to use Verlet (midpoint) or Euler (forward) integration.\n    useVerlet: +canVerlet,\n    // A small number greater than 0; avoids speeds exploding.\n    epsilon: 1e-5,\n    // How faar a particle can move in any frame.\n    moveCap: 4e-2,\n    // Whether to invert particle flow towards rather than away from source.\n    invert: false,\n    // The position around which particles spawn.\n    source: [0, 0, 0.4],\n    // Sink position, and universal gravitational constant.\n    sink: [\n      // Sink position.\n      0, 0, 0.6,\n      // Universal gravitational constant (scaled).\n      6.674e-11*5e10\n    ],\n    // Constant acceleration of gravity; and whether to use it or the `sink`.\n    g: [\n      // Constant acceleration of gravity.\n      0, -9.80665, 0,\n      // Whether to use it or the `sink`.\n      +false\n    ],\n    // For numeric accuracy, encoded as exponent `[b, p] => b*(10**p)`.\n    scale: [1, -7],\n\n    // One option in these arrays is used, by Euler/Verlet respectively.\n\n    // The distance from the `source`, and speed, that particles spawn with.\n    spout: [[0, 3e3], [0, 2e2]],\n    // Drag coefficient.\n    // drag: [range(3, 1e-3), range(3, 1e-1)]\n  }\n});\n\nconsole.log(self.state = state);\n\nconsole.group('How `values` are `packed` to fit texture channels efficiently');\nconsole.log(state.maps.values, '`values` (referred to by index)');\nconsole.log(state.maps.packed, '`packed` (indexes `values`)');\nconsole.log(...state.maps.textures, '`textures` (indexes `values`)');\nconsole.log(state.maps.valueToTexture, '`valueToTexture` (indexes `textures`)');\nconsole.groupEnd();\n\n// Set up rendering.\n\n/**\n * Draw all states with none bound as outputs.\n * @todo Errors without `merge`; why, if the framebuffer isn't bound?\n */\nconst drawBound = +(!merge);\n\nconst drawSteps = steps-drawBound;\nconst useLines = merge && (drawSteps > 1);\n\nconsole.log('drawSteps', drawSteps, 'useLines', useLines);\n\n/**\n * Vertex counts by form; how many steps a form covers, for all entries;\n * respectively for: none, points, lines.\n * Note `state.size.entries` equals the value returned by `countDrawIndexes`.\n */\nconst drawCounts = map((_, f) => indexForms(drawSteps, f, state.size.entries),\n  range(2+useLines), 0);\n\nconst viewScale = ({ drawingBufferWidth: w, drawingBufferHeight: h }) =>\n  Math.min(w, h);\n\n/** Reuse the `gpgpu` state, mix in drawing-specific state. */\nconst drawState = {\n  ...state,\n  // Omit some properties unused in drawing for some clarity.\n  count: undefined, vert: undefined, frag: undefined, attributes: undefined,\n  // Override other properties for drawing.\n  bound: drawBound,\n  // Drawing, not data - so no `output` macros. Also, don't need `frag` macros.\n  macros: { output: 0, frag: 0 },\n  drawProps: {\n    // How many vertexes per form.\n    form: clamp(form || 2, 1, 1+useLines),\n    // Vertex counts by form; how many steps a form covers, for all entries.\n    counts: drawCounts,\n    // Which primitives can be drawn.\n    primitive: null,\n    primitives: [, 'points', 'lines'],\n    // How wide the form is; to be scaled by `viewScale`.\n    wide,\n    // How much to shake around older state positions.\n    shake,\n\n    // One option in these arrays is used, by Euler/Verlet respectively.\n\n    // Speed-to-colour scaling, as `[multiply, power]`.\n    pace: [[1e-3, 0.6], [3e2, 0.6]]\n  },\n  // Map everything similarly to the `gpgpu` step, `mapStep` can be reused to\n  // create new mappings with some additions for drawing.\n  maps: mapStep({\n    ...state.maps,\n    // This one pass can bind textures for input; not output across passes.\n    texturesMax: maxTextureUnits,\n\n    /**\n     * One set of lookups/reads of all values in one pass.\n     * Passing `true` adds all values at that level of nesting:\n     * `pass|[values|[value|[step, value]]]`\n     * Thus, this example means that the _first_ value derives from:\n     * - All values 1 step past (`true`).\n     * - The position value 2 steps past.\n     * Makes `reads_0_i` macros for each `i => [step, value]` of\n     * `[[0, 0], [0, 1], [0, 2], [1, 0]]`\n     */\n    derives: [[true, [wrap(1, drawSteps), valuesIndex.position]]]\n  })\n};\n\n/** The `GL` render command pipeline state. */\nconst drawPipeline = {\n  // Use `gpgpu` `macro` mappings by prepending `macro`s from a single pass.\n  vert: macroPass(drawState)+drawVert,\n  frag: drawFrag,\n  // Maximum count here to set up buffers, can be partly used later.\n  attributes: { index: getDrawIndexes(Math.max(...drawCounts)) },\n  // Hook up `gpgpu` uniforms by adding them here.\n  uniforms: toUniforms(drawState, {\n    ...drawState.uniforms,\n    // How many vertexes per form.\n    form: regl.prop('drawProps.form'),\n    shake: regl.prop('drawProps.shake'),\n    pace: (_, { drawProps: dp, props: p }) => dp.pace[+p.useVerlet],\n    pointSize: (c, p) => clamp(p.drawProps.wide*viewScale(c), ...pointSizeDims)\n  }),\n  lineWidth: (c, p) => clamp(p.drawProps.wide*viewScale(c), ...lineWidthDims),\n  // Vertex counts by form; how many steps a form covers, for all entries.\n  count: (_, { count: c, drawProps: { counts: cs, form: f } }) => c ?? cs[f],\n  depth: { enable: true },\n  blend: { enable: true, func: { src: 'one', dst: 'one minus src alpha' } },\n\n  primitive: (_, { drawProps: { primitive: p, primitives: ps, form: f } }) =>\n    p ?? ps[f]\n};\n\nconsole.log((self.drawState = drawState), (self.drawPipeline = drawPipeline));\n\n/** Function to execute the render command pipeline state every frame. */\nconst draw = regl(drawPipeline);\n\nfunction stepTime(state) {\n  const { dts } = state;\n\n  dts[0] = dts[1];\n  dts[1] = timer(state).dt;\n\n  return state;\n}\n\nconst clearView = { color: [0, 0, 0, 0], depth: 1 };\n\nregl.frame(() => {\n  try {\n    stepTime(state.props.timer);\n    // Compute the next step of state.\n    state.step();\n    drawState.stepNow = (state.stepNow+1)-drawBound;\n    regl.clear(clearView);\n    draw(drawState);\n  }\n  catch(e) { toggleError(e); }\n});\n\nfunction stopEvent(e) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\n/** Pause the spawning while pointer is held down. */\nlet hold;\n\n/** Pause particles spawning. */\ncanvas.addEventListener('contextmenu', (e) => {\n  // Whether a particle's allowed to spawn.\n  state.props.lifetime[2] = +false;\n  hold = false;\n  stopEvent(e);\n});\n\n/** Toggle physics and graphics modes. */\ncanvas.addEventListener((('onpointerup' in self)? 'pointerup'\n    : (('ontouchend' in self)? 'touchend' : 'mouseup')),\n  (e) => {\n    /** Unpause the spawning when pointer is released. */\n    const spawned = state.props.lifetime[2];\n    const held = hold;\n\n    // Whether a particle's allowed to spawn.\n    state.props.lifetime[2] = +true;\n    hold = false;\n\n    // Don't switch modes if pointer was being held down, particles weren't\n    // allowed to spawn, or any non-primary button was released.\n    if(held || !spawned || (e.button !== 0)) { return; }\n\n    // Switch between physics/drawing modes if this wasn't press-held.\n\n    const { props: p, drawProps: d } = drawState;\n    const v = canVerlet && (p.useVerlet = 1-p.useVerlet);\n    const f = form || (d.form = 1+(useLines && ((canVerlet)? v : d.form%2)));\n\n    console.log('useVerlet', v, 'form', f,\n      // See how this derives other properties.\n      'count', drawPipeline.count(0, drawState),\n      'primitive', drawPipeline.primitive(0, drawState));\n  });\n\n/** Move either the source or the sink, according to primary pointer. */\ncanvas.addEventListener((('onpointermove' in self)? 'pointermove'\n    : (('ontouchmove' in self)? 'touchmove' : 'mousemove')),\n  (e) => {\n    const { clientX: x, clientY: y, type, pointerType, isPrimary = true } = e;\n    const { left, top, width: w, height: h } = canvas.getBoundingClientRect();\n    const { source: i, sink: o, invert } = state.props;\n    const touch = ((type === 'touchmove') || (pointerType === 'touch'));\n    /** Move source or sink, switch by primary/other pointer/s or inversion. */\n    const to = ((isPrimary)? ((invert)? o : i) : ((invert)? i : o));\n    const size = Math.min(w, h);\n\n    to[0] = (((x-((w-size)*0.5)-left)/size)*2)-1;\n    to[1] = -((((y-((h-size)*0.5)-top)/size)*2)-1);\n    // For touch devices, don't pause spawn if touch moves while held down.\n    touch && (hold = true);\n  });\n\n/** Switch primary pointer control between source and sink. */\ncanvas.addEventListener('dblclick', (e) => {\n  state.props.invert = !state.props.invert;\n  stopEvent(e);\n});\n\n/** Resize the canvas. */\nfunction resize() {\n  canvas.width = innerWidth*pixelRatio;\n  canvas.height = innerHeight*pixelRatio;\n}\n\naddEventListener('resize', resize);\nresize();\n","/**\n * The update step for a GPGPU particle simulation.\n * Requires setup with preprocessor macros - see `macroPass`.\n * Executed in one or more passes; each chunk depending on a `gpgpu` macro may\n * be combined with others into one pass or separated into its own pass; `gpgpu`\n * preprocessor macros control the combination according to which `values` are\n * currently bound for `output` to the next `state`.\n *\n * @see {@link step.toStep}\n * @see {@link macros.macroPass}\n */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\n// Setting up the macros and aliases `gl-gpgpu` provides.\n\n// Note that these `texture_i`/`channels_i`/`reads_i_j` indexes correspond to a\n// value at that index in the `values`/`derives` arrays provided to `gl-gpgpu`;\n// they are defined here to match that arrangement.\n\n// The texture channels each of the `values` is stored in.\n#define positionChannels gpgpu_channels_0\n#define motionChannels gpgpu_channels_1\n#define lifeChannels gpgpu_channels_2\n\n/** Set up sampling logic via `gl-gpgpu` macro. */\ngpgpu_useSamples\n\n// Set up minimal texture reads logic; only read what a value with a currently\n// bound output `derives` from other `values` for its next state.\n// See `derives` for indexing `reads_${bound value index}_${derives index}`.\n#ifdef gpgpu_output_0\n  #define positionOutput gpgpu_output_0\n  gpgpu_useReads_0\n  #define positionReadPosition0 gpgpu_reads_0_0\n  #define positionReadPosition1 gpgpu_reads_0_1\n  #define positionReadMotion gpgpu_reads_0_2\n  #define positionReadLife gpgpu_reads_0_3\n#endif\n#ifdef gpgpu_output_1\n  #define motionOutput gpgpu_output_1\n  gpgpu_useReads_1\n  #define motionReadMotion gpgpu_reads_1_0\n  #define motionReadLife gpgpu_reads_1_1\n  #define motionReadPosition gpgpu_reads_1_2\n#endif\n#ifdef gpgpu_output_2\n  #define lifeOutput gpgpu_output_2\n  gpgpu_useReads_2\n  #define lifeReadLifeLast gpgpu_reads_2_0\n  #define lifeReadLife1 gpgpu_reads_2_1\n#endif\n\n// The main shader.\n\n// States from `gl-gpgpu`; in separate textures or merged.\n#ifdef gpgpu_mergedStates\n  uniform sampler2D gpgpu_states;\n#else\n  uniform sampler2D gpgpu_states[gpgpu_stepsPast*gpgpu_textures];\n#endif\n\n/** Current step from `gl-gpgpu`; needed for `tapStates` or `tapStatesBy`. */\nuniform float gpgpu_stepNow;\n\n// Custom inputs for this demo.\n\nuniform float dt0;\nuniform float dt1;\nuniform float loop;\n/** A particle's lifetime range, and whether it's allowed to respawn. */\nuniform vec3 lifetime;\nuniform float useVerlet;\nuniform float epsilon;\nuniform float moveCap;\nuniform vec2 scale;\nuniform vec2 spout;\nuniform vec3 source;\n/** Sink position, and universal gravitational constant. */\nuniform vec4 sink;\n/** Constant acceleration of gravity; and whether to use it or the `sink`. */\nuniform vec4 g;\n// uniform vec3 drag;\n\nvarying vec2 uv;\n\n#pragma glslify: map = require(glsl-map)\n#pragma glslify: le = require(glsl-conditionals/when_le)\n#pragma glslify: random = require(glsl-random)\n\n#ifdef positionOutput\n  /** @todo Try Velocity Verlet integration. */\n  #pragma glslify: verlet = require(@epok.tech/glsl-verlet/p-p-a)\n#endif\n\n#if defined(positionOutput) || defined(motionOutput)\n  #pragma glslify: onSphere = require(./on-sphere)\n#endif\n\n/**\n * Drag acceleration, constrained within the given velocity.\n * @see [Wikipedia on Verlet](https://en.wikipedia.org/wiki/Verlet_integration#Algorithmic_representation)\n */\n// vec3 dragAcc(vec3 velocity, vec3 drag) {\n//   vec3 l = abs(velocity);\n\n//   return clamp(-0.5*sign(velocity)*dot(velocity, velocity)*drag, -l, l);\n// }\n\nvoid main() {\n  // Sample the desired state values - creates the `gpgpu_data` `array`.\n  gpgpu_tapState(uv)\n\n  // Read values.\n\n  #ifdef positionOutput\n    vec3 position0 = gpgpu_data[positionReadPosition0].positionChannels;\n  #endif\n\n  // If reads all map to the same value sample, any of them will do.\n  #if defined(positionOutput) || defined(motionOutput)\n    #if defined(positionOutput)\n      #define readMotion positionReadMotion\n      #define readPosition positionReadPosition1\n    #elif defined(motionOutput)\n      #define readMotion motionReadMotion\n      #define readPosition motionReadPosition\n    #endif\n\n    vec3 position1 = gpgpu_data[readPosition].positionChannels;\n    vec3 motion = gpgpu_data[readMotion].motionChannels;\n  #endif\n\n  // If reads all map to the same value sample, any of them will do.\n  #if defined(positionOutput)\n    #define readLife positionReadLife\n  #elif defined(lifeOutput)\n    #define readLife lifeReadLife\n  #elif defined(motionOutput)\n    #define readLife motionReadLife\n  #endif\n\n  float life = gpgpu_data[readLife].lifeChannels;\n\n  #ifdef lifeOutput\n    float lifeLast = gpgpu_data[lifeReadLifeLast].lifeChannels;\n  #endif\n\n  // Update and output values.\n  // Note that the update/output logic components within each `#if` macro\n  // block from `gpgpu` are independent modules, as the `gpgpu` macros\n  // determine whether they're executed across one or more passes - they could\n  // also be coded in separate files called from here, however they're coded\n  // inline here for brevity, relevance, and easy access to shared variables.\n\n  /** Whether the particle is ready to respawn. */\n  float spawn = le(life, 0.0);\n\n  #if defined(positionOutput) || defined(motionOutput)\n    // Workaround for switching Euler/Verlet; interpret `motion` data as\n    // acceleration/velocity, respectively.\n    vec3 velocity = motion;\n    vec3 acceleration = motion;\n\n    /** Spawn randomly on a sphere around the source, move in that direction. */\n    vec3 spoutSpawn = random(loop-(uv*dt0))*\n      onSphere(random((uv+loop)/dt1), random((uv-loop)*dt0));\n  #endif\n\n  #ifdef positionOutput\n    /** For numeric accuracy, encoded as exponent `[b, p] => b*(10**p)`. */\n    float size = scale.s*pow(10.0, scale.t);\n\n    /**\n     * Constrain Verlet movement; handle here for better numerical accuracy.\n     * Any position changes below the movement cap remain the same; any\n     * bigger clamped towards current position, by the ratio over the limit.\n     */\n    vec3 back = mix(position0, position1,\n      clamp((distance(position1, position0)/moveCap)-1.0, 0.0, 1.0));\n\n    // Use either Euler integration...\n    vec3 positionTo = mix(position1+(velocity*dt1*size),\n      // ... or Verlet integration...\n      verlet(back, position1, acceleration*size, dt0, dt1),\n      // ... according to which is currently active.\n      useVerlet);\n\n    /** Spawn around the source. */\n    vec3 positionSpawn = source+(spout.x*spoutSpawn);\n\n    /** Output the next position value to its channels in the state texture. */\n    positionOutput = mix(positionTo, positionSpawn, spawn);\n  #endif\n  #ifdef motionOutput\n    /**\n     * Gravitate towards the sink point (simplified).\n     * @see [Wikipedia on gravitation](https://en.wikipedia.org/wiki/Newton%27s_law_of_universal_gravitation)\n     */\n    vec3 gravity = sink.xyz-position1;\n\n    gravity *= sink.w/max(dot(gravity, gravity), epsilon);\n\n    /** Use sink point, or constant acceleration due to gravity. */\n    acceleration = mix(gravity, g.xyz, g.w);\n\n    /** Can also combine other forces, e.g: drag. */\n    // acceleration += dragAcc(mix(velocity, acceleration*dt1, useVerlet), drag);\n\n    vec3 motionTo = mix(velocity+(acceleration*dt1), acceleration, useVerlet);\n    vec3 motionNew = spout.y*spoutSpawn;\n\n    /** Output the next motion value to its channels in the state texture. */\n    motionOutput = mix(motionTo, motionNew, spawn);\n  #endif\n  #ifdef lifeOutput\n    float lifeTo = max(life-dt1, 0.0);\n    float lifeNew = map(random(uv*loop), 0.0, 1.0, lifetime.s, lifetime.t);\n    /** Whether the oldest of this trail has faded. */\n    float faded = le(lifeLast, 0.0);\n\n    /**\n     * Output the next life value to its channels in the state texture.\n     * Only spawn life once the oldest step reaches the end of its lifetime\n     * (past and current life are both 0), and if it's allowed to respawn.\n     */\n    lifeOutput = mix(lifeTo, lifeNew, spawn*faded*lifetime.z);\n  #endif\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see {@link macros.macroPass}\n * @see {@link macros.macroValues}\n */\n\nprecision highp float;\n\n// The texture channels each of the `values` is stored in.\n#define positionChannels gpgpu_channels_0\n#define motionChannels gpgpu_channels_1\n#define lifeChannels gpgpu_channels_2\n// Set up sampling logic.\ngpgpu_useSamples\n// Only the first value derives from all values, giving these minimal `reads`.\ngpgpu_useReads_0\n// These first `derives` are all in one pass, `0`, in the order of `values`.\n// See `values` for indexing `reads_0_${derives index == values index}`.\n#define readPosition1 gpgpu_reads_0_0\n#define readMotion gpgpu_reads_0_1\n#define readLife gpgpu_reads_0_2\n// Additional `derives` are individually specified.\n#define readPosition0 gpgpu_reads_0_3\n\nattribute float index;\n\n// States from `gl-gpgpu`; in separate textures or merged.\n#ifdef gpgpu_mergedStates\n  uniform sampler2D gpgpu_states;\n#else\n  uniform sampler2D gpgpu_states[gpgpu_stepsPast*gpgpu_textures];\n#endif\n\n/** Current step from `gl-gpgpu`; needed for `tapStates` or `tapStatesBy`. */\nuniform float gpgpu_stepNow;\n/** Further `gl-gpgpu` uniforms. */\nuniform vec4 gpgpu_stateShape;\nuniform vec2 gpgpu_viewShape;\n\nuniform float pointSize;\nuniform float dt;\nuniform vec3 lifetime;\nuniform vec2 pace;\nuniform float useVerlet;\nuniform float form;\nuniform float loop;\nuniform float shake;\n\nvarying vec4 color;\nvarying vec3 center;\nvarying float radius;\n\n#pragma glslify: aspect = require(@epok.tech/glsl-aspect/contain)\n#pragma glslify: gt = require(glsl-conditionals/when_gt)\n#pragma glslify: random = require(glsl-random)\n\n#pragma glslify: onSphere = require(./on-sphere)\n#pragma glslify: indexUV = require(../../src/lookup/index-uv)\n#pragma glslify: offsetUV = require(../../src/lookup/offset-uv)\n\n#if gpgpu_stepsPast > 1\n  // If multiple steps are given, shift into past steps.\n  // Lookups mostly equivalent; input and result iteration order differ.\n  #define indexFormsStates\n  #ifdef indexFormsStates\n    #pragma glslify: indexStates = require(../../src/index-forms/index-states)\n  #else\n    #pragma glslify: indexEntries = require(../../src/index-forms/index-entries)\n  #endif\n#endif\n\nconst vec4 noPosition = vec4(0, 0, -1, 0);\n\nvoid main() {\n  #if gpgpu_stepsPast > 1\n    // If multiple steps are given, find past step and entry.\n    // Lookups mostly equivalent; input and result iteration order differ.\n    #ifdef indexFormsStates\n      vec2 stepEntry = indexStates(index, gpgpu_stepsPast, form);\n    #else\n      vec2 stepEntry = indexEntries(index, gpgpu_entries, form);\n    #endif\n\n    float stepPast = stepEntry.s;\n    float entry = stepEntry.t;\n  #else\n    // If only 1 step is given, past step and entry are known.\n    float stepPast = 0.0;\n    float entry = index;\n  #endif\n\n  // Turn 1D index into 2D texture UV; offset to texel center, avoids errors.\n  vec2 st = offsetUV(indexUV(entry, gpgpu_stateShape.xy), gpgpu_stateShape.xy);\n\n  // Can also use the `reads` logic to take the minimum possible samples here.\n  // Sample the desired state values; creates the `gpgpu_data` `array`.\n  #if gpgpu_stepsPast > 1\n    // Shift into past steps.\n    gpgpu_tapStateBy(st, stepPast, 0)\n  #else\n    // No past steps, no shift.\n    gpgpu_tapState(st)\n  #endif\n\n  // Read values.\n  vec3 position0 = gpgpu_data[readPosition0].positionChannels;\n  vec3 position1 = gpgpu_data[readPosition1].positionChannels;\n  vec3 motion = gpgpu_data[readMotion].motionChannels;\n  float life = gpgpu_data[readLife].lifeChannels;\n  float alive = gt(life, 0.0);\n\n  vec2 ago = vec2(stepPast/max(float(gpgpu_stepsPast-1), 1.0),\n    max(stepPast-1.0, 0.0)/max(float(gpgpu_stepsPast-2), 1.0));\n\n  vec2 ar = aspect(gpgpu_viewShape);\n\n  /** Shake randomly on a sphere around older positions. */\n  vec3 position = vec3(position1.xy*ar, position1.z)+\n    (shake*pow(ago.y, 2.0)*onSphere(random(position1.xy), fract(position1.z)));\n\n  /** @todo Perspective camera transform. */\n  vec4 vertex = mix(noPosition, vec4(position, 1), alive);\n  float depth = clamp(1.0-(vertex.z/vertex.w), 0.1, 1.0);\n  float alpha = clamp(pow(life/lifetime.t, 0.3)*pow(1.0-ago.x, 0.3), 0.0, 1.0);\n  float size = pointSize*depth*alpha;\n\n  gl_Position = vertex;\n  gl_PointSize = size;\n\n  radius = size*0.5;\n\n  /**\n   * Convert vertex position to `gl_FragCoord` window-space.\n   * @see [SO](https://stackoverflow.com/a/7158573)\n   * @todo Might need the viewport `x` and `y` offset as well as `w` and `h`?\n   */\n  center = vec3(gpgpu_viewShape*((1.0+vertex.xy)/vertex.w)*0.5, vertex.z);\n\n  float speed = length(mix(motion, position1-position0, useVerlet)/dt);\n\n  color = alpha*vec4(mix(1.0, 0.2, ago.x),\n    mix(0.2, 1.0, entry/float(gpgpu_entries)),\n    clamp(pow(speed*pace.s, pace.t), 0.0, 1.0),\n    alpha);\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see {@link macros.macroPass}\n * @see {@link macros.macroValues}\n *\n * @todo Simple light shading.\n */\n\n#ifdef GL_EXT_frag_depth\n  #extension GL_EXT_frag_depth : enable\n#endif\n\nprecision highp float;\n\nvarying vec4 color;\nvarying vec3 center;\nvarying float radius;\n\nvoid main() {\n  // Fade out to transparent when the fragment is beyond the radius.\n  vec2 vc = center.xy-gl_FragCoord.xy;\n  float vcl2 = dot(vc, vc);\n  float r2 = radius*radius;\n\n  if(vcl2 > r2) { discard; }\n\n  /** @todo Ensure this is a correct distance to the sphere's surface. */\n  float d2 = vcl2/r2;\n  vec4 c = vec4(color.rgb, mix(color.a, 0.0, clamp(d2, 0.0, 1.0)));\n  // float d = sqrt(vcl2)/sqrt(r2);\n  // vec4 c = vec4(color.rgb, mix(color.a, 0.0, clamp(d, 0.0, 1.0)));\n\n  /** @todo Attenuated point lights shading. */\n  gl_FragColor = c;\n  // gl_FragColor = c*c.a;\n\n  #ifdef GL_EXT_frag_depth\n    gl_FragDepthEXT = center.z+d2;\n    // gl_FragDepthEXT = center.z+d;\n  #endif\n}\n"],"names":["$fd65c668c84a029d$exports","value","min","max","$60359228a7d3fb28$export$be3f796aed065412","diff","dt","pause","add","$60359228a7d3fb28$export$7548f4bc1b09ff22","$60359228a7d3fb28$export$85b884786400d38f","$60359228a7d3fb28$export$eb8a9b7a1ebec59a","Date","now","$60359228a7d3fb28$export$2e2bcd8739ae039","state","out","time","t0","step","n","_step","s","ref","ref1","t","t1","isNaN","$ee5851911330bf41$var$r","Array","prototype","reduce","$ee5851911330bf41$export$533b26079ad0b4b","f","a","to","undefined","call","$ee5851911330bf41$export$2e2bcd8739ae039","$6d8e5906de1cf303$export$2e2bcd8739ae039","v","i","$6f535731e26073af$var$e","forEach","$6f535731e26073af$export$2e2bcd8739ae039","fill","$5ebc876929a0439f$var$fill","isFinite","$5ebc876929a0439f$var$isFinite","Number","floor","$5ebc876929a0439f$var$floor","Math","$5ebc876929a0439f$export$2e2bcd8739ae039","l","start","end","$4ad49746d3e88695$export$2e2bcd8739ae039","$0764a650e9f35d5a$export$2e2bcd8739ae039","length","$b587055a99d7210b$export$ba60520149d1328e","$b587055a99d7210b$export$85b9a36db797e02b","$b587055a99d7210b$export$878041e1e4cd4218","flat","$699ea889147b78f1$export$dc207adda608f979","$parcel$interopDefault","$699ea889147b78f1$export$cfdc3a7c4cb854c6","$699ea889147b78f1$export$832d88422d279bbc","$699ea889147b78f1$export$ac0cd3cc21f80dfc","$699ea889147b78f1$export$4bceda1224fc5ab8","$699ea889147b78f1$export$b4781c2237bde956","$699ea889147b78f1$export$26945b8c914b7fc","$699ea889147b78f1$export$154f256b9eac9103","$699ea889147b78f1$export$b6267c3f91c57c78","$699ea889147b78f1$export$b029aceb5666f022","$699ea889147b78f1$export$617a37502ff8853","$699ea889147b78f1$export$ff01eb58fe4e69","$699ea889147b78f1$export$27fb0dad99ae5dd2","$699ea889147b78f1$export$47b10f415de592b1","$699ea889147b78f1$export$1fb689c67b965bff","$699ea889147b78f1$export$8d7f4a48e1f2b2a","$699ea889147b78f1$export$a211ab2c8ecded9a","$699ea889147b78f1$export$a1b7c201e9365814","$699ea889147b78f1$export$d5373eb478d25864","$699ea889147b78f1$export$5544d416ac8224f1","$699ea889147b78f1$export$2902d6d00b7c2bce","$699ea889147b78f1$export$2fcc13103217f9a3","color","depth","stencil","$699ea889147b78f1$export$78f9fb74e68ed5c6","$699ea889147b78f1$export$72e520e6a70b780c","copy","$65ce5154e50f483f$var$_cache","$65ce5154e50f483f$var$_step","$65ce5154e50f483f$var$_reads","$65ce5154e50f483f$var$_pass","$65ce5154e50f483f$var$_ref","$65ce5154e50f483f$var$_value","isInteger","$65ce5154e50f483f$var$isInteger","$65ce5154e50f483f$export$5ca26c99531348ec","channelsMax","console","error","$65ce5154e50f483f$export$9d1d9285bd6d8c57","values","_","channels","packed","fitIndex","fitSize","Infinity","fit","pack","$65ce5154e50f483f$export$574963e692b662ec","maps","derives","passes","textures","valueToTexture","reads","cache","all","getAddSample","pass","set","derive","d","texture","findIndex","push","samples","p","valueDerives","getAddSamples","$65ce5154e50f483f$export$798cdecdcbbf9755","buffersMax","valueToPass","textureToPass","getValue","getIndex","index","$65ce5154e50f483f$export$96707a1f51900f3d","$cf3851181e517041$var$isFinite","$cf3851181e517041$var$isInteger","$cf3851181e517041$export$3c49c185de0c2bfc","width","w","x","shape","size","side","v0","ref2","ref3","ref4","ref5","$cf3851181e517041$export$c08559766941f856","height","h","y","v1","$cf3851181e517041$var$ref","$cf3851181e517041$var$ref1","$cf3851181e517041$var$ref2","$cf3851181e517041$export$87ed20f81f3c66ff","entries","$cf3851181e517041$export$2815acae70277c92","$cf3851181e517041$export$f99427edb65f5558","scale","$7d42eff872c88882$var$_textures","$7d42eff872c88882$var$_step","$7d42eff872c88882$var$_passes","$7d42eff872c88882$var$_step1","$7d42eff872c88882$var$isInteger","$7d42eff872c88882$export$24a6b176bdc41ce5","framebuffer","steps","merge","type","mag","wrap","scaled","channelsMin","texturesMap","passChannels","sum","mergeChannels","_length","framebuffers","colors","colorPool","addTexture","c","entry","map","addPass","mScaled","mw","ref6","ref7","mh","_all","_next","next","$b32a66f4c5b7b75f$export$abee0037e1db715","z","$5bf334de58f5e290$var$_state","$5bf334de58f5e290$export$1aad3af825e3305b","$5bf334de58f5e290$var$_uniforms","uniforms","pre","bound","stepsL","texturesL","stateShape","viewShape","stepNow","m","drawingBufferWidth","drawingBufferHeight","addTextures","ago","b","ts","pl","$7b02a589e8d7c18a$var$start","$7b02a589e8d7c18a$var$end","split","$7b02a589e8d7c18a$export$bf9fb029d174d554","toString","slice","$8b3b066d03fa4cc4$var$_cache","$8b3b066d03fa4cc4$var$_ref","$8b3b066d03fa4cc4$var$lf","$8b3b066d03fa4cc4$export$4e46ac54fc82cf3b","$8b3b066d03fa4cc4$export$497faa7f0daf9da","$8b3b066d03fa4cc4$var$id","JSON","stringify","$8b3b066d03fa4cc4$export$11949c6f5fba7dcd","$8b3b066d03fa4cc4$export$feaf5ffc92c2af94","key","on","macros","Object","$8b3b066d03fa4cc4$var$ref","$8b3b066d03fa4cc4$export$83d01c7b88bc16d5","name","qualify","init","join","$8b3b066d03fa4cc4$export$45db4de6da38aa8d","$8b3b066d03fa4cc4$export$3df19e70a88cb8cd","$8b3b066d03fa4cc4$export$1c7039c93eddfba","$8b3b066d03fa4cc4$export$c346962e7dd3191","glsl","trim","$8b3b066d03fa4cc4$var$ref1","$8b3b066d03fa4cc4$export$d38b14fb9031108e","passesL","$8b3b066d03fa4cc4$export$84186522bf5a7d4d","passNow","$8b3b066d03fa4cc4$export$49873e279ff642c0","passSamples","passReads","$8b3b066d03fa4cc4$export$9cb6037fa2a40c2e","glsl3","tap","by","aka","akaBy","st","tapsSamples","$8b3b066d03fa4cc4$export$562ddd36066ad650","$1a374edfd27fba4d$var$_verts","$1a374edfd27fba4d$var$_p","$1a374edfd27fba4d$var$_frags","$1a374edfd27fba4d$var$_p1","$1a374edfd27fba4d$var$_ref","$1a374edfd27fba4d$export$d86e3abd7686c23f","ps","$1a374edfd27fba4d$export$12661000d11a17d2","copyFrame","cf","copyImage","ci","subimage","Function","sl","use","$1a374edfd27fba4d$export$d89197afac86b993","api","buffer","clear","command","pipeline","verts","frag","frags","attributes","vert","replaceAll","count","positions","vs","fs","enable","_update","update","onPass","onStep","stepMax","clearPass","mergeUpdate","stepProps","passProps","$48449d871f87e3df$var$_maps","$48449d871f87e3df$var$_to","$48449d871f87e3df$var$_to1","$48449d871f87e3df$var$isFinite","$48449d871f87e3df$var$ref","$48449d871f87e3df$export$2e2bcd8739ae039","_limits","maxDrawbuffers","apiGLSL","limits","version","parseFloat","match","_buffersMax","_maps1","_uniforms","$7be1562a8ac0a4e2$export$2e2bcd8739ae039","states","form","self","gpgpu","macroPass","mapStep","toUniforms","getDrawIndexes","indexForms","$9a6b765804fb9ec0$var$canvas","document","querySelector","$9a6b765804fb9ec0$var$scroll","setTimeout","scrollIntoView","$9a6b765804fb9ec0$var$toggleError","e","classList","$9a6b765804fb9ec0$var$getQuery","search","location","URLSearchParams","$9a6b765804fb9ec0$var$setQuery","query","k","delete","$9a6b765804fb9ec0$var$query","$9a6b765804fb9ec0$var$fragDepth","get","$9a6b765804fb9ec0$var$extend","required","optional","$9a6b765804fb9ec0$var$pixelRatio","devicePixelRatio","$9a6b765804fb9ec0$var$regl","regl","$2a263769c476450e$exports","extensions","optionalExtensions","onDone","group","log","o","hasExtension","groupEnd","$9a6b765804fb9ec0$var$valuesMap","Map","$9a6b765804fb9ec0$var$values","$9a6b765804fb9ec0$var$valuesIndex","maxTextureUnits","$9a6b765804fb9ec0$var$maxTextureUnits","maxTextureSize","$9a6b765804fb9ec0$var$maxTextureSize","lineWidthDims","$9a6b765804fb9ec0$var$lineWidthDims","pointSizeDims","$9a6b765804fb9ec0$var$pointSizeDims","$9a6b765804fb9ec0$var$useMerge","$9a6b765804fb9ec0$var$merge","$9a6b765804fb9ec0$var$limits","log2","$9a6b765804fb9ec0$var$niceScale","$9a6b765804fb9ec0$var$scale","$9a6b765804fb9ec0$var$steps","$9a6b765804fb9ec0$var$stepsPast","$9a6b765804fb9ec0$var$canVerlet","$9a6b765804fb9ec0$var$form","$9a6b765804fb9ec0$var$wide","$9a6b765804fb9ec0$var$shake","$9a6b765804fb9ec0$var$hasTimestep","has","$9a6b765804fb9ec0$var$timestep","href","$9a6b765804fb9ec0$var$derives","position","motion","life","$9a6b765804fb9ec0$var$state","every","macroVert","props","timer","rate","r","dt0","dts","dt1","loop","sin","PI","lifetime","prop","useVerlet","epsilon","moveCap","source","sink","g","spout","ss","u","invert","$9a6b765804fb9ec0$var$drawBound","$9a6b765804fb9ec0$var$drawSteps","$9a6b765804fb9ec0$var$useLines","$9a6b765804fb9ec0$var$drawCounts","$9a6b765804fb9ec0$var$viewScale","$9a6b765804fb9ec0$var$drawState","output","drawProps","counts","primitive","primitives","pace","texturesMax","$9a6b765804fb9ec0$var$drawPipeline","shake","dp","pointSize","wide","lineWidth","cs","blend","func","src","dst","drawState","drawPipeline","$9a6b765804fb9ec0$var$draw","$9a6b765804fb9ec0$var$clearView","$9a6b765804fb9ec0$var$stopEvent","stopPropagation","preventDefault","$9a6b765804fb9ec0$var$hold","$9a6b765804fb9ec0$var$resize","innerWidth","innerHeight","frame","$9a6b765804fb9ec0$var$stepTime","addEventListener","spawned","held","button","clientX","clientY","pointerType","isPrimary","left","top","getBoundingClientRect","touch"],"version":3,"file":"index.e05ff479.js.map"}