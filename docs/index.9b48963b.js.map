{"mappings":"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","sources":["demo/particles/index.js","node_modules/clamp/index.js","node_modules/@epok.tech/fn-time/dist/es/index.js","node_modules/@epok.tech/fn-lists/reduce.js","node_modules/@epok.tech/fn-lists/map.js","index.js","maps.js","node_modules/@epok.tech/fn-lists/each.js","const.js","node_modules/@epok.tech/gl-screen-triangle/index.js","node_modules/@epok.tech/gl-screen-triangle/index.vert.glsl","state.js","node_modules/@epok.tech/fn-lists/range.js","step.js","node_modules/@epok.tech/fn-lists/wrap-index.js","macros.js","node_modules/@epok.tech/is-type/type.js","inputs.js","node_modules/@thi.ng/vectors/setc.js","index-pairs/index.js","node_modules/@epok.tech/gl-screen-triangle/uv-texture.vert.glsl","demo/particles/step.frag.glsl","demo/particles/draw.vert.glsl","demo/particles/draw.frag.glsl"],"sourcesContent":["/**\n * Demo implementation of 3D particle Verlet/Euler integration simulation.\n */\n\nimport getRegl from 'regl';\nimport clamp from 'clamp';\nimport timer from '@epok.tech/fn-time';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\n\nimport { gpgpu, extensionsFloat, optionalExtensions } from '../../index';\nimport { macroValues } from '../../macros';\nimport { getUniforms, countDrawIndexes, getDrawIndexes } from '../../inputs';\nimport indexPairs from '../../index-pairs';\n\nimport stepVert from '@epok.tech/gl-screen-triangle/uv-texture.vert.glsl';\n\nimport stepFrag from './step.frag.glsl';\n\nimport drawVert from './draw.vert.glsl';\nimport drawFrag from './draw.frag.glsl';\n\nconst reglProps = {\n    pixelRatio: Math.max(Math.floor(devicePixelRatio), 1.5),\n    extensions: extensionsFloat(), optionalExtensions: optionalExtensions()\n};\n\nconst regl = self.regl = getRegl(reglProps);\n\nconsole.log('extensions',\n    reduce((o, e) => o+((o)? '; ' : '')+e+': '+regl.hasExtension(e),\n        reglProps.extensions, ''));\n\nconsole.log('optionalExtensions',\n    reduce((o, e) => o+((o)? '; ' : '')+e+': '+regl.hasExtension(e),\n        reglProps.optionalExtensions, ''));\n\nconst canvas = document.querySelector('canvas');\n\ncanvas.classList.add('view');\n\n// How many frame-buffers are bound at a given time.\nconst bound = 1;\n\n// How many values/channels each property independently tracks.\n\nconst valuesMap = (new Map())\n    .set('position', 3).set('life', 1).set('acceleration', 3);\n\nconst values = [...valuesMap.values()];\n\n// Limits of this device and these `values`.\nconst { maxTextureUnits, maxTextureSize } = regl.limits;\n\nconst limits = {\n    steps: [\n        1+bound,\n        Math.floor(maxTextureUnits*4/reduce((s, v) => s+v, values, 0))\n    ],\n    // Better stay farther under maximum texture size, or errors/crashes.\n    scale: [1, Math.log2(maxTextureSize)]\n};\n\nconsole.log('limits', limits, regl.limits);\n\n// Handle query parameters.\nconst query = new URLSearchParams(location.search);\n\n// 1 active state, as many others as can be bound; at least 2 past states needed\n// for Verlet integration, 1 for Euler integration.\nconst steps = Math.floor(clamp((parseInt(query.get('steps'), 10) || 2+bound),\n    ...limits.steps));\n\nconst stepsPast = steps-bound;\n\nconst scale = Math.floor(clamp((parseInt(query.get('scale'), 10) || 8),\n    ...limits.scale));\n\n// Fixed time-step if given; otherwise uses look-behind delta-time.\nconst hasTimestep = query.has('timestep');\nconst timestepDef = 1e3/60;\n\nconst timestep = (hasTimestep &&\n    (parseFloat(query.get('timestep'), 10) || timestepDef));\n\nconsole.log(location.search+':\\n', ...([...query.entries()].flat()), '\\n',\n    'steps:', steps, 'scale:', scale, 'timestep:', timestep);\n\n// Set up the links.\n\ndocument.querySelector('#points').href = `?steps=2&scale=${\n    Math.max(limits.scale[1]-5, 9)}${\n    ((hasTimestep)? '&timestep='+query.get('timestep') : '')}#points`;\n\ndocument.querySelector('#max').href = `?steps=${Math.max(limits.steps[1]-3, 1)\n    }&scale=${Math.max(limits.scale[1]-5, 9)}${\n    ((hasTimestep)? '&timestep='+query.get('timestep') : '')}#max`;\n\n// Override `query` here for convenience - not reused later.\n((timestep)? query.delete('timestep') : query.set('timestep', timestepDef));\ndocument.querySelector('#time').href = `?${query}#time`;\n\n// How values/channels map to their derivations.\n\nconst valuesIndex = reduce((o, k, i) => { o[k] = i; return o; },\n    [...valuesMap.keys()], {});\n\nconst derives = [];\n\nderives[valuesIndex.position] = [\n    // Position, 2 steps past.\n    [Math.min(1, stepsPast-1), valuesIndex.position],\n    // Position, 1 step past.\n    valuesIndex.position,\n    valuesIndex.acceleration,\n    valuesIndex.life\n];\n\nderives[valuesIndex.life] = [\n    // Life, oldest step.\n    [Math.max(stepsPast-1, 0), valuesIndex.life],\n    // Life, 1 step past.\n    valuesIndex.life\n];\n\nderives[valuesIndex.acceleration] =\n    valuesIndex.acceleration, valuesIndex.life;\n\n// Whether to allow Verlet integration.\nconst canVerlet = (stepsPast >= 2);\n\nconst cache = { source: [] };\n\n// The main GPGPU state.\nconst state = gpgpu(regl, {\n    props: {\n        // Set up the timer.\n        timer: timer((timestep)?\n                // Fixed-step, look-ahead add-time.\n                { step: timestep }\n                // Real-time, look-behind delta-time.\n            :   { step: '-', now: () => regl.now()*1e3 }),\n        // Speed up or slow down the passage of time.\n        rate: 1,\n        // Loop time over this period to avoid instability of parts of the demo.\n        loop: 3e3,\n        // Whether to use Verlet (midpoint) or Euler (forward) integration.\n        useVerlet: canVerlet,\n        // Range of how long a particle lives before respawning.\n        lifetime: [5e2, 3e3],\n        // Acceleration due to gravity.\n        g: [0, -9.80665, 0],\n        // The position particles respawn from.\n        source: [0, 0, 0.5],\n        // To help accuracy of very small numbers, pass force as `[X, Y] = XeY`.\n        // One of these options chosen depending on integration used.\n        force: [\n            // Euler.\n            [1, -4],\n            // Verlet.\n            [1, -7]\n        ],\n        // To help with accuracy of small numbers, uniformly scale space.\n        scale: 1e-3\n    },\n    bound, steps, scale,\n    maps: { values, derives },\n    step: {\n        vert: stepVert, frag: stepFrag,\n        verts: [], frags: [],\n        uniforms: {\n            dt: (_, { props: { timer: { dt }, rate } }) => dt*rate,\n            time: (_, { props: { timer: { time }, rate } }) => time*rate,\n            loop: (_, { props: { timer: { time }, loop } }) =>\n                Math.sin(time/loop*Math.PI)*loop,\n\n            lifetime: regl.prop('props.lifetime'),\n            g: regl.prop('props.g'),\n\n            source: (_, { props: { source, scale } }) =>\n                map((v, i) => v/scale, source, cache.source),\n\n            force: (_, { props: { useVerlet: u, force: f } }) => f[+u],\n            useVerlet: (_, { props: { useVerlet: u } }) => +u\n        }\n    }\n});\n\nconsole.log(self.state = state);\n\n// Set up rendering.\n\n// Particle count - note `countDrawIndexes` here equals `state.size.count`.\n// @todo Why doesn't `state.steps.length-state.bound` seem to make a difference?\nconst drawCount = countDrawIndexes(state.size)*indexPairs(state.steps.length);\nconst drawIndexes = getDrawIndexes(drawCount);\nconst drawState = { ...state };\n\nconst drawCommand = {\n    vert: macroValues(drawState)+'\\n'+drawVert,\n    frag: drawFrag,\n    attributes: { index: drawIndexes },\n    uniforms: getUniforms(drawState, {\n        ...drawState.step.uniforms,\n        scale: regl.prop('props.scale'), pointSize: 2**3\n    }),\n    lineWidth: 1,\n    count: drawCount,\n    depth: { enable: true },\n    blend: { enable: true, func: { src: 'one', dst: 'one minus src alpha' } },\n    primitive: ((drawState.steps.length > 2)? 'lines' : 'points')\n};\n\nconsole.log((self.drawCommand = drawCommand), drawCount);\n\nconst draw = regl(drawCommand);\n\nconst clearView = { color: [0, 0, 0, 0], depth: 1 };\n\nregl.frame(() => {\n    timer(state.props.timer);\n    state.step.run();\n    drawState.stepNow = state.stepNow;\n    regl.clear(clearView);\n    draw(drawState);\n});\n\n// Toggle Verlet integration, if there are enough past steps.\ncanvas.addEventListener('click', () =>\n    console.log('useVerlet',\n        (state.props.useVerlet = (canVerlet && !state.props.useVerlet))));\n\ncanvas.addEventListener('touchmove', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n});\n\ncanvas.addEventListener((('onpointermove' in self)? 'pointermove'\n        :   (('ontouchmove' in self)? 'touchmove' : 'mousemove')),\n    (e) => {\n        const { clientX: x, clientY: y } = e;\n        const { source } = state.props;\n        const size = Math.min(innerWidth, innerHeight);\n\n        source[0] = ((((x-((innerWidth-size)*0.5))/size)*2)-1);\n        source[1] = -((((y-((innerHeight-size)*0.5))/size)*2)-1);\n\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\nmodule?.hot?.accept?.(() => location.reload());\n","module.exports = clamp\n\nfunction clamp(value, min, max) {\n  return min < max\n    ? (value < min ? min : value > max ? max : value)\n    : (value < max ? max : value > min ? min : value)\n}\n","/**\n * Simple time-stepping - frame, real-time, constant-step - via any API.\n */\n\nexport const steps = {\n    diff: '-', dt: '-', '⏳': '-',\n    pause: 0, '⏸': 0,\n    add: '+', '⏭': '+'\n};\n\nexport const stepDef = steps.diff;\nexport const startDef = 0;\nexport const nowDef = { [steps.diff]: Date.now, [steps.add]: 1e3/60 };\n\n/**\n * Sets up properties needed to track time, starts/steps time in various ways:\n * - Time-difference or time-advance stepping.\n * - Step forwards or backwards in time or pause it.\n * - Current time can be a number or function; or the object's fixed time-step.\n * - Override property, pass the result to new objects.\n *\n * @example\n *     // Initial call sets up properties.\n *     const diff0 = timer({ step: '-' }, 200);\n *     // => { step: '-', time: 200, dt: 200 };\n *     const add0 = timer({ step: 200 });\n *     // => { step: 200, time: 200, dt: 200 };\n *\n *     // Subsequent calls advance time and track difference.\n *\n *     // No time difference here.\n *     timer(diff0, 200); // => { step: '-', time: 200, dt: 0 };\n *     timer(add0, 0); // => { step: 200, time: 200, dt: 0 };\n *\n *     // Time-difference here with a change or step, into a new result target.\n *     const diff1 = timer(diff0, 300, {});\n *     // => { step: '-', time: 300, dt: 100 };\n *     const add1 = timer(add0, null, {});\n *     // => { step: 200, time: 400, dt: 200 };\n *\n *     diff1.time-diff0.time === diff1.dt; // => true;\n *     add1.time-add0.time === add1.dt; // => true;\n *\n * @param {object} state The state being tracked.\n * @param {number} [state.time=startDef] The initial time.\n * @param {string|number} [state.step=stepDef] How time advances:\n *     - Difference since last `time`: `'diff'`/`'dt'`/`'-'`/`'⏳'`.\n *     - Pause: `'pause'`/`'⏸'`, or number zero (`0`).\n *     - Add `time` step: `'add'`/`'+'`/`'⏭'`, or non-zero number (step size).\n * @param {number|function} [now] The time now (clock/frame/step/etc), or a\n *     function giving it; if not given, uses `state.step` if numeric or\n *     `nowDef[state.step]` otherwise.\n * @param {object|false} [out=state] The state to set up; modifies `state` if\n *     not given.\n *\n * @returns {object|number} The given `out` set up with its initial `time`; or\n *     if `out` is falsey, returns the relevant calculated unknown value:\n *     - The difference since last `time` for `diff` step.\n *     - The updated `time` for `add` or `pause` step.\n */\nexport function timer(state, now, out = state) {\n    // Get the initial time and step-step.\n    const { time: t0 = startDef, step = stepDef, now: n } = state;\n    // Get the step mode - from a key into `steps` or a numerical value.\n    const s = (steps[step] ?? step);\n    const diff = (s === steps.diff);\n    const t = (now ?? n ?? nowDef[s] ?? s);\n\n    // Step by `s`:\n    // - `0` or falsey to `pause`\n    // - `steps.diff` for difference since last `time`\n    // - `steps.add` or a number to add a `time` step\n    const t1 = ((!s)? t0 : ((diff)? 0 : t0)+((isNaN(t))? t() : t));\n    const dt = t1-t0;\n\n    // If only returning a value, return the relevant calculated unknown.\n    if(!out) { return ((diff)? dt : t1); }\n\n    out.time = t1;\n    out.dt = dt;\n    out.step = step;\n\n    return out;\n}\n\nexport default timer;\n","const r = Array.prototype.reduce;\n\n/**\n * Reduce an array-like object.\n * Similar to native, but with iteratee-first arguments.\n * Supports the native single-argument behaviour.\n *\n * @param {function} f The iteratee function, given standard arguments, plus the\n *     `out` argument.\n * @param {array} a The list to reduce over (array or array-like object).\n * @param {*} [out] The initial accumulator, if given; otherwise, uses standard\n *     `Array.reduce` behaviour.\n *\n * @returns {*} The result of running the reducer iteratee function over all\n *     elements of the list.\n */\nexport const reduce = (f, a, out) =>\n    // Needs separate `call` because native detects even `undefined` parameter.\n    ((out === undefined)? r.call(a, f) : r.call(a, f, out));\n\nexport default reduce;\n","import { reduce } from './reduce';\n\n/**\n * Map an array-like object.\n * Similar to native, but with iteratee-first arguments; and allows the object\n * into which properties will be mapped to be defined (a new array, by default),\n * avoiding always creating new arrays.\n *\n * @param {function} f The iteratee function, given standard `Array.map`\n *     arguments, plus the output object.\n * @param {array} a The list to map over (array or array-like object).\n * @param {*} [out=[]] The initial accumulator, if given; `a` if falsey given;\n *     or a new array if not given.\n *\n * @returns {*} The result of mapping `out` through the iteratee function over\n *     the `a` list.\n */\nexport const map = (f, a, out = []) => reduce((out, v, i) => {\n        out[i] = f(v, i, a, out);\n\n        return out;\n    },\n    a, (out || a));\n\nexport default map;\n","/**\n * GPGPU state-stepping: maps minimal draw passes, shaders, GL resources,\n * inputs, outputs. BYORenderer.\n *\n * Rendering approach/engine specific, decoupled from the physics code.\n * The modules and many hooks may be used as given, or piecemeal, or overridden.\n */\n\nimport { mapGroups, mapSamples } from './maps';\nimport { getState } from './state';\nimport { getStep } from './step';\n\nexport * from './const';\n\n/**\n * Sets up all the maps, inputs, resources, etc for a GPGPU process.\n *\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [mapSamples]{@link ./maps.js#mapSamples}\n * @see [getState]{@link ./step.js#getState}\n * @see [getUniforms]{@link ./step.js#getUniforms}\n * @see [getStep]{@link ./step.js#getStep}\n * @see [macroPass]{@link ./macros.js#macroPass}\n *\n * @param {object} api An API for GL resources. See `getState` and `getStep`.\n * @param {object} [api.limits=api] A map of GL resource limits.\n * @param {number} [api.limits.maxDrawbuffers] The maximum number of GL textures\n *     a framebuffer can bind in a single draw call.\n * @param {object} [state={}] State properties to set up; a new object by\n *     default. See `getState`, `getUniforms`, and `getStep`.\n * @param {object} [state.maps] How values are grouped per-texture per-pass\n *     per-step. Sets up new maps if not given or missing its mapped properties.\n *     See `mapGroups`.\n * @param {number} [state.maps.texturesMax=api.limits.maxDrawbuffers] The\n *     maximum number of textures to use per draw pass. Uses more passes above\n *     this limit.\n * @param {object} [to=state] The state object to set up. Modifies the given\n *     `state` object by default.\n */\nexport function gpgpu(api, state = {}, to = state) {\n    const { maxDrawbuffers: texturesMax, glsl } = (api.limits ?? api);\n    const { maps = {} } = state;\n\n    to.glsl = parseFloat(glsl.match(/[0-9\\.]+/)[0]);\n\n    maps.texturesMax ??= texturesMax;\n    maps.textures ?? maps.passes ?? mapGroups(maps);\n    maps.derives && (maps.samples ?? mapSamples(maps));\n    to.maps = maps;\n\n    getState(api, state, to);\n    to.step = getStep(api, state);\n\n    return to;\n}\n\nexport default gpgpu;\n","/**\n * GPGPU mappings for step/draw shaders input/output.\n *\n * These maps show shaders how to make use of a system's supported features, how\n * to pack/unpack their data with framebuffers/textures, perform only the needed\n * texture samples to retrieve any past values they must derive from, etc.\n * Shaders may declare values they output, values they derive from, groupings of\n * in/dependent values - without handling how these concerns map to the\n * particular system resources they're using.\n * System limits/features/extensions are accounted for, to produce the most\n * efficient mappings available with the least I/O when it comes to drawing\n * (draw passes, texture samples, etc).\n *\n * @todo Check `packValues` optional and/or based on the given `derives` work.\n * @todo Check examples are correct.\n */\n\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport each from '@epok.tech/fn-lists/each';\n\nimport { valuesDef, channelsMaxDef, texturesMaxDef } from './const';\n\nexport const cache = { packed: [] };\n\nexport const validValue = (value, channelsMax = channelsMaxDef) =>\n    (((1 <= value) && (value <= channelsMax)) ||\n        !!console.error(`\\`gl-gpgpu\\`: the given value (${value}) exceeds the `+\n            `range of channels available (1 to ${channelsMax}).`,\n            value, channelsMax));\n\n/**\n * Minimise resource usage, order `values` to pack into blocks of `channelsMax`.\n *\n * @see mapGroups\n *\n * @param {array<number>} values Each entry is how many co-dependent channels\n *     are grouped into one texture in one pass, separate entries may be in one\n *     or more textures/passes. See `mapGroups`.\n * @param {number} [channelsMax=channelsMaxDef] The maximum number of channels\n *     per texture. See `mapGroups`.\n * @param {array} [to=[]] An array to store the result; a new array by default.\n *\n * @returns {array<number>} `to` The indexes of the given `values`, reordered\n *     to pack into the fewest buckets of `channelsMax` size or less; stored in\n *     the given `to` array.\n */\nexport function packValues(values, channelsMax = channelsMaxDef, to = []) {\n    map((_, i) => i, values, to).length = values.length;\n\n    // Counts the number of empty channels in the current group.\n    let channels = channelsMax;\n    // How many values have already been packed.\n    let packed = 0;\n    // Tracks the value that best fits the free channels (fills it tightest).\n    let fitIndex = 0;\n    let fitSize = Infinity;\n\n    for(let i = 0; packed < values.length;) {\n        const v = packed+i;\n        const value = values[to[v]];\n\n        if(!validValue(value, channelsMax)) { return to; }\n\n        // Check how value fits the channels - valid is >= 0, perfect is 0.\n        const fit = channels-value;\n\n        if((fit >= 0) && (fit < fitSize)) {\n            fitSize = fit;\n            fitIndex = v;\n        }\n\n        if((fitSize !== 0) && (v < values.length-1)) { ++i; }\n        else {\n            // Got a perfect fit or the search ended - swap in best fit value.\n            const pack = to[fitIndex];\n\n            to[fitIndex] = to[packed];\n            to[packed] = pack;\n\n            // Reduce the free channels by the best value, reset if needed.\n            (((channels -= values[pack]) > 0) || (channels = channelsMax));\n            // Start the search again over the remaining unpacked entries.\n            fitIndex = ++packed;\n            fitSize = Infinity;\n            i = 0;\n        }\n    }\n\n    return to;\n}\n\n/**\n * Groups the `values` of GPGPU data items across draw passes and data textures.\n *\n * @todo Now `values` may be packed first into buckets of `channelsMax` tightly\n *     before mapping, check whether the examples are correct.\n *\n * @example\n *     mapGroups({ values: [2, 4, 1], channelsMax: 4, texturesMax: 1 }); // =>\n *     {\n *         values: [2, 4, 1],\n *         textures: [[0], [1], [2]], // length === 3\n *         passes: [[0], [1], [2]], // length === 3\n *         texturesMax: 1,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 2],\n *         valueToPass: [0, 1, 2],\n *         textureToPass: [0, 1, 2]\n *     };\n *\n *     mapGroups({ values: [4, 2, 1], texturesMax: 1 }); // =>\n *     {\n *         values: [4, 2, 1],\n *         textures: [[0], [1, 2]], // length === 2\n *         passes: [[0], [1]], // length === 2\n *         texturesMax: 1,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 1],\n *         valueToPass: [0, 1, 1],\n *         textureToPass: [0, 1]\n *     };\n *\n *     mapGroups({ values: [4, 2, 1], texturesMax: 4 }); // =>\n *     {\n *         values: [4, 2, 1],\n *         textures: [[0], [1, 2]], // length === 2\n *         passes: [[0, 1]], // length === 1\n *         texturesMax: 4,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 1],\n *         valueToPass: [0, 0, 0],\n *         textureToPass: [0, 0]\n *     };\n *\n *     mapGroups({ values: [2, 4, 1], texturesMax: 4 }); // =>\n *     {\n *         values: [2, 4, 1],\n *         textures: [[0], [1], [2]], // length === 3\n *         passes: [[0, 1, 2]], // length === 1\n *         texturesMax: 4,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 2],\n *         valueToPass: [0, 0, 0],\n *         textureToPass: [0, 0, 0]\n *     };\n *\n *     mapGroups({ values: [2, 4, 1, 2], texturesMax: 2 }); // =>\n *     {\n *         values: [2, 4, 1, 2],\n *         textures: [[0], [1], [2, 3]], // length === 3\n *         passes: [[0, 1], [2]], // length === 2\n *         texturesMax: 2,\n *         channelsMax: 4,\n *         valueToTexture: [0, 1, 2, 2],\n *         valueToPass: [0, 0, 1, 1],\n *         textureToPass: [0, 0, 1]\n *     };\n *\n * @see packValues\n *\n * @export\n * @param {object} [maps={}] The maps. A new object if not given.\n * @param {array<number>} [maps.values=valuesDef()] An array where each number\n *     denotes how many value channels are grouped into one data texture in one\n *     draw pass; each separate number may be drawn across one or more data\n *     textures/passes. Each value denotes the number of dependent channels to\n *     be drawn together; separate values denote channels that aren't dependent,\n *     and may be drawn in the same or a separate pass, depending on device\n *     support. The given order is (currently) maintained, and may affect the\n *     number of passes/textures used. Where the next state depends on previous\n *     states, these should ideally be an entry of `channels` or less, for\n *     fewest texture reads to retrieve previous states.\n * @param {number} [maps.channelsMax=channelsMaxDef] Maximum channels per\n *     texture.\n * @param {number} [maps.texturesMax=texturesMaxDef] Maximum textures bound per\n *     pass.\n * @param {array<number>|falsey} [maps.packed] An array of indexes into `values`\n *     packed into an order that best fits into blocks of `channelsMax` to\n *     minimise resources; or `falsey` to use `values` in their given order;\n *     uses `packValues` if not given.\n * @param {object} [to=maps] An object to contain the results; modifies `maps`\n *     if not given.\n *\n * @returns {object} `to` The given `to` object; how `values` are grouped\n *     per-texture per-pass per-step, meta information, and given parameters.\n * @returns {array<array<number>>} `to.passes` Textures grouped into passes;\n *     arrays corresponding to framebuffers in separate draw passes; whose\n *     values are indexes into `to.textures`.\n * @returns {array<array<number>>} `to.textures` Values grouped into\n *     textures; arrays corresponding to framebuffer attachments, into which\n *     `values` are drawn; whose values are indexes into `to.values`.\n * @returns {array<number>} `to.values` The `values`, as given.\n * @returns {number} `to.texturesMax` The max textures per pass, as given.\n * @returns {number} `to.channelsMax` The max channels per texture, as given.\n * @returns {array<number>} `to.valueToTexture` Inverse map from each index of\n *     `to.values` to the index of the data texture containing it.\n * @returns {array<number>} `to.valueToPass` Inverse map from each index of\n *     `to.values` to the index of the pass containing it.\n * @returns {array<number>} `to.textureToPass` Inverse map from each index of\n *     `to.textures` to the index of the pass containing it.\n */\nexport function mapGroups(maps = {}, to = maps) {\n    const {\n            values = valuesDef(),\n            channelsMax = channelsMaxDef, texturesMax = texturesMaxDef,\n            // Pack `values` into blocks of `channelsMax` to minimise resources.\n            packed = packValues(values, channelsMax, cache.packed)\n        } = maps;\n\n    to.values = values;\n    to.texturesMax = texturesMax;\n    to.channelsMax = channelsMax;\n    to.passes = [[]];\n    to.textures = [[]];\n    to.valueToTexture = [];\n    to.valueToPass = [];\n    to.textureToPass = [];\n\n    // Counts the number of channels written in a single draw pass.\n    let channels = 0;\n    // Get the value, via `packed` if valid, or directly as given in `values`.\n    const getValue = ((packed)? (v) => values[v] : (v) => v);\n\n    return reduce((to, v) => {\n            const value = getValue(v);\n\n            if(!validValue(value, channelsMax)) { return to; }\n\n            const {\n                    textures, passes, valueToTexture, valueToPass, textureToPass\n                } = to;\n\n            let p = passes.length-1;\n            let pass = passes[p];\n            let t = textures.length-1;\n            let texture = textures[t];\n\n            if((channels += value) > channelsMax) {\n                channels = value;\n                t = textures.push(texture = [])-1;\n\n                ((pass.length >= texturesMax) &&\n                    (p = passes.push(pass = [])-1));\n\n                pass.push(t);\n                textureToPass.push(p);\n            }\n            else if(pass.length === 0) {\n                pass.push(t);\n                textureToPass.push(p);\n            }\n\n            texture.push(v);\n            valueToTexture.push(t);\n            valueToPass.push(p);\n\n            return to;\n        },\n        (packed || values), to);\n}\n\n/**\n * Maps the minimal set of texture reads to derive the next state of values from\n * a past state of values they depend upon.\n *\n * @example\n *     const maps = mapGroups({\n *         values: [2, 4, 1, 2], channelsMax: 4, texturesMax: 2,\n *         // Entries per-value of derived step/value indexes, entries include:\n *         // empty, single, multiple, and defined step samples.\n *         derives: [[1, 0], , [3, [1, 0]], 2]\n *     });\n *\n *     mapSamples(maps); // =>\n *     {\n *         ...maps,\n *         // Per-pass, minimum texture samples for values.\n *         samples: [\n *             // Per-value - step/texture index pairs into `maps.textures`.\n *             [[0, 1], [0, 0]],\n *             [[0, 2], [1, 0]]\n *         ],\n *         // Per-pass, value indexes to texture samples.\n *         reads: [\n *             // Per-value - indexes into `to.samples`.\n *             [[0, 1], , , ],\n *             [, , [0, 1], [0]]\n *         ]\n *     };\n *\n * @see mapGroups\n *\n * @export\n * @param {object} maps How values are grouped per-texture per-pass per-step.\n *     See `mapGroups`.\n * @param {array<null,number,array<number,array<number>>>} [maps.derives] How\n *     values derive from others. For each value index, index/es of any past\n *     values it derives from - a value not derived from past values may have an\n *     empty/null entry; a value derives from past values where its entry has:\n *     - Numbers; deriving from the most recent state at the given value index.\n *     - Lists of numbers; deriving from the given past state index (1st number\n *         denotes how many states ago), at the given value index (2nd number).\n *     If not given, no samples are mapped and `to` is returned unchanged.\n * @param {array<array<number>>} maps.passes Textures grouped into passes. See\n *     `mapGroups`.\n * @param {array<array<number>>} maps.textures Values grouped into textures. See\n *     `mapGroups`.\n * @param {array<number>} maps.valueToTexture Inverse map from each value index\n *     to the data texture index containing it.\n * @param {object} [to=maps] The object to store the result in; `maps` if not\n *     given.\n *\n * @returns {object} `to` The given `to` object, with resulting maps added if\n *     `maps.derives` were provided.\n * @returns {array<array<array<number>>>} `[to.samples]` Map of the minimum\n *     set of indexes into `maps.textures` that need to be sampled per-pass,\n *     to get all `derives` needed for each value of `maps.values` of each\n *     pass of `maps.passes`.\n * @returns {array<array<null,array<number>>>} `[to.reads]` Sparse map from\n *     each value of `derives` to its step and texture indexes in `to.samples`.\n * @returns {array<null,array<number,array<number>>>} `[to.derives]` How\n *     values are derived, as given.\n */\nexport function mapSamples(maps, to = maps) {\n    const { derives, passes, textures, valueToTexture } = maps;\n\n    if(!derives) { return to; }\n\n    to.derives = derives;\n\n    const reads = to.reads = [];\n\n    const getAddSample = (set, pass, value) => (derive, d) => {\n        const sample = ((Number.isFinite(derive))? [0, valueToTexture[derive]]\n            :   [derive[0], valueToTexture[derive[1]]]);\n\n        if(!sample.every(Number.isFinite)) {\n            return console.error('`mapSamples`: invalid map for sample',\n                derives, maps, pass, value, derive, d, sample);\n        }\n\n        const [step, texture] = sample;\n        let i = set.findIndex(([s, t]) => (s === step) && (t === texture));\n\n        ((i < 0) && (i = set.push(sample)-1));\n\n        const passReads = reads[pass] ??= [];\n        const valueReads = passReads[value] ??= [];\n\n        valueReads[d] = i;\n    };\n\n    const getAddSamples = (pass) => (set, value) => {\n        const valueDerives = derives[value];\n\n        ((valueDerives || (valueDerives === 0)) &&\n            ((Number.isFinite(valueDerives))?\n                getAddSample(set, pass, value)(valueDerives)\n            :   each(getAddSample(set, pass, value), valueDerives)));\n\n        return set;\n    }\n\n    to.samples = map((pass, p) => reduce((set, texture) =>\n                reduce(getAddSamples(p), textures[texture], set),\n            pass, []),\n        passes, []);\n\n    return to;\n}\n\nexport default mapGroups;\n","const e = Array.prototype.forEach;\n\n/**\n * Iterates a function over every element of a list, returning the list.\n *\n * @param {function} f The iteratee function.\n * @param {array} a A list to iterate over (array or array-like object).\n *\n * @returns {array} The given list.\n */\nexport const each = (f, a) => {\n    e.call(a, f);\n\n    return a;\n}\n\nexport default each;\n","/**\n * GPGPU defaults and constants.\n */\n\nimport { positions } from '@epok.tech/gl-screen-triangle';\n\nexport { default as vertDef }\n    from '@epok.tech/gl-screen-triangle/index.vert.glsl';\n\n// The required and optional GL extensions for a GPGPU state.\n\nexport const extensions = () => [];\n\n// To draw to `float` buffers.\nexport const extensionsFloat = () =>\n    ['oes_texture_float', 'webgl_color_buffer_float'];\n\n// To draw to `half float` buffers.\nexport const extensionsHalfFloat = () =>\n    ['oes_texture_half_float', 'ext_color_buffer_half_float'];\n\nexport const optionalExtensions = () => ['webgl_draw_buffers'];\n\n/**\n * Default properties for GPGPU and GL capabilities and resources.\n */\n\n// Prefix namespace to avoid naming clashes.\nexport const preDef = '';\n\n// The allowable range of channels for framebuffer attachments.\n// Default avoids `RGB32F` framebuffer attachments, which errors on\n// Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1448632\nexport const channelsMinDef = 4;\nexport const channelsMaxDef = 4;\n\nexport const texturesMaxDef = 1;\nexport const boundDef = 1;\nexport const scaleDef = 10;\nexport const stepsDef = 2;\nexport const typeDef = 'float';\nexport const valuesDef = () => [channelsMaxDef];\nexport const positionsDef = () => [...positions];\n","/**\n * The 3 vertices of a 2D triangle covering the viewport in NDC coordinates ([-1, 1]).\n *\n * @export\n * @type {array.<array.<number>>}\n */\nexport const vertices = [[-1, -1], [-1, 4], [4, -1]];\n\nexport const count = vertices.length;\nexport const dim = 2;\n\n/**\n * The flat array of the above triangle, to be bound as a WebGL attribute buffer for\n * rendering the triangle in the vertex shader.\n * These positions will result in clipped NDC coordinates ([-1, 1]) over the\n * viewport's width and height.\n *\n * @export\n * @type {array.<number>}\n */\nexport const positions = vertices.flat();\n\nexport default positions;\n","precision highp float;\n\nattribute vec2 position;\n\nvoid main() {\n    gl_Position = vec4(position, 0, 1);\n}\n","/**\n * GPGPU state and GL resources.\n *\n * @todo In-place updates of complex resources and meta info.\n * @todo Use transform feedback instead of data textures, if supported (WebGL2)?\n * @todo Consider class/object/data/function structure further.\n */\n\nimport range from '@epok.tech/fn-lists/range';\nimport map from '@epok.tech/fn-lists/map';\nimport reduce from '@epok.tech/fn-lists/reduce';\n\nimport { scaleDef, stepsDef, valuesDef, channelsMinDef, typeDef }\n    from './const';\n\n/**\n * Set up the GPGPU resources and meta information for a state of a number data.\n *\n * @todo Transform feedback.\n * @todo Validate, check examples.\n * @todo Reorder the given `values` into the most efficient `maps`?\n *\n * @example\n *     const state = {\n *         steps: 2, maps: mapGroups({ values: [4, 2, 3], texturesMax: 4 })\n *     };\n *\n *     getState(api, state); // =>\n *     {\n *         ...state, passNow: -1, stepNow: -1,\n *         size: {\n *             type: 'float', steps: 2, passes: 2, textures: 6,\n *             width: 1024, height: 1024, shape: [1024, 1024], count: 1048576\n *         },\n *         steps: [[api.framebuffer], [api.framebuffer]],\n *         passes: [\n *             [\n *                 {\n *                     step: 0, index: 0, count: 0, map: [0, 1, 2],\n *                     framebuffer: api.framebuffer,\n *                     textures: [api.texture, api.texture, api.texture]\n *                 }\n *             ],\n *             [\n *                 {\n *                     step: 1, index: 0, count: 1, map: [0, 1, 2],\n *                     framebuffer: api.framebuffer,\n *                     textures: [api.texture, api.texture, api.texture]\n *                 }\n *             ]\n *         ],\n *         textures: [\n *             [\n *                 {\n *                     step: 0, pass: 0, index: 0, count: 0, map: [0],\n *                     texture: api.texture\n *                 },\n *                 {\n *                     step: 0, pass: 0, index: 1, count: 1, map: [1],\n *                     texture: api.texture\n *                 },\n *                 {\n *                     step: 0, pass: 0, index: 2, count: 2, map: [2],\n *                     texture: api.texture\n *                 }\n *             ],\n *             [\n *                 {\n *                     step: 1, pass: 0, index: 0, count: 3, map: [0],\n *                     texture: api.texture\n *                 },\n *                 {\n *                     step: 1, pass: 0, index: 1, count: 4, map: [1],\n *                     texture: api.texture\n *                 },\n *                 {\n *                     step: 1, pass: 0, index: 2, count: 5, map: [2],\n *                     texture: api.texture\n *                 }\n *             ]\n *         ]\n *     };\n *\n *     Object.assign(state, {\n *         type: 'uint8', stepNow: 2,\n *         maps: mapGroups({ values: [4, 2, 3], texturesMax: 1 })\n *     });\n *\n *     getState(api, state); // =>\n *     {\n *        ...state, passNow: -1, stepNow: 2,\n *        size: {\n *            type: 'uint8', steps: 2, passes: 6, textures: 6,\n *            width: 1024, height: 1024, shape: [1024, 1024], count: 1048576\n *        },\n *        steps: [\n *            [api.framebuffer, api.framebuffer, api.framebuffer],\n *            [api.framebuffer, api.framebuffer, api.framebuffer]\n *        ],\n *        passes: [\n *            [\n *                {\n *                    step: 0, index: 0, count: 0, map: [0],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                },\n *                {\n *                    step: 0, index: 1, count: 1, map: [1],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                },\n *                {\n *                    step: 0, index: 2, count: 2, map: [2],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                }\n *            ],\n *            [\n *                {\n *                    step: 1, index: 0, count: 3, map: [0],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                },\n *                {\n *                    step: 1, index: 1, count: 4, map: [1],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                },\n *                {\n *                    step: 1, index: 2, count: 5, map: [2],\n *                    framebuffer: api.framebuffer, textures: [api.texture]\n *                }\n *            ]\n *        ],\n *        textures: [\n *            [\n *                {\n *                    step: 0, pass: 0, index: 0, count: 0, map: [0],\n *                    texture: api.texture\n *                },\n *                {\n *                    step: 0, pass: 1, index: 1, count: 1, map: [1],\n *                    texture: api.texture\n *                },\n *                {\n *                    step: 0, pass: 2, index: 2, count: 2, map: [2],\n *                    texture: api.texture\n *                }\n *            ],\n *            [\n *                {\n *                    step: 1, pass: 0, index: 0, count: 3, map: [0],\n *                    texture: api.texture\n *                },\n *                {\n *                    step: 1, pass: 1, index: 1, count: 4, map: [1],\n *                    texture: api.texture\n *                },\n *                {\n *                    step: 1, pass: 2, index: 2, count: 5, map: [2],\n *                    texture: api.texture\n *                }\n *            ]\n *        ]\n *    };\n *\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [mapSamples]{@link ./maps.js#mapSamples}\n * @see [getStep]{@link ./step.js#getStep}\n * @see [macroPass]{@link ./macros.js#macroPass}\n *\n * @export\n * @param {object} api The API for GL resources.\n * @param {function} api.texture A function to create a GL texture.\n * @param {function} api.framebuffer A function to create a GL framebuffer.\n * @param {object} [state={}] The state parameters.\n * @param {number} [state.radius] The length of the sides of the data textures\n *     to allocate. If given, supersedes the `state` `width`/`height`/`scale`.\n * @param {number} [state.width] The width of the data textures to allocate.\n *     If given, supersedes `state.scale`.\n * @param {number} [state.height] The height of the data textures to allocate.\n *     If given, supersedes `state.scale`.\n * @param {number} [state.scale=scaleDef] The length of the data textures sides\n *     to allocate; gives a square power-of-two texture raising 2 to this power.\n * @param {number|array} [state.steps=stepsDef] How many steps of state to\n *     track, or the list of states if already set up.\n * @param {object} [state.maps] How `state.maps.values` are grouped per-texture\n *     per-pass per-step. See `mapGroups`.\n * @param {array<number>} [state.maps.values=valuesDef()] How values of each\n *     data item may be grouped into textures across passes. Set up here if not\n *     given. See `mapGroups`.\n * @param {number} [state.maps.channelsMin=channelsMinDef] The minimum allowed\n *     channels for framebuffer attachments. Sets up unused channels as needed\n *     to reach this limit.\n * @param {number} [state.maps.textures] How values are grouped into textures.\n *     See `mapGroups`.\n * @param {string} [state.type=typeDef] The data type of the textures.\n * @param {number} [state.stepNow=-1] The currently active state step, if any.\n * @param {number} [state.passNow=-1] The currently active draw pass, if any.\n * @param {object} [to=state] The state object to set up. Modifies the given\n *     `state` object by default.\n *\n * @returns {object} `to` The state object, set up with the data resources and\n *     meta information, for step/draw later:\n * @returns {object<number,array<number,array<number>>>} `to.maps` Any given\n *     `state.maps`. See `mapGroups`.\n * @returns {array<array<object<api.texture,number,array<number>>>>}\n *     `to.textures` Textures per step, as arrays of objects of `api.texture`,\n *     and meta info. See `to.maps.textures`.\n * @returns {array<array<object<api.framebuffer,number,array<number>>>>}\n *     `to.passes` Passes per step, as arrays of objects of `api.framebuffer`,\n *     referencing `to.textures`, and meta info. See `to.maps.passes`.\n * @returns {array<api.framebuffer<array<api.texture>>>} `to.steps`\n *     Hierarchy of steps of state, as an array of `api.framebuffer` from\n *     `to.passes`, with arrays of `api.texture` from `to.textures`, and meta\n *     information; set up here, or the given `state.steps` if it was an array.\n *     State data may be drawn into the framebuffers accordingly.\n *     See `mapGroups` and `getStep`.\n * @returns {object<number,string,array<number>>} `to.size` Size/type\n *     information on data resources.\n * @returns {number} `to.stepNow` The currently active state step, as given.\n * @returns {number} `to.passNow` The currently active draw pass, as given.\n */\nexport function getState(api, state = {}, to = state) {\n    // See usage here for what the API must implement.\n    const { texture, framebuffer } = api;\n\n    const {\n            radius, width, height, scale = scaleDef, type = typeDef,\n            steps = stepsDef, stepNow = -1, passNow = -1, maps\n        } = state;\n\n    to.maps = maps;\n    to.stepNow = stepNow;\n    to.passNow = passNow;\n\n    const {\n            values = valuesDef(),\n            channelsMin = channelsMinDef, textures: texturesMap\n        } = maps;\n\n    maps.channelsMin = channelsMin;\n    maps.values = values;\n\n    const textureProps = {\n        type, min: 'nearest', mag: 'nearest', wrap: 'clamp',\n        depth: false, stencil: false,\n        // Passing `state.scale` ensures a power-of-two square texture size.\n        width: (radius ?? width ?? 2**scale),\n        height: (radius ?? height ?? 2**scale)\n    };\n\n    const { width: w, height: h } = textureProps;\n\n    // Size of the created resources.\n    const size = to.size = {\n        ...textureProps, steps: (steps.length ?? steps),\n        textures: 0, passes: 0, shape: [w, h], count: w*h\n    };\n\n    const textures = to.textures = [];\n    const passes = to.passes = [];\n\n    const addTexture = (step, pass, textureProps) => (index) =>\n        ((textures[step] ??= [])[index] = {\n            // Meta info.\n            step, pass, index, count: size.textures++, map: texturesMap[index],\n            // Resources.\n            texture: texture(textureProps)\n        })\n        .texture;\n\n    const addPass = (step) => (pass, index) => {\n        // All framebuffer color attachments need the same number of channels.\n        const passProps = {\n            ...textureProps,\n            channels: reduce((max, t) =>\n                    reduce((max, v) => Math.max(max, values[v]),\n                        texturesMap[t], max),\n                pass, channelsMin)\n        };\n\n        const textures = map(addTexture(step, index, passProps), pass);\n\n        const frame = framebuffer({\n            width: passProps.width, height: passProps.height,\n            color: textures, depth: false, stencil: false\n        });\n\n        (passes[step] ??= [])[index] = {\n            // Meta info.\n            step, index, count: size.passes++, map: pass,\n            // Resources.\n            textures, framebuffer: frame\n        };\n\n        return frame;\n    };\n\n    // Set up resources we'll need to store data per-texture per-pass per-step.\n    to.steps = map((passes, step) =>\n            // Use any given passes or create a new list of them.\n            (passes || map(addPass(step), maps.passes)),\n        // Use any given steps or create a new list of them.\n        ((Number.isFinite(steps))? range(steps) : steps), 0);\n\n    return to;\n}\n\nexport default getState;\n","/**\n * Creates an iterable array of the given length of empty entries, or\n * those given by optional arguments to `Array.fill`.\n *\n * @see Array.fill\n *\n * @param {number} n The number of elements to create.\n * @param {*} [value] A value to fill the array with; for `Array.fill`.\n * @param {number} [start=0] Start index, inclusive; for `Array.fill`.\n * @param {number} [end=n] End index, exclusive; for `Array.fill`.\n *\n * @returns {array} An array of the given number of empty elements.\n */\nexport const range = (n, value, start, end) => Array(n).fill(value, start, end);\n\nexport default range;\n","/**\n * GPGPU update step.\n */\n\nimport each from '@epok.tech/fn-lists/each';\nimport { wrapGet } from '@epok.tech/fn-lists/wrap-index';\n\nimport { macroPass } from './macros';\nimport { getUniforms } from './inputs';\nimport { vertDef, positionsDef, preDef } from './const';\n\nconst scale = { vec2: 0.5 };\n\n/**\n * Creates a GPGPU update step function, for use with a GPGPU state object.\n *\n * @todo Optional transform feedback instead of GPGPU textures, where available\n *     (needs vertex draw, instead of texture draw).\n * @todo Make this fully extensible in state.\n *\n * @see [getState]{@link ./state.js#getState}\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [macroPass]{@link ./macros.js#macroPass}\n * @see [getUniforms]{@link ./inputs.js#getUniforms}\n *\n * @export\n * @param {object} api An API for GL resources.\n * @param {function} api.buffer A function to set up a GL buffer.\n * @param {function} api.command A function to call a GL draw, with all options.\n * @param {object} state The GPGPU state to use. See `getState` and `mapGroups`.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @returns {array<array<number>>} `to.passes` How textures are grouped into\n *     passes. See `mapGroups`.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n * @param {object} [state.step=to] The properties for the step GL command.\n * @param {string} [state.step.vert=vertDef] The step vertex shader GLSL; a\n *     simple flat screen shader if not given.\n * @param {string} state.step.frag The step fragment shader GLSL.\n * @param {object} [state.step.uniforms=getUniforms(state)] The step uniforms;\n *     modifies any given. See `getUniforms`.\n * @param {array|api.buffer} [state.step.positions=positionsDef()] The step\n *     position attributes; 3 points of a large flat triangle if not given.\n * @param {number} [state.step.count=state.step.positions.length*scale.vec2] The\n *     number of elements/attributes to draw.\n * @param {array} [state.step.verts] Preprocesses and caches vertex GLSL code\n *     per-pass if given, otherwise processes it just-in-time before each pass.\n * @param {array} [state.step.frags] Preprocesses and caches fragment GLSL code\n *     per-pass, otherwise processes it just-in-time before each pass.\n * @param {object} [to={}] The results object; a new object if not given.\n *\n * @returns {object} `to` The given `to` object; containing a GPGPU update\n *     step function and related properties, to be passed a GPGPU state.\n * @returns {string} `to.vert` The given/new `state.vert` vertex shader GLSL.\n * @returns {string} `to.frag` The given `state.frag` fragment shader GLSL.\n * @returns {array.string} `[to.verts]` Any cached pre-processed vertex shaders\n *     GLSL, if `state.step.verts` was given.\n * @returns {array.string} `[to.frags]` Any cached pre-processed fragment\n *     shaders GLSL, if `state.step.verts` was enabled.\n * @returns {object} `to.uniforms` The given `state.uniforms`.\n * @returns {number} `to.count` The given/new `state.count`.\n * @returns {api.buffer} `to.positions` The given/new `state.positions`; passed\n *     through `api.buffer`.\n * @returns {api.command} `to.pass` A GL command function to draw a given pass.\n * @returns {function} `to.run` The main step function, which performs all the\n *     draw pass GL commands for a given state step.\n */\nexport function getStep(api, state, to = {}) {\n    const { buffer, command = api } = api;\n    const { maps: { passes }, pre = preDef, step = to } = state;\n    let { positions = positionsDef() } = step;\n\n    const {\n            vert = vertDef, verts, frag, frags, uniforms,\n            count = positions.length*scale.vec2\n        } = step;\n\n    to.vert = vert;\n    to.frag = frag;\n    to.uniforms = getUniforms(state, uniforms);\n    to.count = count;\n    positions = to.positions = buffer(positions);\n\n    if((verts && (to.verts = verts)) || (frags && (to.frags = frags))) {\n        // Pre-process the shaders needed for all the passes.\n        const stateCache = { ...state };\n\n        each((pass, p) => {\n                stateCache.passNow = p;\n\n                const passMacros = macroPass(stateCache);\n\n                (verts && (verts[p] = passMacros+vert));\n                (frags && (frags[p] = passMacros+frag));\n            },\n            passes);\n    }\n\n    to.pass = command(to.passCommand = {\n        // Uses the full-screen vertex shader state by default.\n        vert(_, props) {\n            const { passNow: p, step } = props;\n            const { vert: v = vert, verts: vs = verts } = step;\n\n            return vs?.[p] ?? macroPass(props)+v;\n        },\n        frag(_, props) {\n            const { passNow: p, step } = props;\n            const { frag: f = frag, frags: fs = frags } = step;\n\n            return fs?.[p] ?? macroPass(props)+f;\n        },\n        attributes: {\n            [pre+'position']: (_, { step: { positions: p = positions } }) => p\n        },\n        uniforms,\n        count,\n        depth: { enable: false },\n        framebuffer: (_, { steps: ss, stepNow: s, passNow: p }) =>\n            wrapGet(s, ss)[p]\n    });\n\n    to.run = (props = state) => {\n        const { steps, step, maps: { passes } } = props;\n        const stepNow = ++props.stepNow;\n        const { pass, onPass, onStep } = step;\n\n        onStep?.(props, wrapGet(stepNow, steps));\n\n        each((passProps, p) => {\n                props.passNow = p;\n                pass(onPass?.(props, passProps) ?? props);\n            },\n            passes);\n\n        return props;\n    };\n\n    return to;\n}\n\nexport default getStep;\n","/**\n * Wraps an index within a given length, so that indexes greater than the length\n * loop back past 0, and indexes less than 0 loop backward from the length.\n * Similar to the indexing behaviour of `Array.slice`.\n *\n * @param {number} i The index to wrap.\n * @param {number} l The length to wrap the index within.\n *\n * @returns {number} The index wrapped within the length.\n */\nexport const wrapIndex = (i, l) => ((i%l)+l)%l;\n\n/**\n * Gives the entry at a wrapped index of a given list, never exceeds its bounds.\n *\n * @see wrapIndex\n *\n * @param {number} i The index to wrap.\n * @param {array} a A list to index (array or array-like object).\n * @param {number} a.length The length property of the given list.\n *\n * @returns {*} The entry at the wrapped index of the given list.\n */\nexport const wrapGet = (i, a) => a[wrapIndex(i, a.length)];\n\nexport const wrap = { index: wrapIndex, get: wrapGet };\n\nexport default wrap;\n","/**\n * GPGPU GLSL preprocessor macros for each part of the state.\n *\n * Careful defining these, as each set of different macros will result in new\n * shaders and compilations, missing the cache here and in the rendering system.\n * So, as few unique macros as possible should be created for a given set of\n * inputs, for efficiency.\n *\n * @todo Check examples are correct.\n * @todo Consider doing something better with indentation.\n */\n\nimport reduce from '@epok.tech/fn-lists/reduce';\nimport map from '@epok.tech/fn-lists/map';\nimport { type } from '@epok.tech/is-type/type';\n\nimport { preDef, boundDef } from './const';\n\nexport const rgba = 'rgba';\nexport const cache = {};\n\n// Keys for each part of the macro handling process available to hooks.\nexport const hooks = {\n    // The full set of macros.\n    macroPass: 'pass',\n    // Each part of the set of macros.\n    macroValues: 'values', macroOutput: 'output',\n    macroSamples: 'samples', macroSamplesTap: 'tap'\n};\n\n/**\n * Gives the prefix to use, to avoid namespace collisions.\n *\n * @param {object} state The state to check.\n * @param {string} [state.macros] The macros prefix; supersedes `state.pre`.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n *\n * @returns {string} The prefix string to use.\n */\nexport const getPre = ({ macros, pre = preDef }) =>\n    ((type(macros) === 'String')? macros : pre);\n\n/**\n * Generates an array declaration, as a GLSL 3 syntax string.\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @export\n * @example\n *     getGLSL3List('int', 'list', [1, 2, 3], 'const'); // =>\n *     'const int list_l = 3; '+\n *     'const int list[list_l] = int[list_l](int(1), int(2), int(3));\\n'+\n *     '#define list_i(i) list[i]\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 3 array declaration string.\n */\nexport const getGLSL3List = (type, name, a, qualify = '', init = type) =>\n    `const int ${name}_l = ${a.length}; `+\n    `${(qualify && qualify+' ')+type} ${name}[${name}_l] = ${\n        init}[${name}_l](${reduce((s, v, i, { length: l }) =>\n                `${s+type}(${v.join?.(', ') ?? v})${(i < l-1)? ', ' : ''}`,\n            a, '')});\\n`+\n    `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Generates an array declaration, as a GLSL 1 syntax string.\n * Lookup and meta macros are added for consistency with other versions.\n *\n * @export\n * @example\n *     getGLSL1ListArray('vec3', 'list', [[1, 0, 0], [0, 2, 0], [0, 0, 3]]);\n *     // =>\n *     'const int list_l = 3; '+\n *     'vec3 list[list_l]; '+\n *     'list[0] = vec3(1, 0, 0); '+\n *     'list[1] = vec3(0, 2, 0); '+\n *     'list[2] = vec3(0, 0, 3);\\n'+\n *     '#define list_i(i) list[i]\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 1 array declaration string.\n */\nexport const getGLSL1ListArray = (type, name, a, qualify = '', init = type) =>\n    `const int ${name}_l = ${a.length}; ${\n    (qualify && qualify+' ')+type} ${name}[${name}_l];${\n    reduce((s, v, i) => `${s} ${name}[${i}] = ${init}(${v.join?.(', ') ?? v});`,\n        a, '')}\\n`+\n    `#define ${name}_i(i) ${name}[i]\\n`;\n\n/**\n * Generates an array-like declaration, as a GLSL 1 syntax string.\n * Workaround for lack of `const` arrays in GLSL < 3.\n *\n * @export\n * @example\n *     getGLSL1ListLike('float', 'list', [1, 2, 3], 'const'); // =>\n *     'const int list_l = 3; '+\n *     'const int list_0 = float(1); '+\n *     'const int list_1 = float(2); '+\n *     'const int list_2 = float(3);\\n'+\n *     '#define list_i(i) ((i == 2)? list_2 : ((i == 1)? list_1 : list_0))\\n';\n *\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {string} [qualify=''] A GLSL qualifier, if needed.\n * @param {string} [init=type] A data-type initialiser, `type` by default.\n *\n * @returns {string} The GLSL 1 array-like declaration string.\n */\nexport const getGLSL1ListLike = (type, name, a, qualify = '', init = type) =>\n    `const int ${name}_l = ${a.length};${\n    reduce((s, v, i) =>\n            `${s} ${(qualify && qualify+' ')+type} ${name}_${i} = ${\n                init}(${v.join?.(', ') ?? v});`,\n        a, '')}\\n`+\n    // `#define ${name}_i(i) ${name}_##i`;\n    `#define ${name}_i(i) ${reduce((s, v, i) =>\n            ((i)? `((i == ${i})? ${name}_${i} : ${s})` : `${name}_${i}`),\n        a, '')}\\n`;\n\n/**\n * Creates a GLSL definition of an array, and initialises it with the given\n * values, type, and variable name.\n * The initialisation is valid GLSL 1.0 or greater syntax; but is written with\n * escaped new-lines so it may be used in a single-line - e.g: for preprocessor\n * macros.\n * For a `qualify` of `const` on any `glsl` less than `3`, falls back to using\n * non-array variables with the index appended to `name`, since `const` arrays\n * aren't supported before GLSL 3.0.\n *\n * @example\n *     getGLSLList('int', 'test', [0, 1]); // =>\n *     'const int test_l = 2; '+\n *     'int test[test_l]; '+\n *     'test[0] = int(0); '+\n *     'test[1] = int(1);\\n'+\n *     '#define test_i(i) test[i]\\n';\n *\n *     getGLSLList('ivec2', 'vecs', [[0, 1], [0, 0]], 'const', 3); // =>\n *     'const int vecs_l = 2; '+\n *     'const ivec2 vecs[vecs_l] = ivec2[vecs_l](ivec2(0, 1), ivec2(0, 0));\\n'+\n *     '#define vecs_i(i) vecs[i]\\n';\n *\n *     getGLSLList('int', 'listLike', [0, 1], 'const', 1); // =>\n *     'const int listLike_l = 2; '+\n *     'const int listLike_0 = int(0); '+\n *     'const int listLike_1 = int(1);\\n'+\n *     '#define listLike_i(i) ((i == 1)? listLike_1 : listLike_0)\\n';\n *\n * @export\n * @param {string} type The GLSL list data-type.\n * @param {string} name The name of the GLSL list variable.\n * @param {array<number,array<number>>} a The list of GLSL values.\n * @param {number} [qualify=''] A GLSL qualifier, if needed (e.g: `const`).\n * @param {number} [glsl=1] The GLSL version to target, if specified.\n * @param {string} [init] A data-type initialiser.\n *\n * @returns {string} The GLSL (1 or 3) array or array-like declaration string.\n */\nexport const getGLSLList = (type, name, a, qualify = '', glsl = 1, init) =>\n    ((glsl >= 3)? getGLSL3List\n    : ((qualify.trim() === 'const')? getGLSL1ListLike\n    :   getGLSL1ListArray))(type, name, a, qualify, init);\n\n/**\n * Whether macros should be handled in this module; or the result of handling\n * them by a given named hook.\n * Allows macros of the given key to be handled by external named hooks, to\n * replace any part of the functionality in this module.\n *\n * @example\n *     // Macros to be handled in part of this module.\n *     hasMacros({}) === false;\n *     // Macros to be handled in part of this module (with a name prefix `m`).\n *     hasMacros({ macros: 'm' }) === false;\n *     // No/empty macros created.\n *     hasMacros({ macros: false }) === '';\n *     // Macros for 'a' handled by external static hook, not this module.\n *     hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'a') === '//A\\n';\n *     // Macros for 'b' handled by external function hook, not this module.\n *     hasMacros({ macros: { a: '//A\\n', b: () => '//B\\n' } }, 'b') === '//B\\n';\n *\n * @param {object} props The properties handling macros.\n * @param {string} [key] The name for which macros should be handled.\n * @param {string|function|object|false} [macros=props.macros] Whether and\n *     how GLSL preprocessor macros should be handled:\n *     - If it's defined and falsey, no macros are handled in this module.\n *     - If it's a function, it's passed the given `props`, `key`, `macros`.\n *     - If it's an object, any value at the given `key` is entered recursively,\n *         with the given `props`, `key`, and `macros[key]`.\n *     - Otherwise, returns `false` to indicate macros should be handled here.\n *\n * @returns {string|*|false} Either the result of the macros handled elsewhere,\n *     or `false` if macros should be handled here.\n */\nexport function hasMacros(props, key, macros = props.macros) {\n    if(macros === undefined) { return false; }\n    if(!macros) { return ''; }\n\n    const t = type(macros);\n\n    return ((t === 'Function')? macros(props, key, macros)\n        : ((t === 'String')? macros\n        : (((macros instanceof Object) && (key in macros)) &&\n            hasMacros(props, key, macros[key]))));\n}\n\n/**\n * Defines the values within textures per-step, as GLSL preprocessor macros.\n * These macros define mappings from values to their textures and channels.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see getPre\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     macroValues({\n *         steps: Array(2),\n *         maps: mapGroups({ values: [4, 2, 1], texturesMax: 1 })\n *     }); // =>\n *     '#define texture_0 0\\n'+ // Value 0's texture.\n *     '#define channels_0 rgba\\n'+ // Value 0's channels.\n *     '\\n'+\n *     '#define texture_1 1\\n'+ // Value 1's texture.\n *     '#define channels_1 rg\\n'+ // Value 1's channels.\n *     '\\n'+\n *     '#define texture_2 1\\n'+ // Value 2's texture.\n *     '#define channels_2 b\\n'+ // Value 2's channels.\n *     '\\n'+\n *     // General metadata.\n *     '#define textures 2\\n'+\n *     '#define passes 2\\n'+\n *     '#define stepsPast 1\\n'+\n *     '#define steps 2\\n';\n *\n * @export\n * @param {object} state Properties used to generate the macros. See `getState`.\n * @param {string|function|object|falsey} [state.macros] How macros are handled\n *     or prefixed. See `hasMacros` and `getPre`.\n * @param {string} [state.pre] How macros are prefixed. See `getPre`.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step.\n * @param {array<number>} state.maps.values How values of each data item are\n *     grouped into textures. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures The groupings of values\n *     into textures. See `mapGroups`.\n * @param {array} state.maps.passes The passes drawn per-step. See `mapGroups`.\n * @param {array} state.steps The states drawn across frames. See `getState`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *     unavailable as inputs.\n * @param {object} [state.size] Any size information about the GL resources.\n * @param {number} [state.size.count] The number of data entries per texture\n *     (the texture's area), if given. See `getState`.\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings from\n *     values to textures/channels.\n */\nexport function macroValues(state) {\n    const key = hooks.macroValues;\n    const hook = hasMacros(state, key);\n\n    if(hook !== false) { return hook; }\n\n    const {\n            maps: { values, textures, passes: { length: passesL } },\n            steps: { length: stepsL }, bound = boundDef, size\n        } = state;\n\n    const count = size?.count;\n    const n = getPre(state);\n\n    const c = key+':'+\n        JSON.stringify({ n, bound, values, textures, stepsL, passesL, count });\n\n    return (cache[c] ??=\n        reduce((s, texture, t, _, i = 0) => reduce((s, v) => s+\n                    `#define ${n}texture_${v} ${t}\\n`+\n                    `#define ${n}channels_${v} ${\n                        rgba.slice(i, (i += values[v]))}\\n\\n`,\n                texture, s),\n            textures, '')+\n        ((count)? `#define count ${count}\\n` : '')+\n        `#define ${n}textures ${textures.length}\\n`+\n        `#define ${n}passes ${passesL}\\n`+\n        `#define ${n}stepsPast ${stepsL-bound}\\n`+\n        `#define ${n}steps ${stepsL}\\n`);\n}\n\n/**\n * Defines the outputs being drawn to per-pass, as GLSL preprocessor macros.\n * These macros define mappings from values to their outputs, if bound.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see getPre\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     const state = {\n *         passNow: 0, maps: mapGroups({ values: [4, 2, 1], texturesMax: 1 })\n *     };\n *\n *     macroOutput(state); // =>\n *     '#define passNow 0\\n'+\n *     '\\n'+\n *     '#define bound_0 0\\n'+\n *     '#define attach_0 0\\n'+\n *     '#define output_0 gl_FragData[attach_0].rgba\\n';\n *\n *     ++state.passNow;\n *\n *     macroOutput(state); // =>\n *     '#define passNow 1\\n'+\n *     '\\n'+\n *     '#define bound_1 1\\n'+\n *     '#define attach_1 0\\n'+\n *     '#define output_1 gl_FragData[attach_1].rg\\n'+\n *     '\\n'+\n *     '#define bound_2 1\\n'+\n *     '#define attach_2 0\\n'+\n *     '#define output_2 gl_FragData[attach_2].b\\n';\n *\n * @export\n * @param {object} state Properties for generating the macros. See `getState`:\n * @param {string|function|object|falsey} [state.macros] How macros are handled\n *     or prefixed. See `hasMacros` and `getPre`.\n * @param {string} [state.pre] How macros are prefixed. See `getPre`.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<number>} state.maps.values How values of each data item may be\n *     grouped into textures across passes. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures The groupings of values\n *     into textures. See `mapGroups`.\n * @param {array<array<number>>} state.maps.passes The groupings of textures\n *     into passes. See `mapGroups`.\n *\n * @returns {string} The GLSL preprocessor macros defining the bound outputs.\n */\nexport function macroOutput(state) {\n    const key = hooks.macroOutput;\n    const hook = hasMacros(state, key);\n\n    if(hook !== false) { return hook; }\n\n    const { passNow: p, maps: { values, textures, passes } } = state;\n    const n = getPre(state);\n    const pass = passes[p];\n    const c = key+':'+JSON.stringify({ n, p, values, textures, passes });\n\n    return (cache[c] ??=\n        `#define ${n}passNow ${p}\\n`+\n        reduce((s, texture, bound, _, i = 0) => reduce((s, v) => `${s}\\n`+\n                    `#define ${n}bound_${v} ${texture}\\n`+\n                    `#define ${n}attach_${v} ${bound}\\n`+\n                    `#define ${n}output_${v} gl_FragData[${n}attach_${v}].${\n                        rgba.slice(i, (i += values[v]))}\\n`,\n                textures[texture], s),\n            pass, ''));\n}\n\n/**\n * Defines the texture samples/reads per-pass, as GLSL preprocessor macros.\n * The macros define the mapping between the values and the minimum texture\n * samples for the data they derive from. They're set up as function-like macros\n * that may be called from the shader to initialise the mappings arrays with a\n * given name.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see getPre\n * @see getGLSLList\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [mapSamples]{@link ./maps.js#mapSamples}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     macroSamples({\n *         passNow: 0,\n *         maps: mapSamples(mapGroups({\n *             values: [4, 2, 1], channelsMax: 4, texturesMax: 1,\n *             derives: [[1, 0], , [3, [1, 0]]]\n *         }))\n *     }); // =>\n *     '#define useSamples '+\n *         'const int samples_l = 2; '+\n *         'const ivec2 samples_0 = ivec2(0, 1); '+\n *         'const ivec2 samples_1 = ivec2(0, 0);\\n'+\n *     '#define samples_i(i) ((i == 1)? samples_1 : samples_0)\\n'+\n *     '\\n'+\n *     '#define tapSamples(states, uv, textures) '+\n *         'const int data_l = 2; '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = texture2D(states[(0*textures)+1], uv); '+\n *         'data[1] = texture2D(states[(0*textures)+0], uv);\\n'+\n *         '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define useReads_0 '+\n *         'const int reads_0_l = 2; '+\n *         'const int reads_0_0 = int(0); '+\n *         'const int reads_0_1 = int(1);\\n'+\n *     '#define reads_0_i(i) ((i == 1)? reads_0_1 : reads_0_0)\\n';\n *\n * @param {object} state Properties used to generate the macros. See `getState`.\n * @param {string|function|object|falsey} [state.macros] How macros are handled\n *     or prefixed. See `hasMacros` and `getPre`.\n * @param {string} [state.pre] How macros are prefixed. See `getPre`.\n * @param {number} state.passNow The index of the currently active pass.\n * @param {object} state.maps  How `values` are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<array<array<number>>>} [state.maps.samples] The minimal set of\n *     texture samples to use. See `mapSamples`.\n * @param {array<array<array<number>>>} [state.maps.reads] The mappings from\n *     values to the corresponding `state.samples`. See `mapSamples`.\n * @param {number} [state.glsl=1] The GLSL language version. See `getGLSLList`.\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings for\n *     samples and reads, for each value.\n */\nexport function macroSamples(state) {\n    const key = hooks.macroSamples;\n    const hook = hasMacros(state, key);\n\n    if(hook !== false) { return hook; }\n\n    const { passNow: p, maps: { samples, reads }, glsl } = state;\n    const n = getPre(state);\n    const passSamples = samples?.[p];\n    const passReads = reads?.[p];\n    // Whether to generate GLSL preprocessor macros for the lookup logic.\n    const tap = hasMacros(state, hooks.macroSamplesTap);\n\n    const c = key+':'+\n        JSON.stringify({ n, p, passSamples, passReads, glsl, tap });\n\n    return (cache[c] ??=\n        ((!passSamples)? ''\n        :   `#define ${n}useSamples ${\n                getGLSLList('ivec2', `${n}samples`, passSamples, 'const', glsl)\n            }\\n`+\n            // The texture-sampling logic.\n            // @todo `Index expression must be constant`\n            ((tap !== false)? tap\n            :   `#define ${n}tapSamples(states, uv, textures) ${\n                    getGLSLList('vec4', `${n}data`,\n                        // 2D-to-1D indexing, as textures a flat array.\n                        map(([s, t]) =>\n                                `texture2D(states[(${s}*textures)+${t}], uv)`,\n                            passSamples),\n                        '', glsl)}\\n`))+\n        ((!passReads)? ''\n        :   reduce((s, reads, v) =>\n                    `${s}\\n#define ${n}useReads_${v} ${\n                        getGLSLList('int', `${n}reads_${v}`, reads, 'const',\n                            glsl)}`,\n                passReads, '')));\n}\n\n/**\n * Defines all GLSL preprocessor macro values, texture samples, and outputs for\n * the active pass.\n * The macros define the mapping between the active values, their textures and\n * channels, bound outputs, and other macros useful for a draw pass.\n * Caches the result if `macros` generation is enabled, to help reuse shaders.\n *\n * @see hasMacros\n * @see macroValues\n * @see macroOutput\n * @see macroSamples\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n * @see [getState]{@link ./state.js#getState}\n *\n * @example\n *     const state = {\n *         steps: Array(2), passNow: 0,\n *         maps: mapSamples(mapGroups({\n *             values: [4, 2, 3], channelsMax: 4, texturesMax: 1,\n *             derives: [[1, 0], [2, [1, 0]]]\n *         }))\n *     };\n *\n *     macroPass(state); // =>\n *     '#define texture_0 0\\n'+\n *     '#define channels_0 rgba\\n'+\n *     '\\n'+\n *     '#define texture_1 1\\n'+\n *     '#define channels_1 rg\\n'+\n *     '\\n'+\n *     '#define texture_2 2\\n'+\n *     '#define channels_2 rgb\\n'+\n *     '\\n'+\n *     '#define textures 3\\n'+\n *     '#define passes 3\\n'+\n *     '#define steps 2\\n'+\n *     '\\n'+\n *     '#define passNow 0\\n'+\n *     '\\n'+\n *     '#define bound_0 0\\n'+\n *     '#define attach_0 0\\n'+\n *     '#define output_0 gl_FragData[attach_0].rgba\\n'+\n *     '\\n'+\n *     '#define useSamples '+\n *         'const int samples_l = 2; '+\n *         'const ivec2 samples_0 = ivec2(0, 1); '+\n *         'const ivec2 samples_1 = ivec2(0, 0);\\n'+\n *     '#define samples_i(i) ((i == 1)? samples_1 : samples_0)\\n'+\n *     '\\n'+\n *     '#define tapSamples(states, uv, textures) '+\n *         'const int data_l = 2; '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = texture2D(states[(0*textures)+1], uv); '+\n *         'data[1] = texture2D(states[(0*textures)+0], uv);\\n'+\n *         '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define useReads_0 '+\n *         'const int reads_0_l = 2; '+\n *         'const int reads_0_0 = int(0); '+\n *         'const int reads_0_1 = int(1);\\n'+\n *     '#define reads_0_i(i) ((i == 1)? reads_0_1 : reads_0_0)\\n';\n *\n *     ++state.passNow;\n *     state.macros = 'draw_';\n *     state.steps.push(null);\n *     Object.assign(state.maps, mapSamples(mapGroups({\n *         values: [4, 2, 3, 1], channelsMax: 4, texturesMax: 2,\n *         derives: [[1, 0], , [2, [1, 0]]]\n *     })));\n *\n *     macroPass(state); // =>\n *     '#define draw_texture_0 0\\n'+\n *     '#define draw_channels_0 rgba\\n'+\n *     '\\n'+\n *     '#define draw_texture_1 1\\n'+\n *     '#define draw_channels_1 rg\\n'+\n *     '\\n'+\n *     '#define draw_texture_2 2\\n'+\n *     '#define draw_channels_2 rgb\\n'+\n *     '\\n'+\n *     '#define draw_texture_3 2\\n'+\n *     '#define draw_channels_3 a\\n'+\n *     '\\n'+\n *     '#define draw_textures 3\\n'+\n *     '#define draw_passes 2\\n'+\n *     '#define draw_steps 3\\n'+\n *     '\\n'+\n *     '#define draw_passNow 1\\n'+\n *     '\\n'+\n *     '#define draw_bound_2 2\\n'+\n *     '#define draw_attach_2 0\\n'+\n *     '#define draw_output_2 gl_FragData[draw_attach_2].rgb\\n'+\n *     '\\n'+\n *     '#define draw_bound_3 2\\n'+\n *     '#define draw_attach_3 0\\n'+\n *     '#define draw_output_3 gl_FragData[draw_attach_3].a\\n'+\n *     '\\n'+\n *     '#define draw_useSamples '+\n *         'const ivec2 draw_samples_0 = ivec2(0, 2); '+\n *         'const ivec2 draw_samples_1 = ivec2(1, 0); '+\n *         'const int draw_samples_l = 2;\\n'+\n *     '#define draw_samples_i(i) '+\n *         '((i == 1)? draw_samples_1 : draw_samples_0)\\n'+\n *     '\\n'+\n *     '#define draw_tapSamples(states, uv, textures) '+\n *         'const int data_l = 2; '+\n *         'vec4 data[data_l]; '+\n *         'data[0] = texture2D(states[(0*textures)+2], uv); '+\n *         'data[1] = texture2D(states[(1*textures)+0], uv);\\n'+\n *         '#define data_i(i) data[i]\\n'+\n *     '\\n'+\n *     '#define draw_useReads_2 '+\n *         'const int draw_reads_2_l = 2; '+\n *         'const int draw_reads_2_0 = int(0); '+\n *         'const int draw_reads_2_1 = int(1);\\n'+\n *     '#define draw_reads_2_i(i) '+\n *         '((i == 1)? draw_reads_2_1 : draw_reads_2_0)\\n';\n *\n * @export\n * @param {object} state Properties for generating the macros. See `getState`\n *     and `mapGroups`.\n *\n * @returns {string} The GLSL preprocessor macros defining the mappings for\n *     values, textures, channels, bound outputs of the active pass, etc. See\n *     `macroValues`, `macroOutput`, and `macroSamples`.\n */\nexport function macroPass(state) {\n    const key = hooks.macroPass;\n    const hook = hasMacros(state, key);\n\n    return ((hook !== false)? hook\n        :   macroValues(state)+'\\n'+macroOutput(state)+'\\n'+\n                macroSamples(state)+'\\n');\n}\n\nexport default macroPass;\n","const [{ length: start}, { length: end }] = '[object {type}]'.split('{type}');\n\n/**\n * Gives the type of a given input.\n *\n * @see https://stackoverflow.com/a/17772086/716898\n *\n * @param {*} x Any input to test.\n *\n * @returns {string} The type of `x`.\n */\nexport const type = (x) => toString.call(x).slice(start, -end);\n\nexport default type;\n","/**\n * GPGPU inputs (uniforms, attributes, indexes, etc).\n */\n\nimport { setC2 } from '@thi.ng/vectors/setc';\nimport map from '@epok.tech/fn-lists/map';\nimport range from '@epok.tech/fn-lists/range';\nimport each from '@epok.tech/fn-lists/each';\nimport wrap from '@epok.tech/fn-lists/wrap-index';\n\nimport { boundDef, preDef } from './const';\n\n/**\n * Common uniform inputs for GPGPU `step` and `draw`.\n * Uniforms are defined as callback hooks pulling from given `context` and\n * `props` properties, allowing different APIs or author-defined hooks.\n *\n * @see [getState]{@link ./state.js#getState}\n * @see [mapGroups]{@link ./maps.js#mapGroups}\n *\n * @export\n * @param {object} state The GPGPU state to use. See `getState` and `mapGroups`.\n * @param {array} state.steps The steps of state. See `getState`.\n * @param {object} state.maps How values are grouped per-texture per-pass\n *     per-step. See `mapGroups`.\n * @param {array<array<number>>} state.maps.textures How values are grouped into\n *     textures. See `mapGroups`.\n * @param {number} [state.bound=boundDef] How many steps are bound as outputs,\n *     unavailable as inputs.\n * @param {string} [state.pre=preDef] The namespace prefix; `preDef` by default.\n * @param {object} [to={}] The object to contain the uniforms.\n *\n * @returns {object<function>} `to` The uniform hooks for the given `state`.\n *     Each is a function taking 2 arguments: a `context` object of general\n *     or global properties, and a `props` object of local properties (such as\n *     the given `state`).\n */\nexport function getUniforms(state, to = {}) {\n    const {\n            steps: { length: stepsL }, maps: { textures: textureMap },\n            bound = boundDef, pre: n = preDef\n        } = state;\n\n    const texturesL = textureMap.length;\n    const cache = { viewShape: [] };\n\n    to[n+'stepNow'] = (_, { stepNow: s }) => s;\n    to[n+'dataShape'] = (_, { size: { shape: s } }) => s;\n    to[n+'viewShape'] = ({ viewportWidth: w, viewportHeight: h }) =>\n        setC2(cache.viewShape, w, h);\n\n    // Set up the past steps, as the number of steps into the past from the\n    // currently bound step ([1...(steps-1)]).\n\n    const addTexture = (past, texture) =>\n        // Hook to pull a given texture from the latest `props`.\n        to[`${n}states[${(past*texturesL)+texture}]`] =\n            (_, { stepNow: s, bound: b = bound, textures }) =>\n                wrap.get(s-b-past, textures)[texture].texture;\n\n    // Flatten all input textures, as uniforms are stored in flat arrays.\n    for(let past = 0, pl = stepsL-bound; past < pl; ++past) {\n        each((v, texture) => addTexture(past, texture), textureMap);\n    }\n\n    return to;\n}\n\n/**\n * Gives the number of indexes to draw a full state, for various parameters.\n *\n * @see [getState]{@link ./state.js#getState}\n *\n * @param {object|array<number>|number} size Size/type information of data\n *     resources, or a shape array of width and height numbers, or width if\n *     height is given as a second parameter.\n * @param {number} [size.count] The number of entries of each data-texture.\n * @param {number} [size[0]] The width of each data-texture.\n * @param {number} [size[1]] The height of each data-texture.\n * @param {number} [size.width] The width of each data-texture.\n * @param {number} [size.height] The height of each data-texture.\n * @param {number} [size.x] The width of each data-texture.\n * @param {number} [size.y] The height of each data-texture.\n * @param {number} [size.shape] The shape of each data-texture.\n * @param {number} [size.shape[0]] The width of each data-texture.\n * @param {number} [size.shape[1]] The height of each data-texture.\n *\n * @param {number} [height] The height of each data-texture.\n *\n * @returns {number} The number of indexes needed to draw a full state; each\n *     entry of a data-texture (its area, equivalent to `state.size.count`).\n */\nexport const countDrawIndexes = (size, height) => (size.count ??\n    ((size[0] ?? size.width ?? size.x ?? size.shape?.[0] ?? size)*\n        (size[1] ?? size.height ?? size.y ?? size.shape?.[1] ?? height)));\n\n/**\n * Gives the array of indexes needed to draw a full state.\n *\n * @param {number|object<number>} size The number of entries in each\n *     data-texture; or an object of size/type information on data resources.\n *\n * @returns {array<number>} An array of indexes for drawing all data-texture\n *     entries.\n */\nexport const getDrawIndexes = (size) => map((v, i) => i,\n        range(Number.isInteger(size)? size : countDrawIndexes(size)), 0);\n","export const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);\nexport const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);\nexport const setC4 = (out, x, y, z, w) => (!out && (out = []),\n    (out[0] = x),\n    (out[1] = y),\n    (out[2] = z),\n    (out[3] = w),\n    out);\nexport const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),\n    (out[0] = a),\n    (out[1] = b),\n    (out[2] = c),\n    (out[3] = d),\n    (out[4] = e),\n    (out[5] = f),\n    out);\nexport const setC = (out, ...xs) => {\n    !out && (out = []);\n    for (let i = 0, n = xs.length; i < n; i++) {\n        out[i] = xs[i];\n    }\n    return out;\n};\n","/**\n * How many vertexes for pairs of line segments linking each entry's states,\n * using `gl.LINES`.\n * If fewer than 2 states are given, lines can't be drawn, assumes `gl.POINTS`.\n * Every pair of indexes is a line-segment connecting each state to its past\n * state, making one continuous line back through steps using `gl.LINES`;\n * iterating each start index and its past index.\n * Corresponds to the indexing logic in the `indexPairs` GLSL function.\n *\n * @see [readme]{@link ./readme.md}\n * @see `gl.LINES` at https://webglfundamentals.org/webgl/lessons/webgl-points-lines-triangles.html\n * @see [indexPairs]{@link ./index.glsl#indexPairs}\n *\n * @param {number} states The number of steps of state to link by pairs of line\n *     segments.\n *\n * @returns {number} The number of points needed to link all steps of state\n *     by pairs of line segments. May be multiplied with the number of entries\n *     in each step.\n */\nexport const indexPairs = (states) => Math.max(1, (states-1)*2);\n\nexport default indexPairs;\n","precision highp float;\n\nattribute vec2 position;\n\nvarying vec2 uv;\n\n// Translation for UV NDC to texture coordinates.\nconst vec2 offset = vec2(0.5);\n\nvoid main() {\n    uv = (position*0.5)+offset;\n    gl_Position = vec4(position, 0, 1);\n}\n","/**\n * The update step for a GPGPU particle simulation.\n * Requires setup with preprocessor macros - see `macroPass`.\n *\n * @see [getStep]{@link ../../step.js#getStep}\n * @see [macroPass]{@link ../../macros.js#macroPass}\n */\n\n#ifdef GL_EXT_draw_buffers\n    #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n\n// Setting up the macros and aliases.\n// Note that these `texture_i`/`channels_i`/`reads_i_j` indexes correspond to\n// the value at that index in the `values`/`derives` arrays provided to `gpgpu`;\n// they are defined here to match the arrangement in `./index.js`.\n\n#define posTexture texture_0\n#define lifeTexture texture_1\n#define accTexture texture_2\n\n#define posChannels channels_0\n#define lifeChannels channels_1\n#define accChannels channels_2\n\nuseSamples\n\n#ifdef output_0\n    #define posOutput output_0\n    useReads_0\n    #define posReadPos0 reads_0_0\n    #define posReadPos1 reads_0_1\n    #define posReadAcc reads_0_2\n    #define posReadLife reads_0_3\n#endif\n#ifdef output_1\n    #define lifeOutput output_1\n    useReads_1\n    #define lifeReadLifeOldest reads_1_0\n    #define lifeReadLife1 reads_1_1\n#endif\n#ifdef output_2\n    #define accOutput output_2\n    useReads_2\n    #define accReadAcc reads_2_0\n    #define accReadLife reads_2_1\n#endif\n\n// The main shader.\n\n// States from `gl-gpgpu`.\nuniform sampler2D states[stepsPast*textures];\nuniform vec2 dataShape;\n// Custom inputs for this demo.\nuniform float dt;\nuniform float time;\nuniform float loop;\nuniform vec2 lifetime;\nuniform vec2 force;\nuniform float useVerlet;\nuniform vec3 g;\nuniform vec3 source;\n\nvarying vec2 uv;\n\n#pragma glslify: map = require(glsl-map);\n\n#ifdef posOutput\n    #pragma glslify: verlet = require(@epok.tech/glsl-verlet);\n#endif\n\n#if defined(lifeOutput) || defined(accOutput)\n    #pragma glslify: random = require(glsl-random);\n#endif\n\n#ifdef accOutput\n    #pragma glslify: tau = require(glsl-constants/TWO_PI);\n\n    // @see https://observablehq.com/@rreusser/equally-distributing-points-on-a-sphere\n    vec3 randomOnSphere(vec2 randoms) {\n        float a = randoms[0]*tau;\n        float u = (randoms[1]*2.0)-1.0;\n\n        return vec3(sqrt(1.0-(u*u))*vec2(cos(a), sin(a)), u);\n    }\n#endif\n\n#pragma glslify: le = require(glsl-conditionals/when_le);\n\nvoid main() {\n    // Sample textures.\n    // Add pixel offset to sample from the pixel's center and avoid errors.\n    vec2 st = uv+(vec2(0.25)/dataShape);\n\n    // Creates the `data` array.\n    tapSamples(states, st, textures)\n\n    // Read values.\n\n    #ifdef posOutput\n        vec3 pos0 = data[posReadPos0].posChannels;\n    #endif\n    #if defined(lifeOutput) || defined(posOutput)\n        vec3 pos1 = data[posReadPos1].posChannels;\n    #endif\n\n    #if defined(lifeOutput) || defined(posOutput) || defined(accOutput)\n        #if defined(posOutput)\n            #define readLife posReadLife\n        #elif defined(lifeOutput)\n            #define readLife lifeReadLife\n        #elif defined(accOutput)\n            #define readLife accReadLife\n        #endif\n\n        float life = data[readLife].lifeChannels;\n        float spawn = le(life, 0.0);\n    #endif\n\n    #if defined(lifeOutput)\n        float lifeOldest = data[lifeReadLifeOldest].lifeChannels;\n    #endif\n\n    #if defined(posOutput) || defined(accOutput)\n        #if defined(posOutput)\n            #define readAcc posReadAcc\n        #elif defined(accOutput)\n            #define readAcc accReadAcc\n        #endif\n\n        vec3 acc = data[readAcc].accChannels;\n    #endif\n\n    // Output updated values.\n    #ifdef posOutput\n        // Use either Euler or Verlet integration.\n        vec3 pos = mix(pos1+(acc*dt), verlet(acc, pos0, pos1, dt), useVerlet);\n\n        posOutput = mix(pos, source, spawn);\n    #endif\n    #ifdef lifeOutput\n        life = max(0.0, life-dt);\n\n        float lifeSpawn = map(random(uv*loop),\n            0.0, 1.0, lifetime[0], lifetime[1]);\n\n        // Only spawn life once the oldest step reaches the end of its lifetime\n        // (past and current life are both 0).\n        lifeOutput = mix(life, lifeSpawn, spawn*le(lifeOldest, 0.0));\n    #endif\n    #ifdef accOutput\n        // To help accuracy of very small numbers, pass force as `[X, Y] = XeY`.\n        float f = force.x*pow(10.0, force.y);\n\n        acc += g*f*dt;\n\n        vec2 randoms = vec2(random((uv+loop)/dt), random((uv-loop)*dt));\n        vec3 accSpawn = randomOnSphere(randoms)*random(loop-(uv*dt))*f*5e3;\n\n        accOutput = mix(acc, accSpawn, spawn);\n    #endif\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see [macroPass]{@link ../../macros.js#macroPass}\n * @see [macroValues]{@link ../../macros.js#macroValues}\n */\n\n#define posTexture texture_0\n#define lifeTexture texture_1\n#define accTexture texture_2\n\n#define posChannels channels_0\n#define lifeChannels channels_1\n#define accChannels channels_2\n\nprecision highp float;\n\nattribute float index;\n\nuniform sampler2D states[stepsPast*textures];\nuniform vec2 dataShape;\nuniform vec2 viewShape;\nuniform float pointSize;\nuniform vec2 lifetime;\nuniform float scale;\n\nvarying vec4 color;\n\n#pragma glslify: aspect = require(@epok.tech/glsl-aspect/contain)\n#pragma glslify: gt = require(glsl-conditionals/when_gt)\n\n#if stepsPast > 1\n    #pragma glslify: indexPairs = require(../../index-pairs)\n#endif\n\nvoid main() {\n    #if stepsPast > 1\n        vec2 stepEntry = indexPairs(index, float(stepsPast));\n    #else\n        // If only 1 step is given, uses `gl.POINTS`.\n        vec2 stepEntry = vec2(0.0, index);\n    #endif\n\n    // Step back a full state's worth of textures per step index.\n    int stateIndex = int(stepEntry[0])*textures;\n\n    // Turn the 1D index into a 2D texture UV.\n    // Add pixel offset to sample from the pixel's center and avoid errors.\n    vec2 uv = vec2(mod(stepEntry[1]+0.25, dataShape.x)/dataShape.x,\n        (floor(stepEntry[1]/dataShape.x)+0.25)/dataShape.y);\n\n    // Sample the desired state values.\n    // @todo Make use of the `reads` logic to take the minimum possible samples.\n    float life = texture2D(states[stateIndex+lifeTexture], uv).lifeChannels;\n    vec3 pos = texture2D(states[stateIndex+posTexture], uv).posChannels;\n    float alive = gt(life, 0.0);\n    vec2 ar = aspect(viewShape);\n    vec4 vertex = vec4(vec3(pos.xy*ar, pos.z)*scale, 1.0);\n\n    gl_Position = alive*vertex;\n    gl_PointSize = alive*pointSize*clamp(1.0-(vertex.z/vertex.w), 0.1, 1.0);\n\n    float a = pow(life/lifetime[1], 0.1);\n\n    color = a*\n        vec4(stepEntry[0]/float(stepsPast), stepEntry[1]/float(count), 0.8, a);\n}\n","/**\n * Drawing a GPGPU particle simulation.\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\n *\n * @see [macroPass]{@link ../../macros.js#macroPass}\n * @see [macroValues]{@link ../../macros.js#macroValues}\n */\n\nprecision highp float;\n\nvarying vec4 color;\n\nvoid main() { gl_FragColor = color; }\n"],"names":["ref","ref1","reglProps","pixelRatio","Math","max","floor","devicePixelRatio","extensions","$gz2w5","extensionsFloat","optionalExtensions","regl","self","$parcel$interopDefault","$di2cr","console","log","$5uoMq","default","o","e","hasExtension","canvas","document","querySelector","classList","add","valuesMap","Map","set","values","maxTextureUnits","maxTextureSize","limits","steps","s","v","scale","log2","query","URLSearchParams","location","search","$dKg8J","parseInt","get","stepsPast","scale1","hasTimestep","has","timestepDef","timestep","parseFloat","entries","flat","href","delete","valuesIndex","k","i","keys","derives","position","min","acceleration","life","canVerlet","cache","state","$92xBu","gpgpu","props","timer","$3XJsI","step","now","rate","loop","useVerlet","lifetime","g","source","force","bound","maps","vert","$2qk3x","frag","$7W3SR","verts","frags","uniforms","dt","_","time","sin","PI","prop","$kHTr6","u","f","drawCount","$ijOPy","countDrawIndexes","size","$eMLc4","length","drawIndexes","getDrawIndexes","drawState","drawCommand","$7BlYt","macroValues","$2nMxP","$3q41T","attributes","index","getUniforms","pointSize","lineWidth","count","depth","enable","blend","func","src","dst","primitive","draw","clearView","color","frame","run","stepNow","clear","addEventListener","stopPropagation","preventDefault","clientX","x","clientY","y","innerWidth","innerHeight","module","hot","accept","call","reload","exports","value","$2e2a25a52591e6ab$export$be3f796aed065412","diff","pause","$2e2a25a52591e6ab$export$7548f4bc1b09ff22","$2e2a25a52591e6ab$export$85b884786400d38f","$2e2a25a52591e6ab$export$eb8a9b7a1ebec59a","Date","$2e2a25a52591e6ab$export$2e2bcd8739ae039","out","t0","n","_step","t","t1","isNaN","$3ff2f9e4ab7bdeff$var$r","Array","prototype","reduce","$3ff2f9e4ab7bdeff$export$533b26079ad0b4b","a","undefined","$3ff2f9e4ab7bdeff$export$2e2bcd8739ae039","$f132d33d57f1bee8$export$2e2bcd8739ae039","out1","_maps","$694e5df7a7173951$export$a8489f67fe30ef76","api","to","_limits","maxDrawbuffers","texturesMax","glsl","_textures","_samples","match","_texturesMax","textures","passes","$bVJ8f","mapGroups","samples","mapSamples","$j6bxN","getState","$a93za","getStep","_reads","_passReads","$8af806db8832338e$export$69a3209f1a06c04d","packed","$8af806db8832338e$export$5ca26c99531348ec","channelsMax","channelsMaxDef","error","$8af806db8832338e$export$9d1d9285bd6d8c57","channels","fitIndex","fitSize","Infinity","i1","fit","pack","$8af806db8832338e$export$96707a1f51900f3d","to1","valuesDef","texturesMaxDef","valueToTexture","valueToPass","textureToPass","getValue","p","pass","texture","push","$8af806db8832338e$export$574963e692b662ec","reads","getAddSample","derive","d","sample","Number","isFinite","every","findIndex","passReads","_pass","_value","valueDerives","$4PyNq","getAddSamples","$3846eaa2ea51626f$var$e","forEach","$3846eaa2ea51626f$export$2e2bcd8739ae039","$c0f1ddf86a2c884a$export$ac0cd3cc21f80dfc","$c0f1ddf86a2c884a$export$4bceda1224fc5ab8","$c0f1ddf86a2c884a$export$b4781c2237bde956","$c0f1ddf86a2c884a$export$26945b8c914b7fc","$c0f1ddf86a2c884a$export$154f256b9eac9103","$c0f1ddf86a2c884a$export$4d253b84ce5f5f8e","$c0f1ddf86a2c884a$export$b029aceb5666f022","$c0f1ddf86a2c884a$export$71c6d8e332d66a75","$c0f1ddf86a2c884a$export$617a37502ff8853","$c0f1ddf86a2c884a$export$27fb0dad99ae5dd2","$c0f1ddf86a2c884a$export$ff01eb58fe4e69","$c0f1ddf86a2c884a$export$cfdc3a7c4cb854c6","$c5qtL","positions","$8cca7dd78c4331af$export$ba60520149d1328e","$8cca7dd78c4331af$export$878041e1e4cd4218","_passes","$de77884057adbfa7$export$50fdfeece43146fd","framebuffer","radius","width","height","scaleDef","type","typeDef","stepsDef","passNow","channelsMin","channelsMinDef","texturesMap","textureProps1","mag","wrap","stencil","w","h","_length","shape","textures1","passes1","addPass","passProps","max1","textureProps","_step1","map","addTexture","$1Nz0O","$14f586be6fb44fe8$export$2e2bcd8739ae039","start","end","fill","$762d82d3b4f274a6$var$scale","vec2","$762d82d3b4f274a6$export$89e7bec3b8bce705","buffer","command","pre","preDef","step1","positionsDef","$aW7UW","stateCache","passMacros","macroPass","passCommand","vs","fs","ss","$jcizf","wrapGet","onPass","onStep","$df9d8a68b07f20b6$export$acb6ab09ed1b7b8b","l","$df9d8a68b07f20b6$export$ea134dcc07e79c49","$df9d8a68b07f20b6$export$2e2bcd8739ae039","_cache","_cache1","_cache2","$588d08c6cd703f4f$export$4e46ac54fc82cf3b","$588d08c6cd703f4f$export$69a3209f1a06c04d","$588d08c6cd703f4f$export$11949c6f5fba7dcd","$588d08c6cd703f4f$export$eb485f7ab2fcf311","macros","$5jmLt","ref4","$588d08c6cd703f4f$export$1c7039c93eddfba","name","qualify","init","ref3","join","$588d08c6cd703f4f$export$3df19e70a88cb8cd","ref2","$588d08c6cd703f4f$export$45db4de6da38aa8d","$588d08c6cd703f4f$export$c346962e7dd3191","trim","$588d08c6cd703f4f$export$feaf5ffc92c2af94","key","Object","$588d08c6cd703f4f$export$84186522bf5a7d4d","hook","passesL","stepsL","boundDef","c","JSON","stringify","_c","s1","slice","$588d08c6cd703f4f$export$d38b14fb9031108e","s2","$588d08c6cd703f4f$export$49873e279ff642c0","reads1","passSamples","tap","$588d08c6cd703f4f$export$9cb6037fa2a40c2e","$3de062af33d77200$var$start","$3de062af33d77200$var$end","split","$3de062af33d77200$export$bf9fb029d174d554","toString","ref5","ref6","ref7","_count","$d5616e34cd48fb78$export$4e06fab977536f8e","textureMap","texturesL","viewportWidth","viewportHeight","$lwLPF","setC2","past","b","past1","pl","$d5616e34cd48fb78$export$a495db45d4904b10","ref9","ref8","$d5616e34cd48fb78$export$87ed20f81f3c66ff","isInteger","$fac1b09e36acee4f$export$dcfbb7940cfb3a48","$ac3a28119436338f$export$2e2bcd8739ae039","states"],"version":3,"file":"index.9b48963b.js.map"}