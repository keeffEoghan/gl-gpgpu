{"version":3,"sources":["decode.js","encode.js","index.js","../node_modules/@epok.tech/fn-time/index.js","../node_modules/@epok.tech/fn-lists/wrap-index.js","../node_modules/@epok.tech/fn-lists/reduce.js","../node_modules/@epok.tech/fn-lists/map.js","../node_modules/@epok.tech/fn-lists/each.js","index.vert.glsl","const.js","maps.js","../node_modules/@epok.tech/fn-lists/range.js","../node_modules/@epok.tech/is-type/type.js","../node_modules/@epok.tech/is-type/number.js","state.js","macros.js","../node_modules/@thi.ng/vectors/setc.js","inputs.js","step.js","uv-texture.vert.glsl","step.frag.glsl","draw.vert.glsl","draw.frag.glsl"],"names":["hasOwnProperty","obj","prop","Object","prototype","call","module","exports","qs","sep","eq","options","length","regexp","split","maxKeys","len","i","x","kstr","vstr","k","v","replace","idx","indexOf","substr","decodeURIComponent","isArray","push","Array","xs","toString","stringifyPrimitive","isFinite","name","undefined","map","objectKeys","ks","encodeURIComponent","join","f","res","keys","key","decode","parse","require","encode","stringify","timer","steps","diff","pause","add","stepDef","startDef","timeDef","state","time","out","t0","step","d","t1","isNaN","dt","positions","vertices","count","dim","flat","wrap","wrapIndex","l","wrapGet","a","index","get","reduce","r","each","e","forEach","extensions","optionalExtensions","preDef","channelsMinDef","channelsMaxDef","texturesMaxDef","boundDef","scaleDef","stepsDef","typeDef","valuesDef","positionsDef","mapGroups","cache","packed","validValue","value","channelsMax","console","error","packValues","values","_","channels","fitIndex","fitSize","Infinity","fit","pack","maps","texturesMax","passes","textures","valueToTexture","valueToPass","textureToPass","getValue","p","pass","t","texture","mapSamples","derives","reads","getAddSamples","set","valueDerives","getAddSample","derive","sample","Number","isInteger","every","findIndex","s","passReads","samples","range","n","fill","type","start","end","slice","isNumber","getState","api","framebuffer","radius","width","height","scale","stepNow","passNow","channelsMin","texturesMap","textureProps","min","mag","size","shape","addTexture","addPass","passProps","max","Math","color","depthStencil","macroPass","rgba","hooks","macroValues","macroOutput","macroSamples","macroSamplesTap","getPre","macros","pre","getGLSL3List","qualify","init","getGLSL1ListArray","getGLSL1ListLike","getGLSLList","glsl","trim","hasMacros","props","hook","passesL","stepsL","bound","c","JSON","passSamples","tap","setC2","y","setC3","z","setC4","w","setC6","b","setC","getUniforms","textureMap","texturesL","viewportWidth","h","viewportHeight","past","countDrawIndexes","getDrawIndexes","getStep","vec2","buffer","command","vert","vertDef","frag","verts","frags","uniforms","stateCache","passMacros","passCommand","vs","fs","attributes","depth","enable","run","onPass","onStep","gpgpu","limits","maxDrawbuffers","parseFloat","match","indexPairs","states","regl","self","log","hasExtension","canvas","document","querySelector","query","querystring","location","search","parseInt","floor","sqrt","valuesMap","position","life","acceleration","valuesKeys","derivesMap","canVerlet","now","rate","loop","useVerlet","lifetime","g","source","force","stepVert","stepFrag","sin","PI","drawCount","drawIndexes","drawState","drawCommand","drawVert","drawFrag","pointSize","lineWidth","primitive","draw","frame","addEventListener","stopPropagation","preventDefault","clientX","clientY","innerWidth","innerHeight"],"mappings":"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","file":"demo-particles.276bf5de.js","sourceRoot":"../demo-particles","sourcesContent":[null,null,"/**\n * Test implementation of 3D particle Verlet-integration simulation.\n */\nimport getRegl from 'regl';\nimport querystring from 'querystring';\nimport timer from '@epok.tech/fn-time';\nimport { count, vertices } from '@epok.tech/gl-screen-triangle';\nimport wrap from '@epok.tech/fn-lists/wrap-index';\n\nimport { gpgpu, extensions, optionalExtensions } from '../';\nimport { macroValues } from '../macros';\nimport { getUniforms, countDrawIndexes, getDrawIndexes } from '../inputs';\nimport indexPairs from '../index-pairs';\n\nimport stepVert from '@epok.tech/gl-screen-triangle/uv-texture.vert.glsl';\n\nimport stepFrag from './step.frag.glsl';\n\nimport drawVert from './draw.vert.glsl';\nimport drawFrag from './draw.frag.glsl';\n\nconst regl = self.regl = getRegl({\n    extensions: extensions(), optionalExtensions: optionalExtensions()\n});\n\nconsole.log('extensions',\n    ...extensions().map((e) => e+': '+regl.hasExtension(e)));\n\nconsole.log('optionalExtensions',\n    ...optionalExtensions().map((e) => e+': '+regl.hasExtension(e)));\n\nconst canvas = document.querySelector('canvas');\n\nconst query = querystring.parse(document.location.search.slice(1));\nconst bound = 1;\n// 1 active state, 2 past states needed for Verlet integration, plus as many\n// others as can be bound.\nconst steps = bound+(parseInt(query.steps, 10) || 2);\nconst scale = Math.floor((parseInt(query.scale, 10) || 9)-(Math.sqrt(steps)/2));\n\n// How many values/channels each property independently tracks.\nconst valuesMap = { position: 3, life: 1, acceleration: 3 };\nconst valuesKeys = Object.keys(valuesMap);\nconst derivesMap = {\n    position: [\n        // Position, 2 steps past.\n        [Math.min(steps-1-bound, 1), valuesKeys.indexOf('position')],\n        // Position, 1 step past.\n        valuesKeys.indexOf('position'),\n        valuesKeys.indexOf('acceleration'),\n        valuesKeys.indexOf('life')\n    ],\n    life: [\n        // Life, oldest step.\n        [Math.max(0, steps-1-bound), valuesKeys.indexOf('life')],\n        // Life, 1 step past.\n        valuesKeys.indexOf('life')\n    ],\n    acceleration: [\n        valuesKeys.indexOf('acceleration'), valuesKeys.indexOf('life')\n    ]\n};\n\nconst values = Object.values(valuesMap);\nconst derives = Object.values(derivesMap);\n\nconst canVerlet = (steps, bound) => steps-bound >= 2;\n\nconst state = gpgpu(regl, {\n    props: {\n        timer: {\n            // Real-time, look-behind delta-time.\n            step: '-', time: regl.now()*1e3,\n            // Fixed-step, look-ahead add-time.\n            // step: '+', time: 0, step: 1e3/60,\n        },\n        // Speed up or slow down the passage of time.\n        rate: 1,\n        // Loop time over this period to avoid instability of parts of the demo.\n        loop: 3e3,\n        // Whether to use Verlet (midpoint) or Euler (forward) integration.\n        useVerlet: true,\n        // Range of how long a particle lives before respawning.\n        lifetime: [1e3, 2e3],\n        // Acceleration due to gravity.\n        g: [0, -9.80665, 0],\n        // The position particles respawn from.\n        source: [0, 0, 0],\n        // To help accuracy of very small numbers, pass force as `[x, y] = xey`.\n        // One of these options chosen depending on integration used.\n        force: [\n            // // Euler.\n            // [1, -7],\n            // // Verlet.\n            // [1, -10]\n            // Euler.\n            [1, -4],\n            // Verlet.\n            [1, -7]\n        ],\n        // To help with accuracy of small numbers, uniformly scale the drawing.\n        // scale: 1\n        scale: 1e-3\n    },\n    bound, steps, scale,\n    maps: { values: [...values], derives: [...derives] },\n    step: {\n        vert: stepVert, frag: stepFrag,\n        verts: [], frags: [],\n        uniforms: {\n            dt: (_, { props: { timer: { dt }, rate } }) => dt*rate,\n            time: (_, { props: { timer: { time }, rate } }) => time*rate,\n            loop: (_, { props: { timer: { time }, loop } }) =>\n                Math.sin(time/loop*Math.PI)*loop,\n            lifetime: regl.prop('props.lifetime'),\n            g: regl.prop('props.g'),\n            source: regl.prop('props.source'),\n            scale: regl.prop('props.scale'),\n            force: (_, { steps: s, bound: b, props: { useVerlet, force } }) =>\n                force[+(canVerlet(s.length, b) && useVerlet)],\n            useVerlet: (_, { steps: s, bound: b, props: { useVerlet } }) =>\n                +(canVerlet(s.length, b) && useVerlet)\n        }\n    }\n});\n\ntimer(state.props.timer, state.props.timer.time);\n\nconsole.log(self.state = state);\n\nconst drawCount = countDrawIndexes(state.size)*\n    // @todo Why does `bound` not seem to make much difference?\n    // indexPairs(state.steps.length-state.bound);\n    indexPairs(state.steps.length);\n\nconst drawIndexes = getDrawIndexes(drawCount);\nconst drawState = { ...state };\n\nconst drawCommand = {\n    vert: macroValues(drawState)+'\\n'+drawVert,\n    frag: drawFrag,\n    attributes: { index: drawIndexes },\n    uniforms: getUniforms(drawState,\n        { ...drawState.step.uniforms, pointSize: 4 }),\n    lineWidth: 1,\n    count: drawCount,\n    primitive: ((drawState.steps.length > 2)? 'lines' : 'points')\n};\n\nconsole.log((self.drawCommand = drawCommand), drawCount);\n\nconst draw = regl(drawCommand);\n\nregl.frame(() => {\n    // Real-time.\n    timer(state.props.timer, regl.now()*1e3);\n    // Fixed-step.\n    // timer(state.props.timer, state.props.timer.step);\n\n    state.step.run();\n    drawState.stepNow = state.stepNow;\n    draw(drawState);\n});\n\nself.addEventListener('click', () =>\n    console.log('useVerlet',\n        (state.props.useVerlet = (canVerlet(state.steps.length, state.bound) &&\n            !state.props.useVerlet))));\n\ncanvas.addEventListener('touchmove', (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n});\n\ncanvas.addEventListener((('onpointermove' in self)? 'pointermove'\n        : (('ontouchmove' in self)? 'touchmove' : 'mousemove')),\n    (e) => {\n        const { clientX: x, clientY: y } = e;\n        const { source, scale } = state.props;\n        const size = Math.min(innerWidth, innerHeight);\n\n        source[0] = ((((x-((innerWidth-size)*0.5))/size)*2)-1)/scale;\n        source[1] = -((((y-((innerHeight-size)*0.5))/size)*2)-1)/scale;\n\n        e.stopPropagation();\n        e.preventDefault();\n    });\n","/**\n * Simple time-stepping - frame, real-time, constant-step - via any API.\n */\n\nexport const steps = {\n    diff: -1, pause: 0, add: 1,\n    '📏': -1, '⏸': 0, add: '⏭',\n    '-1': -1, '0': 0, '1': 1,\n    '-': -1, '0': 0, '+': 1\n};\n\nexport const stepDef = steps.add;\nexport const startDef = 0;\nexport const timeDef = 1000/60;\n\n/**\n * Sets up properties needed to track time, starts/steps time in various ways.\n *\n * @example\n *     // Initial call sets up properties.\n *     const frame0 = { step: '-', time: Date.now() };\n *\n *     timer(frame0, frame0.time); // =>\n *     { ...frame0, dt: 0 };\n *\n *     // Subsequent calls advance time and track difference.\n *     const frame1 = { ...frame0 };\n *     const next = Date.now();\n *\n *     timer(frame0, next, frame1); // =>\n *     { ...frame1, dt: next-frame0.time, time: next };\n *\n * @param {object} state The state being tracked.\n * @param {number} [state.time=startDef] The initial time.\n * @param {string|number} [state.step=stepDef] How time advances:\n *     - Adding a time-step (`steps.add`/`'-'`, or a positive number).\n *     - Pausing (`steps.pause`/`'-'`, or `0`).\n *     - Diff from the latest time (`steps.diff`/`'-'`, or a negative number).\n * @param {number|function} [time=timeDef] The time (clock/frame/etc), or a\n *     function giving it; current time or time-step, according to `state.step`.\n * @param {object|false} [out=state] The state to set up; modifies `state` by\n *     default; or if falsey, returns the relevant calculated time value:\n *     - The latest time if add-stepping forwards, or paused.\n *     - The time-difference if diff-stepping from the latest time.\n *\n * @returns {object|number} The given `out` set up with its initial time; or if\n *     `out` is falsey, returns the initial time.\n */\nexport function timer(state, time = timeDef, out = state) {\n    // Get the initial time and step-step.\n    const { time: t0 = startDef, step = stepDef } = state;\n    // Get the step mode - from a key into `steps` or a numerical value.\n    const d = ((step in steps)? steps[step] : step);\n    // Step the time - '0' pauses; '+' adds a time-step; '-' sets time, to diff.\n    const t1 = ((!d)? t0 : ((d > 0)? t0 : 0)+((isNaN(time))? time() : time));\n    const dt = t1-t0;\n\n    // If only returning a value, return the unknown one as calculated:\n    // - The latest time if add-stepping forwards, or paused.\n    // - The time-difference if diff-stepping from the latest time.\n    if(!out) { return ((d >= 0)? t1 : dt); }\n\n    out.time = t1;\n    out.dt = dt;\n\n    return out;\n}\n\nexport default timer;\n","/**\n * Wraps an index within a given length, so that indexes greater than the length\n * loop back past 0, and indexes less than 0 loop backward from the length.\n * Similar to the indexing behaviour of `Array.slice`.\n *\n * @param {number} i The index to wrap.\n * @param {number} l The length to wrap the index within.\n *\n * @returns {number} The index wrapped within the length.\n */\nexport const wrapIndex = (i, l) => ((i%l)+l)%l;\n\n/**\n * Gives the entry at a wrapped index of a given list, never exceeds its bounds.\n *\n * @see wrapIndex\n *\n * @param {number} i The index to wrap.\n * @param {array} a A list to index (array or array-like object).\n * @param {number} a.length The length property of the given list.\n *\n * @returns {*} The entry at the wrapped index of the given list.\n */\nexport const wrapGet = (i, a) => a[wrapIndex(i, a.length)];\n\nexport const wrap = { index: wrapIndex, get: wrapGet };\n\nexport default wrap;\n","const r = Array.prototype.reduce;\n\n/**\n * Reduce an array-like object.\n * Similar to native, but with iteratee-first arguments.\n * Supports the native single-argument behaviour.\n *\n * @param {function} f The iteratee function, given standard arguments, plus the\n *     `out` argument.\n * @param {array} a The list to reduce over (array or array-like object).\n * @param {*} [out] The initial accumulator, if given; otherwise, uses standard\n *     `Array.reduce` behaviour.\n *\n * @returns {*} The result of running the reducer iteratee function over all\n *     elements of the list.\n */\nexport const reduce = (f, a, out) =>\n    // Needs separate `call` because native detects even `undefined` parameter.\n    ((out === undefined)? r.call(a, f) : r.call(a, f, out));\n\nexport default reduce;\n","import { reduce } from './reduce';\n\n/**\n * Map an array-like object.\n * Similar to native, but with iteratee-first arguments; and allows the object\n * into which properties will be mapped to be defined (a new array, by default),\n * avoiding always creating new arrays.\n *\n * @param {function} f The iteratee function, given standard `Array.map`\n *     arguments, plus the output object.\n * @param {array} a The list to map over (array or array-like object).\n * @param {*} [out=[]] The initial accumulator, if given; `a`, if defined and\n *     falsey.\n *\n * @returns {*} The `out` object, having been mapped through the iteratee\n *     function over the list.\n */\nexport const map = (f, a, out = []) => reduce((out, v, i) => {\n        out[i] = f(v, i, a, out);\n\n        return out;\n    },\n    a, (out || a));\n\nexport default map;\n","const e = Array.prototype.forEach;\n\n/**\n * Iterates a function over every element of a list, returning the list.\n *\n * @param {function} f The iteratee function.\n * @param {array} a A list to iterate over (array or array-like object).\n *\n * @returns {array} The given list.\n */\nexport const each = (f, a) => {\n    e.call(a, f);\n\n    return a;\n}\n\nexport default each;\n",null,null,null,"/**\n * Creates an iterable array of the given length, containing empty entries.\n *\n * @param {number} n The number of elements to create.\n *\n * @returns {array} An array of the given number of empty elements.\n */\nexport const range = (n) => Array(n).fill();\n\nexport default range;\n","const [{ length: start}, { length: end }] = '[object {type}]'.split('{type}');\n\n/**\n * Gives the type of a given input.\n *\n * @see https://stackoverflow.com/a/17772086/716898\n *\n * @param {*} x Any input to test.\n *\n * @returns {string} The type of `x`.\n */\nexport const type = (x) => toString.call(x).slice(start, -end);\n\nexport default type;\n","import { type } from './type';\n\nexport const isNumber = (x) => type(x) === 'Number';\n\nexport default isNumber;\n",null,null,"export const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);\nexport const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);\nexport const setC4 = (out, x, y, z, w) => (!out && (out = []),\n    (out[0] = x),\n    (out[1] = y),\n    (out[2] = z),\n    (out[3] = w),\n    out);\nexport const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),\n    (out[0] = a),\n    (out[1] = b),\n    (out[2] = c),\n    (out[3] = d),\n    (out[4] = e),\n    (out[5] = f),\n    out);\nexport const setC = (out, ...xs) => {\n    !out && (out = []);\n    for (let i = 0, n = xs.length; i < n; i++) {\n        out[i] = xs[i];\n    }\n    return out;\n};\n",null,null,null,"module.exports=\"/**\\n * The update step for a GPGPU particle simulation.\\n * Requires setup with preprocessor macros - see `macroPass`.\\n *\\n * @see [getStep]{@link ../step.js#getStep}\\n * @see [macroPass]{@link ../macros.js#macroPass}\\n */\\n\\n#ifdef GL_EXT_draw_buffers\\n    #extension GL_EXT_draw_buffers : require\\n#endif\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\n// Setting up the macros and aliases.\\n\\n#define posTexture texture_0\\n#define lifeTexture texture_1\\n#define accTexture texture_2\\n\\n#define posChannels channels_0\\n#define lifeChannels channels_1\\n#define accChannels channels_2\\n\\nuseSamples\\n\\n#ifdef output_0\\n    #define posOutput output_0\\n    useReads_0\\n    #define posReadPos0 reads_0_i(0)\\n    #define posReadPos1 reads_0_i(1)\\n    #define posReadAcc reads_0_i(2)\\n    #define posReadLife reads_0_i(3)\\n#endif\\n#ifdef output_1\\n    #define lifeOutput output_1\\n    useReads_1\\n    #define lifeReadLifeOldest reads_1_i(0)\\n    #define lifeReadLife1 reads_1_i(1)\\n#endif\\n#ifdef output_2\\n    #define accOutput output_2\\n    useReads_2\\n    #define accReadAcc reads_2_i(0)\\n    #define accReadLife reads_2_i(1)\\n#endif\\n\\n// The main shader.\\n\\n// States from `gl-gpgpu`.\\nuniform sampler2D states[stepsPast*textures];\\nuniform vec2 dataShape;\\n// Custom inputs for this demo.\\nuniform float dt;\\nuniform float time;\\nuniform float loop;\\nuniform vec2 lifetime;\\nuniform vec2 force;\\nuniform float useVerlet;\\nuniform vec3 g;\\nuniform vec3 source;\\n\\nvarying vec2 uv;\\n\\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\\n}\\n\\n#ifdef posOutput\\n    /**\\n * GLSL Verlet integration in 1-3 dimensions.\\n * See slide 26 of the second part of Acko's Animating Your Way to Glory.\\n * @see http://acko.net/blog/animate-your-way-to-glory/\\n *\\n * @todo Use macro to repeat calculation in any dimension?\\n *\\n * @param {float|vec2|vec3} a Acceleration.\\n * @param {float|vec2|vec3} p0 Past position.\\n * @param {float|vec2|vec3} p1 Current position.\\n * @param {float} dt0 Time elapsed in the last frame.\\n * @param {float} dt1 Time elapsed in the current frame.\\n *\\n * @returns {float|vec2|vec3} The new position.\\n */\\n\\nfloat verlet(in float a, in float p0, in float p1, in float dt0, in float dt1) {\\n    return (2.0*p1)-p0+(a*dt0*dt1);\\n}\\n\\nvec2 verlet(in vec2 a, in vec2 p0, in vec2 p1, in float dt0, in float dt1) {\\n    return (2.0*p1)-p0+(a*dt0*dt1);\\n}\\n\\nvec3 verlet(in vec3 a, in vec3 p0, in vec3 p1, in float dt0, in float dt1) {\\n    return (2.0*p1)-p0+(a*dt0*dt1);\\n}\\n\\n/**\\n * Constant time-step versions.\\n *\\n * @param {float|vec2|vec3} a Acceleration.\\n * @param {float|vec2|vec3} p0 Last position.\\n * @param {float|vec2|vec3} p1 Current position.\\n * @param {float} dt Time elapsed.\\n *\\n * @returns {float|vec2|vec3} The new position.\\n */\\n\\nfloat verlet(in float a, in float p0, in float p1, in float dt) {\\n    return verlet(a, p0, p1, dt, dt);\\n}\\n\\nvec2 verlet(in vec2 a, in vec2 p0, in vec2 p1, in float dt) {\\n    return verlet(a, p0, p1, dt, dt);\\n}\\n\\nvec3 verlet(in vec3 a, in vec3 p0, in vec3 p1, in float dt) {\\n    return verlet(a, p0, p1, dt, dt);\\n}\\n\\n#endif\\n\\n#if defined(lifeOutput) || defined(accOutput)\\n    highp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n#endif\\n\\n#ifdef accOutput\\n    const float tau = 6.28318530718;\\n\\n    // @see https://observablehq.com/@rreusser/equally-distributing-points-on-a-sphere\\n    vec3 randomOnSphere(vec2 randoms) {\\n        float a = randoms[0]*tau;\\n        float u = (randoms[1]*2.0)-1.0;\\n\\n        return vec3(sqrt(1.0-(u*u))*vec2(cos(a), sin(a)), u);\\n    }\\n#endif\\n\\nfloat when_gt_2281831123(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_2281831123(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_2281831123(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_2281831123(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nfloat when_le_529295689(float x, float y) {\\n  return 1.0 - when_gt_2281831123(x, y);\\n}\\n\\nvec2 when_le_529295689(vec2 x, vec2 y) {\\n  return 1.0 - when_gt_2281831123(x, y);\\n}\\n\\nvec3 when_le_529295689(vec3 x, vec3 y) {\\n  return 1.0 - when_gt_2281831123(x, y);\\n}\\n\\nvec4 when_le_529295689(vec4 x, vec4 y) {\\n  return 1.0 - when_gt_2281831123(x, y);\\n}\\n\\nvoid main() {\\n    // Sample textures.\\n    // Add pixel offset to sample from the pixel's center and avoid errors.\\n    vec2 st = uv+(vec2(0.25)/dataShape);\\n\\n    tapSamples(states, st, textures)\\n\\n    // Read values.\\n\\n    #ifdef posOutput\\n        vec3 pos0 = data[posReadPos0].posChannels;\\n    #endif\\n    #if defined(lifeOutput) || defined(posOutput)\\n        vec3 pos1 = data[posReadPos1].posChannels;\\n    #endif\\n\\n    #if defined(lifeOutput) || defined(posOutput) || defined(accOutput)\\n        #if defined(posOutput)\\n            #define readLife posReadLife\\n        #elif defined(lifeOutput)\\n            #define readLife lifeReadLife\\n        #elif defined(accOutput)\\n            #define readLife accReadLife\\n        #endif\\n\\n        float life = data[readLife].lifeChannels;\\n        float spawn = when_le_529295689(life, 0.0);\\n    #endif\\n\\n    #if defined(lifeOutput)\\n        float lifeOldest = data[lifeReadLifeOldest].lifeChannels;\\n    #endif\\n\\n    #if defined(posOutput) || defined(accOutput)\\n        #if defined(posOutput)\\n            #define readAcc posReadAcc\\n        #elif defined(accOutput)\\n            #define readAcc accReadAcc\\n        #endif\\n\\n        vec3 acc = data[readAcc].accChannels;\\n    #endif\\n\\n    // Output updated values.\\n    #ifdef posOutput\\n        // Use either Euler or Verlet integration.\\n        vec3 pos = mix(pos1+(acc*dt), verlet(acc, pos0, pos1, dt), useVerlet);\\n\\n        posOutput = mix(pos, source, spawn);\\n    #endif\\n    #ifdef lifeOutput\\n        life = max(0.0, life-dt);\\n\\n        float lifeSpawn = map(random(uv*loop),\\n            0.0, 1.0, lifetime[0], lifetime[1]);\\n\\n        // Only spawn life once the oldest step reaches the end of its lifetime\\n        // (past and current life are both 0).\\n        lifeOutput = mix(life, lifeSpawn, spawn*when_le_529295689(lifeOldest, 0.0));\\n    #endif\\n    #ifdef accOutput\\n        // To help accuracy of very small numbers, pass force as `[x, y] = xey`.\\n        float f = force.x*pow(10.0, force.y);\\n\\n        acc += g*f*dt;\\n\\n        vec2 randoms = vec2(random((uv+loop)/dt), random((uv-loop)*dt));\\n        vec3 accSpawn = randomOnSphere(randoms)*random(loop-(uv*dt))*f*5e3;\\n\\n        accOutput = mix(acc, accSpawn, spawn);\\n    #endif\\n}\\n\";","module.exports=\"/**\\n * Drawing a GPGPU particle simulation.\\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\\n *\\n * @see [macroPass]{@link ../macros.js#macroPass}\\n * @see [macroValues]{@link ../macros.js#macroValues}\\n */\\n\\n#define posTexture texture_0\\n#define lifeTexture texture_1\\n#define accTexture texture_2\\n\\n#define posChannels channels_0\\n#define lifeChannels channels_1\\n#define accChannels channels_2\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nattribute float index;\\n\\nuniform sampler2D states[stepsPast*textures];\\nuniform vec2 dataShape;\\nuniform vec2 viewShape;\\nuniform float pointSize;\\nuniform vec2 lifetime;\\nuniform float scale;\\n\\nvarying vec4 color;\\n\\n// Implementations for each dimension.\\n\\nfloat aspect(in float size, in float scale) {\\n    return scale/size;\\n}\\n\\nvec2 aspect(in vec2 size, in vec2 scale) {\\n    return scale/size;\\n}\\n\\nvec3 aspect(in vec3 size, in vec3 scale) {\\n    return scale/size;\\n}\\n\\nvec4 aspect(in vec4 size, in vec4 scale) {\\n    return scale/size;\\n}\\n\\n// These are for `scale` always `float`:\\n\\nvec2 aspect(in vec2 size, in float scale) {\\n    return aspect(size, vec2(scale));\\n}\\n\\nvec3 aspect(in vec3 size, in float scale) {\\n    return aspect(size, vec3(scale));\\n}\\n\\nvec4 aspect(in vec4 size, in float scale) {\\n    return aspect(size, vec4(scale));\\n}\\n\\nvec2 aspectContain(in vec2 size) {\\n    return aspect(size, min(size.x, size.y));\\n}\\n\\nvec3 aspectContain(in vec3 size) {\\n    return aspect(size, min(size.x, min(size.y, size.z)));\\n}\\n\\nvec4 aspectContain(in vec4 size) {\\n    return aspect(size, min(size.x, min(size.y, min(size.z, size.w))));\\n}\\n\\nfloat when_gt_1604150559(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_1604150559(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_1604150559(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_1604150559(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\n/**\\n * The step and entry indexes corrseponding to how many vertexes for pairs of\\n * line segments to link each entry's states, as detailed in the `indexPairs` JS\\n * function.\\n *\\n * @see [readme]{@link ./readme.md}\\n * @see [indexPairs]{@link ./index.js#indexPairs}\\n *\\n * @param {float|int} index The index of a vertex (assumes simple sequential\\n *     index attribute).\\n * @param {float|int} states How many steps of state each entry has.\\n *\\n * @returns {vec2|ivec2} The step and entry index, respectively, to look up the\\n *     correct data to draw a line along each entry's steps of state.\\n */\\nvec2 indexPairs(float index, float states) {\\n    float i = index/2.0;\\n    float s = states-1.0;\\n    float d = floor(i/s);\\n\\n    // Equivalent, but can avoid recalculating part of modulo, reusing `d`.\\n    // @see https://www.shaderific.com/glsl-functions#modulo\\n    // float m = mod(i, s);\\n    float m = i-(s*d);\\n\\n    return vec2(ceil(m), d);\\n}\\n\\nivec2 indexPairs(int index, int states) {\\n    return ivec2(indexPairs(float(index), float(states)));\\n}\\n\\nvoid main() {\\n    #if stepsPast < 2\\n        // If fewer than 2 steps are given, uses `gl.POINTS`.\\n        vec2 stepEntry = vec2(0.0, index);\\n    #else\\n        vec2 stepEntry = indexPairs(index, float(stepsPast));\\n    #endif\\n\\n    // Step back a full state's worth of textures per step index.\\n    int stateIndex = int(stepEntry[0])*textures;\\n\\n    // Turn the 1D index into a 2D texture UV.\\n    // Add pixel offset to sample from the pixel's center and avoid errors.\\n    vec2 uv = vec2(mod(stepEntry[1]+0.25, dataShape.x)/dataShape.x,\\n        (floor(stepEntry[1]/dataShape.x)+0.25)/dataShape.y);\\n\\n    // Sample the desired state values.\\n    // @todo Make use of the `reads` logic to take the minimum possible samples.\\n    vec3 pos = texture2D(states[stateIndex+posTexture], uv).posChannels;\\n    float life = texture2D(states[stateIndex+lifeTexture], uv).lifeChannels;\\n    float l = pow(life/lifetime[1], 0.7);\\n\\n    color = mix(vec4(l),\\n        vec4(stepEntry[0]/float(stepsPast), stepEntry[1]/float(count), 0.8,\\n            l/(dataShape.x*dataShape.y)),\\n        l);\\n\\n    vec2 ar = aspectContain(viewShape);\\n\\n    gl_Position = when_gt_1604150559(life, 0.0)*\\n        vec4(vec3(pos.xy*ar, pos.z*max(ar.x, ar.y))*scale, 1);\\n\\n    gl_PointSize = pointSize*l;\\n}\\n\";","module.exports=\"/**\\n * Drawing a GPGPU particle simulation.\\n * Requires setup with preprocessor macros. See `macroPass` and `macroValues`.\\n *\\n * @see [macroPass]{@link ../macros.js#macroPass}\\n * @see [macroValues]{@link ../macros.js#macroValues}\\n */\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec4 color;\\n\\nvoid main() { gl_FragColor = color; }\\n\";"]}